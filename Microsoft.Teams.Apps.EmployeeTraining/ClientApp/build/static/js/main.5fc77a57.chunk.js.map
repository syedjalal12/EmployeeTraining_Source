{"version":3,"sources":["constants/constants.ts","components/error-page.tsx","api/axios-decorator.ts","api/culture-metadata-api.ts","helpers/cache-helper.ts","i18n.ts","models/event-operation-type.ts","models/event-status.ts","helpers/api-helper.ts","models/event-audience.ts","models/event-type.ts","api/common-api.ts","api/user-group-api.ts","api/user-events-api.ts","models/language-direction.ts","api/create-event-api.ts","helpers/event-helper.ts","providers/context-provider.tsx","components/common/event-artifacts/audience.tsx","models/event-search-type.ts","models/sort-by.ts","components/common/event-artifacts/teams-meeting.tsx","components/common/event-artifacts/live-event.tsx","components/common/event-artifacts/mandatory.tsx","components/common/event-image/event-image.tsx","components/event-operation-task-module/event-details.tsx","components/register-remove-event/register-remove-event.tsx","components/event-image/event-image.tsx","components/event-card/event-card.tsx","components/user-events-wrapper/user-events-wrapper.tsx","components/no-content-page/no-content-page.tsx","components/common/popup-menu/popup-menu-checkboxes-content.tsx","components/common/popup-menu/popup-menu-radiogroup-content.tsx","components/common/popup-menu/popup-menu-wrapper.tsx","constants/resources.ts","helpers/localized-constants.ts","models/activity-status.ts","components/filter-bar/filter-bar.tsx","components/tab-menu/tab-menu.tsx","components/toast-notification/toast-notification.tsx","api/LnD-team-api.ts","helpers/mobile-filter-helper.ts","components/discover-events/discover-events.tsx","components/my-events/my-events.tsx","components/common/accordion-menu/accordion-menu-checkboxes-content.tsx","components/common/accordion-menu/accordion-menu-radiogroup-content.tsx","components/common/accordion-menu/accordion-menu-wrapper.tsx","components/mobile-filter-bar/mobile-filter-bar.tsx","components/manage-events/manage-events-menu.tsx","api/manage-events-api.ts","components/manage-events/manage-events.tsx","helpers/dark-customizations.ts","helpers/date-picker-styles.ts","helpers/people-picker-styles.ts","helpers/default-customizations.ts","components/common/date-picker/datepicker.tsx","components/common/time-picker/timepicker.tsx","components/common/color-picker/color-picker.tsx","components/create-event/create-event-step1.tsx","components/common/user-search-dropdown/dropdown-search.tsx","components/create-event/create-event-step2.tsx","components/create-event/create-event-step3.tsx","components/common/event-details/event-details.tsx","components/create-event/create-event-wrapper.tsx","api/manage-categories-api.ts","components/manage-categories/list-categories.tsx","components/manage-categories/manage-categories-operation-footer.tsx","components/manage-categories/add-update-category.tsx","components/manage-categories/delete-category.tsx","components/manage-categories/manage-categories.tsx","components/manage-events/close-cancel-event.tsx","components/manage-events/delete-draft.tsx","components/signin/signin.tsx","api/authentication-metadata-api.ts","components/signin/signin-start.tsx","components/signin/signin-end.tsx","router/router.tsx","app.tsx","index.tsx"],"names":["CategoryOperations","ResponseStatus","ErrorPage","props","code","token","search","window","location","params","URLSearchParams","get","state","resourceStrings","a","message","this","errorMessage","unauthorizedAccess","className","Flex","gap","hAlign","vAlign","Item","style","position","Label","icon","ErrorIcon","grow","column","Text","weight","error","content","React","axiosJWTDecoratorInstance","authorizationHeaderKey","acceptLanguageHeaderKey","url","data","config","setupAuthorizationHeader","axios","post","Promise","resolve","handleError","delete","put","patch","needAuthorizationHeader","headers","hasOwnProperty","response","microsoftTeams","reject","authTokenRequest","successCallback","defaults","i18n","language","failureCallback","console","href","resources","getAuthToken","Constants","body","theme","default","light","dark","contrast","categoryNameMaxLength","categoryDescriptionMaxLength","lazyLoadEventsCount","maxWidthForMobileView","apiBaseURL","origin","getDefaultCultureAsync","getSupportedCulturesAsync","getDataFromCache","cacheName","supportedCultureCache","nextCleanup","Date","getTime","localStorage","getItem","JSON","parse","removeItem","e","setDataToCache","key","value","setItem","stringify","defaultLocale","context","supportedCulturesCache","defaultCultureCache","includes","locale","split","changeLanguage","then","result","supportedCultures","use","Backend","initReactI18next","init","lng","fallbackLng","keySeparator","interpolation","escapeValue","react","useSuspense","EventOperationType","EventStatus","EventAudience","EventType","getAPIRequestConfigParams","baseAxios","getEventAsync","eventId","teamId","searchUsersAndGroups","searchText","encodeURIComponent","getGroupMembers","groupId","getUserProfiles","userIds","baseURL","getEventsAsync","searchString","pageCount","eventSearchType","createdByFilter","categoryFilter","sortByFilter","sortBy","registerToEventAsync","removeEventAsync","LanguageDirection","uploadEventImage","formData","saveEventAsDraft","event","updateEventAsDraft","createNewEvent","updateEvent","getEventCategoriesAsync","searchEventAsync","eventName","validateSelectedUsers","selectedUsersAndGroups","users","mandatoryUsers","Array","optionalUsers","groups","filteredUsers","i","length","userOrGroup","isGroup","id","status","OK","members","map","member","isMandatory","push","Set","filteredOptionalUsers","j","find","mandatoryUserId","filteredOptionalUsersInGroup","k","filteredMandatoryUsersInGroup","l","optionalUser","m","mandatoryUser","createEvent","stepEventState","eventDetails","startDate","moment","startOf","add","startTime","getHours","getMinutes","utc","toDate","endDate","endTime","selectedUserOrGroupListJSON","selectedUserGroups","updateEventDetails","saveEventAsDraftAsync","isDraft","formatEventDayAndTimeToShort","eventDay","local","format","eventStartTime","eventEndTime","withContext","WrappedComponent","teamsContext","dir","Ltr","setState","Rtl","Component","EventSearchType","SortBy","withTranslation","localize","t","circular","title","audienceType","Private","Layout","start","main","size","isImageLoaded","setImageLoaded","isErrorLoadingImage","setImageError","onImageNotLoaded","src","imageSrc","onLoad","onError","onAbort","fill","align","color","getArtifacts","artifactElements","isMandatoryForLoggedInUser","type","Teams","LiveEvent","audience","Public","renderOperationButtonText","eventOperationType","CloseRegistration","CancelEvent","Register","Remove","isLoadingEventDetails","Provider","Loader","isFailedToGetEventDetails","Fabric","isMobileView","truncated","categoryName","space","renderHeader","photo","selectedColor","backgroundColor","name","marginTop","Icon","iconName","eventType","venue","InPerson","Divider","vertical","styles","height","marginRight","renderEventVenue","design","description","meetingLink","target","rel","renderAttendeeURL","undefined","maximumNumberOfParticipants","registeredAttendeesCount","eventCreatedByName","Avatar","renderEventCreatorInfo","None","isOperationFailed","Button","primary","loading","isOperationInProgress","disabled","onClick","onPerformOperation","renderFooter","renderEventDetails","RegisterRemoveEvent","getEventDetailsAsync","queryParam","Active","isLoggedInUserRegistered","isRegistrationClosed","canLoggedInUserRegister","isLoading","getUserProfileAsync","createdBy","isErrorGettingEventDetails","userId","user","userInfo","eventCreatedBy","displayName","onRegisterRemoveEvent","isFailedToRegisterOrRemove","submitTask","isSuccess","shrink","footerElements","UserEvents","Container","fluid","pageStart","initialLoad","loader","useWindow","loadMore","loadMoreEvents","hasMore","hasMoreEvents","events","index","Col","xl","lg","sm","md","Row","data-testid","renderEvents","NoContent","EyeIcon","useTranslation","checkboxes","filteredCheckboxes","setFilteredCheckboxes","searchedString","setSearchString","disableClear","setdisableClear","checkBoxClicked","setcheckBoxClicked","setFilterCheckboxes","onCheckboxValueChange","checked","checkCount","checkboxList","checkbox","isChecked","trim","filteredItems","filter","item","toLowerCase","onCheckboxStateChange","filterItems","itemsToRender","slice","showSearchBar","Input","SearchIcon","iconPosition","placeholder","onChange","text","onSearchChange","selectedCount","deSelectAll","toString","Checkbox","label","checkboxLabel","RadioGroup","defaultCheckedValue","selectedValue","items","radioGroupItems","onCheckedValueChange","onRadiogroupStateChange","isOpen","popup","onOpenChange","onPopupOpenChange","Popup","open","trigger","onFilterClick","ChevronDownIcon","trapFocus","radioGroup","selectedSortBy","Resources","eventNameMaxLength","eventDescriptionMaxLength","eventVenueMaxLength","userEventsMobileFilteredCategoriesLocalStorageKey","userEventsMobileFilteredUsersLocalStorageKey","userEventsMobileSortByFilterLocalStorageKey","validUrlRegExp","colorCells","Recent","Popularity","ActivityStatus","getLocalizedSortBy","FilterBar","isFilterStateChanged","resize","innerWidth","screenWidth","onCategoryStateChange","categoryValues","selectedCategories","categoryList","categorySelectedCount","onCreatedByStateChange","createdByValues","selectedUsers","createdByList","createdBySelectedCount","onSortByStateChange","onCloseIconClick","onFilterBarCloseClick","onFilterChange","isFilterItemOpen","categories","category","filteredCategories","initializeIcons","addEventListener","bind","removeEventListener","nextProps","isReset","categoryId","aadObjectId","isVisible","CloseIcon","TabMenu","Menu","tabItems","defaultActiveIndex","defaultTabIndex","activeIndex","activeTabIndex","onActiveIndexChange","tabEventDetails","onTabIndexChange","ToastNotification","onClose","isShowNotification","notification","Toast","Success","autohide","delay","show","Body","baseAxiosUrl","getAllLnDTeamMembersAsync","clearMobileFilterLocalStorage","DiscoverEvents","timeout","mandatoryEventsCount","allEventsCount","screenResize","loadEventCategories","categoriesInFilter","loadAllLnDTeamMembers","lnDTeamMembersInFilter","pageNumber","MandatoryEventsForUser","AllPublicPrivateEventsForUser","loadEvents","mandatoryEvents","updatedEventResponse","findIndex","concat","setTotalEventsCount","allEvents","eventSeatchType","count","onEventClick","tasks","startTask","width","eventAtIndex","eventToUpdate","prevState","clearTimeout","isLoadingEvents","isResetFilter","setTimeout","getEvents","onSearchEvents","keyCode","onSearchTextChange","onFilterBarToggle","isFilterOpen","onMobileFilterButtonClick","onFilterBarClose","join","onMobileSearchBoxClose","isMobileSearchBoxOpen","userEventsContainerKey","finally","formatEventsCount","renderTabMenuItems","renderFilterButtonIcon","renderDesktopView","MenuButton","inverted","input","minWidth","maxWidth","onKeyUp","renderMobileView","iconOnly","all","results","MyEvents","registeredEventsCount","completedEventsCount","RegisteredEventsForUser","CompletedEventsForUser","registeredEvents","completedEvents","updatedRegisteredEvents","reduce","accumulator","setOpen","onAccordionOpenChange","onFilterOpenChange","MobileFilterBar","sortByList","loadFilterItems","eventCategories","lndTeamMembers","indexOf","sortByValue","sortByItem","sharedBy","updatedList","tag","onCategoriesFilterOpenStateChange","isCategoriesFilterOpen","isCreatedByFilterOpen","isSortByFilterOpen","onCreatedByFilterOpenStateChange","onSortByFilterOpenStateChange","onClearFilter","onApplyFilter","selectedCategoryIds","selectedUserIds","getActiveEventsMenu","outline","onEditEvent","onExportDetails","onSendReminder","kind","onCancelEvent","getDraftEventsMenu","onDeleteDraftEvent","getCompletedEventsMenu","menu","Draft","unshift","onCloseRegistration","getMenuItems","closeEventRegistrationsAsync","cancelEventAsync","deleteDraftEventAsync","exportEventDetailsToCSV","sendReminder","ManageEvents","draftEventsCount","activeEventsCount","eventsScrollAreaRef","componentWillReceiveProps","ActiveEventsForTeam","activeEvents","DraftEventsForTeam","draftEvents","CompletedEventsForTeam","infiniteScrollKey","formatEventDateAndTime","eventDayMonthYear","onTabMenuIndexChange","isCreateEvent","Error","updatedActiveEvents","updatedDraftEvents","URL","createObjectURL","Blob","downloadLink","document","createElement","setAttribute","click","getTabMenuItems","onEventCreated","err","getContext","onManageCategoriesClick","onCreateEventsClick","getEventsTableHeader","getEventType","SplitButton","button","onMenuItemClick","isInitialLoadComplete","onScreenSizeChange","Cancelled","List","rows","eventVenue","eventDateAndTime","truncateContent","Table","header","DarkDefaultPalette","themeDarker","themeDark","themeDarkAlt","themePrimary","themeSecondary","themeTertiary","themeLight","themeLighter","themeLighterAlt","black","neutralDark","neutralPrimary","neutralPrimaryAlt","neutralSecondary","neutralSecondaryAlt","neutralTertiary","neutralTertiaryAlt","neutralQuaternary","neutralQuaternaryAlt","neutralLight","neutralLighter","neutralLighterAlt","white","redDark","DarkTheme","createTheme","palette","semanticColors","buttonText","buttonTextPressed","buttonTextHovered","disabledBackground","inputBackgroundChecked","menuBackground","menuItemBackgroundHovered","menuItemBackgroundPressed","menuDivider","menuIcon","menuHeader","menuItemText","menuItemTextHovered","isInverted","DarkCustomizations","settings","scopedSettings","Card","root","background","DatePicker","TextHoverStyle","callout","bodyBackground","selectors","display","listItemBackgroundChecked","disabledBodyText","DetailsList","headerWrapper","borderColor","ActionButton","rootDisabled","rootHovered","rootPressed","DetailsRow","Modal","Overlay","blackTranslucent40","VerticalDivider","divider","wrapper","Backgroundcolor","green","DocumentCard","border","borderRight","DocumentCardPreview","borderBottom","Panel","closeButton","PeoplePickerItem","selected","removeButton","subComponentStyles","persona","primaryText","PersonaCoin","initials","showUnknownPersonaCoin","Separator","SpinButton","inputTextSelected","addVariants","DefaultCustomizations","StartDate","datePickerTheme","bgcolor","useState","selectedDate","setDate","minDate","setMinDate","Customizer","showMonthPickerAsOverlay","isMonthPickerVisible","onSelectDate","date","startCycle","set","hour","minute","second","onDateSelect","disableSelectionForPastDate","TimePicker","hours","padStart","minutes","setText","setHour","setMinute","minHours","setMinHour","minMinutes","setMinMinute","hoursItems","minutesItems","useEffect","onHourChange","onAdd","onMinuteChange","popupContent","Dropdown","getA11ySelectionMessage","onPickerClose","parseInt","isDisabled","defaultProps","ColorPicker","selectedId","setSelectedId","divKey","setDivKey","selectedIdFound","x","SwatchColorPicker","columnCount","cellShape","onColorChanged","onColorChange","CreateEventStep1","inputReference","timeZone","update","checkIfSaveAsDraftAllowed","eventValidationStatus","isPhotoValid","isColorValid","isNameValid","isDescriptionValid","isEventTypeValid","isEventCategoryValid","isVenueValid","isMaxNoofPartipantsValid","isMeetingLinkValid","isMaxNoofParticipantsValid","isEventNameExisting","checkIfNextAllowed","isTimeValid","isEventNameAlreadyExists","eventPageState","isEdit","checkEventName","match","checkEventAlreadyStarted","isValidatingStep1","nextBtnClick","modifiedState","selectedCategory","selectedEvent","selectedEventType","navigateToPage","setStartDate","setEndDate","getNameError","getMeetingLinkError","getDescriptionError","getVenueError","getEventTypeError","getEventCategoryError","getPhotoError","isPhotoDimentionsValid","getMaximumNoofParticipantsError","onEventNameChange","onEventDescriptionChange","eventDescription","onEventVenueChange","onLiveEventUrlChange","eventUrl","onMaxNoOfParticipantsChange","eventMaxNoofParticipants","onStartTimeChange","min","setHours","onEndTimeChange","handleUploadClick","current","inputKey","uploadImage","imageUploadLoader","handleChange","fileUploaded","files","isValid","img","Image","onload","FormData","append","isEventAlreadyExists","some","eventTypes","tz","guess","projectStartDate","getDate","onEventTypeChange","categoriesList","ref","maxLength","TextArea","secondary","DropdownSearch","initialReults","searchResult","setSearchResult","setLoading","setKey","setselectedValue","searchUsingAPI","searchQuery","array","email","onTypeSelection","onItemSelect","loadingMessage","onSearchQueryChange","initiateSearch","noResultsMessage","noResultMessage","CreateEventStep2","selectedAudience","selectedAudienceType","backBtnClick","onToggleChange","memberIndex","deleteItem","splice","renderMembers","toggle","TrashCanIcon","QuestionCircleIcon","onAudienceTypeSelection","onUserOrGroupSelection","selectedItem","selectedUserOrGroup","existingUsers","onAudienceChange","onAutoRegisterToggleChange","isAutoRegister","onMandatoryAllClocked","selectedUserGroup","audienceTypes","InfoIcon","ArrowLeftIcon","ArrowRightIcon","CreateEventStep3","getRegisteredAttendeesCount","getEventDayAndTime","isDraftLoading","isCreateLoading","EventDetails","errorGettingEventDetails","createdByName","setCreatedByName","getUserProfile","CreateEventWrapper","getEventDetailsToUpdate","selectedUsersOrGroups","displayReadonly","getAllCategories","setEventStep","currentStep","currentEventStep","renderOperation","createdOn","graphEventId","numberOfOccurrences","mandatoryAttendees","optionalAttendees","registeredAttendees","autoRegisteredAttendees","getCategoriesAsync","createCategoryAsync","updateCategoryAsync","deleteCategoriesAsync","categoryIds","ListCategories","forEach","statusMessage","getLastCategoryUpdateDateAndTime","sort","category1","category2","updatedOn","toUTCString","searchCategories","searchedCategories","onActionPerformed","categoryOperation","Edit","Delete","categoryOperationData","isSelected","onCategoryCheckedChange","manageControlsEnabilityAndSelection","onSelectAllCategoriesCheckedChange","isAllCategoriesSelected","onSearchTextChanged","renderCategoryOperationStatusIcon","showStatusIcon","PresenceAvailableIcon","timestamp","renderCategories","categoriesTableHeaderItems","searchedText","renderSearchInput","isEditEnabled","isDeleteEnabled","selectedCategoriesCount","AddIcon","Add","EditIcon","ManageCategoriesOperationFooter","backButtonContent","onBackClicked","renderError","submitButtonContent","isSubmitButtonDisabled","onSubmit","AddUpdateCategory","categoryDetails","createOrUpdateCategoryAsync","isCreatingOrUpdating","checkCategoryExists","isCategoryAlreadyExists","onCategoryAddedOrUpdated","onNameChanged","onDescriptionChanged","renderCategoryNameError","isInUse","required","DeleteCategory","deleteCategoryAsync","isDeleting","categoryIdsToDelete","onCategoryDeleted","paddingLeft","ManageCategories","setCategoryOperation","operationStatusMessage","Unknown","operationData","operation","onOperationSuccessful","onCategoryActionPerformed","CloseCancelEvent","operationType","onCloseOrCancelEvent","isFailedToCloseOrCancelEvent","DeleteDraftEvent","isUpdatingStatus","setUpdatingEventStatus","errorUpdatingEventStatus","setUpdateStatusError","deleteDraftEvent","marginLeft","margintop","bottom","SignInPage","authenticate","log","reason","getAuthenticationConsentMetadata","windowLocationOriginDomain","login_hint","loginhint","SignInSimpleStart","replace","upn","assign","SignInSimpleEnd","hashParams","hash","substr","s","v","decodeURIComponent","getHashParameters","notifyFailure","notifySuccess","AppRoute","fallback","exact","path","component","CloseOrCancelEvent","MobileFilter","App","setThemeComponent","getAppDOM","themes","teamsDark","teamsHighContrast","teams","forceUpdate","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.5fc77a57.chunk.js","sourcesContent":["/*\r\n    <copyright file=\"constants.ts\" company=\"Microsoft\">\r\n    Copyright (c) Microsoft. All rights reserved.\r\n    </copyright>\r\n*/\r\n\r\nexport default class Constants {\r\n\t//Themes\r\n\tpublic static readonly body: string = \"body\";\r\n\tpublic static readonly theme: string = \"theme\";\r\n\tpublic static readonly default: string = \"default\";\r\n\tpublic static readonly light: string = \"light\";\r\n\tpublic static readonly dark: string = \"dark\";\r\n\tpublic static readonly contrast: string = \"contrast\";\r\n\r\n\t//Constants for manage categories\r\n\tpublic static readonly categoryNameMaxLength: number = 100;\r\n\tpublic static readonly categoryDescriptionMaxLength: number = 300;\r\n\r\n\tpublic static readonly lazyLoadEventsCount: number = 50;\r\n\r\n\tpublic static readonly maxWidthForMobileView: number = 750;\r\n\r\n\t/** The base URL for API */\r\n\tpublic static readonly apiBaseURL = window.location.origin + \"/api\";\r\n}\r\n\r\n/** Indicates the operations that can be done on event categories */\r\nexport enum CategoryOperations {\r\n\tAdd,\r\n\tEdit,\r\n\tDelete,\r\n\tUnknown\r\n}\r\n\r\n/** Indicates the response status codes */\r\nexport enum ResponseStatus {\r\n\tOK = 200\r\n}","/*\r\n    <copyright file=\"error-page.tsx\" company=\"Microsoft\">\r\n    Copyright (c) Microsoft. All rights reserved.\r\n    </copyright>\r\n*/\r\n\r\nimport * as React from \"react\";\r\nimport { Text, Flex, Label } from \"@fluentui/react-northstar\";\r\nimport { ErrorIcon } from '@fluentui/react-icons-northstar';\r\n\r\ninterface errorPageState {\r\n    resourceStrings: any | \"\",\r\n}\r\n\r\nexport default class ErrorPage extends React.Component<{}, errorPageState> {\r\n    code: string | null = null;\r\n    token: string | null = null;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        let search = window.location.search;\r\n        let params = new URLSearchParams(search);\r\n        this.token = params.get(\"token\");\r\n        this.code = params.get(\"code\");\r\n        this.state = {\r\n            resourceStrings: {}\r\n        };\r\n    }\r\n\r\n    /** Called once component is mounted. */\r\n    async componentDidMount() {\r\n    }\r\n\r\n    /**\r\n     * Render error page.\r\n     * */\r\n    render() {\r\n        let message = this.state.resourceStrings.errorMessage;\r\n        if (this.code === \"401\") {\r\n            message = `${this.state.resourceStrings.unauthorizedAccess}`;\r\n        }\r\n\r\n        return (\r\n            <div className=\"container-div\">\r\n                <Flex gap=\"gap.small\" hAlign=\"center\" vAlign=\"center\" className=\"error-container\">\r\n                    <Flex gap=\"gap.small\" hAlign=\"center\" vAlign=\"center\">\r\n                        <Flex.Item>\r\n                            <div\r\n                                style={{\r\n                                    position: \"relative\",\r\n                                }}\r\n                            >\r\n                                <Label icon={<ErrorIcon />} />\r\n                            </div>\r\n                        </Flex.Item>\r\n\r\n                        <Flex.Item grow>\r\n                            <Flex column gap=\"gap.small\" vAlign=\"stretch\">\r\n                                <div>\r\n                                    <Text weight=\"bold\" error content={message} /><br />\r\n                                </div>\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                </Flex>\r\n            </div>\r\n        );\r\n    }\r\n}","/*\r\n    <copyright file=\"axios-decorator.ts\" company=\"Microsoft\">\r\n    Copyright (c) Microsoft. All rights reserved.\r\n    </copyright>\r\n*/\r\n\r\nimport axios, { AxiosResponse, AxiosRequestConfig } from \"axios\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport i18n from '../i18n';\r\n\r\nexport class AxiosJWTDecorator {\r\n    readonly authorizationHeaderKey = \"Authorization\";\r\n    readonly acceptLanguageHeaderKey = \"Accept-Language\";\r\n\r\n\t/**\r\n\t* Post data to API\r\n\t* @param  {String} url Resource URI\r\n\t* @param  {Object} data Request body data\r\n\t*/\r\n    public async post<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        data?: any,\r\n        config?: AxiosRequestConfig\r\n    ): Promise<R> {\r\n        try {\r\n            config = await this.setupAuthorizationHeader(config);\r\n            return await axios.post(url, data, config);\r\n        } catch (error) {\r\n            return Promise.resolve(this.handleError(error));\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t* Post data to API\r\n\t* @param  {String} url Resource URI\r\n\t*/\r\n    public async delete<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        config?: AxiosRequestConfig\r\n    ): Promise<R> {\r\n        try {\r\n            config = await this.setupAuthorizationHeader(config);\r\n            return await axios.delete(url, config);\r\n        } catch (error) {\r\n            return Promise.resolve(this.handleError(error));\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t* Post data to API\r\n\t* @param  {String} url Resource URI\r\n\t* @param  {Object} data Request body data\r\n\t*/\r\n    public async put<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        data?: any,\r\n        config?: AxiosRequestConfig\r\n    ): Promise<R> {\r\n        try {\r\n            config = await this.setupAuthorizationHeader(config);\r\n            return await axios.put(url, data, config);\r\n        } catch (error) {\r\n            return Promise.resolve(this.handleError(error));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Post data to API\r\n    * @param  {String} url Resource URI\r\n    * @param  {Object} data Request body data\r\n    */\r\n    public async patch<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        data?: any,\r\n        config?: AxiosRequestConfig\r\n    ): Promise<R> {\r\n        try {\r\n            config = await this.setupAuthorizationHeader(config);\r\n            return await axios.patch(url, data, config);\r\n        } catch (error) {\r\n            return Promise.resolve(this.handleError(error));\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t* Get data to API\r\n\t*/\r\n    public async get<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        config?: AxiosRequestConfig,\r\n        needAuthorizationHeader: boolean = true\r\n    ): Promise<R> {\r\n        try {\r\n            if (needAuthorizationHeader) {\r\n                config = await this.setupAuthorizationHeader(config);\r\n            }\r\n            return await axios.get(url, config);\r\n        } catch (error) {\r\n            return Promise.resolve(this.handleError(error));\r\n        }\r\n    }\r\n\r\n    /**\r\n\t* Get data to API\r\n\t*/\r\n    public async getCachedData<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        config?: AxiosRequestConfig,\r\n        needAuthorizationHeader: boolean = true\r\n    ): Promise<R> {\r\n        try {\r\n            if (needAuthorizationHeader) {\r\n                config = await this.setupAuthorizationHeader(config);\r\n                config.headers[\"Cache-Control\"] = \"max-age=1209600\"\r\n            }\r\n            return await axios.get(url, config);\r\n        } catch (error) {\r\n            return Promise.resolve(this.handleError(error));\r\n        }\r\n    }\r\n\r\n    /**\r\n\t* Handle error occurred during API call.\r\n\t* @param  {Object} error Error response object\r\n\t*/\r\n    private handleError(error: any):any {\r\n        if (error.hasOwnProperty(\"response\")) {\r\n            return error.response;\r\n        } else {\r\n            return error;\r\n        }\r\n    }\r\n\r\n\tprivate async setupAuthorizationHeader(\r\n\t\tconfig?: AxiosRequestConfig\r\n\t): Promise<AxiosRequestConfig> {\r\n\t\tmicrosoftTeams.initialize();\r\n\r\n\t\treturn new Promise<AxiosRequestConfig>((resolve, reject) => {\r\n\t\t\tconst authTokenRequest = {\r\n\t\t\t\tsuccessCallback: (token: string) => {\r\n\t\t\t\t\tif (!config) {\r\n\t\t\t\t\t\tconfig = axios.defaults;\r\n\t\t\t\t\t}\r\n                    config.headers[this.authorizationHeaderKey] = `Bearer ${token}`;\r\n                    config.headers[this.acceptLanguageHeaderKey] = i18n.language;\r\n\t\t\t\t\tresolve(config);\r\n\t\t\t\t},\r\n\t\t\t\tfailureCallback: (error: string) => {\r\n\t\t\t\t\t// When the getAuthToken function returns a \"resourceRequiresConsent\" error, \r\n\t\t\t\t\t// it means Azure AD needs the user's consent before issuing a token to the app. \r\n\t\t\t\t\t// The following code redirects the user to the \"Sign in\" page where the user can grant the consent. \r\n\t\t\t\t\t// Right now, the app redirects to the consent page for any error.\r\n\t\t\t\t\tconsole.error(\"Error from getAuthToken: \", error);\r\n\t\t\t\t\twindow.location.href = \"/signin\";\r\n\t\t\t\t},\r\n\t\t\t\tresources: []\r\n\t\t\t};\r\n\t\t\tmicrosoftTeams.authentication.getAuthToken(authTokenRequest);\r\n\t\t});\r\n\t}\r\n}\r\n\r\nconst axiosJWTDecoratorInstance = new AxiosJWTDecorator();\r\nexport default axiosJWTDecoratorInstance;","// <copyright file=\"culture-metadata-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport Constants from \"../constants/constants\";\r\n\r\n/**\r\n* Get default culture from API.\r\n*/\r\nexport const getDefaultCultureAsync = async (): Promise<any> => {\r\n    let url = `${Constants.apiBaseURL}/cultureMetadata`;\r\n\r\n    return await axios.get(url);\r\n}\r\n\r\n/**\r\n* Get supported cultures from API.\r\n*/\r\nexport const getSupportedCulturesAsync = async (): Promise<any> => {\r\n    let url = `${Constants.apiBaseURL}/cultureMetadata/supportedcultures`;\r\n\r\n    return await axios.get(url);\r\n}","// <copyright file=\"cache-helper.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nconst ONE_DAY = 1000 * 60 * 60 * 24;\r\n\r\n/**\r\n * Gets the data from local storage cache.\r\n * @param cacheName Name of the cache to get.\r\n */\r\nexport const getDataFromCache = (cacheName: string) => {\r\n    let supportedCultureCache = {\r\n        data: {},\r\n        nextCleanup: new Date().getTime() + ONE_DAY\r\n    }\r\n\r\n    try {\r\n        const data = localStorage.getItem(cacheName)\r\n        if (data) {\r\n            supportedCultureCache = JSON.parse(data)\r\n\r\n            // Remove cache if expired.\r\n            if (new Date().getTime() > supportedCultureCache.nextCleanup) {\r\n                localStorage.removeItem(cacheName);\r\n                return {\r\n                    data: {},\r\n                    nextCleanup: new Date().getTime() + ONE_DAY\r\n                }\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        console.error(e.message)\r\n    }\r\n\r\n    return supportedCultureCache\r\n}\r\n\r\n/**\r\n * Set the cache in local storage.\r\n * @param cacheName Name of the cache.\r\n * @param key Cache key.\r\n * @param value The value that need to stored.\r\n */\r\nexport const setDataToCache = (cacheName: string, key: string, value: any) => {\r\n    const supportedCultureCache = getDataFromCache(cacheName);\r\n    const data = supportedCultureCache.data;\r\n    data[key] = value;\r\n    try {\r\n        localStorage.setItem(cacheName, JSON.stringify(supportedCultureCache))\r\n    }\r\n    catch (e) {\r\n        console.error(e.message)\r\n        localStorage.removeItem(cacheName);\r\n    }\r\n}","// <copyright file=\"i18n.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport Backend from 'i18next-xhr-backend';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { getDefaultCultureAsync, getSupportedCulturesAsync } from \"./api/culture-metadata-api\";\r\nimport { getDataFromCache, setDataToCache } from \"./helpers/cache-helper\";\r\n\r\nconst SUPPORTEDCULTURE_CACHE = \"SUPPORTEDCULTURE_CACHE\"\r\nconst SupportedCulturesKey = \"SupportedCultures\"\r\nconst DEFAULTCULTURE_CACHE = \"DEFAULTCULTURE_CACHE\"\r\nconst DefaultCultureKey = \"DefaultCulture\"\r\n\r\nlet locale = \"en\";\r\nlet defaultLocale = \"en\";\r\nmicrosoftTeams.initialize();\r\nmicrosoftTeams.getContext((context: microsoftTeams.Context) => {\r\n    // Get suported cultures and default culture from cache.\r\n    const supportedCulturesCache = getDataFromCache(SUPPORTEDCULTURE_CACHE);\r\n    const defaultCultureCache = getDataFromCache(DEFAULTCULTURE_CACHE);\r\n\r\n    // Check if cache is present.\r\n    if (supportedCulturesCache.data[SupportedCulturesKey] && defaultCultureCache.data[DefaultCultureKey]) {\r\n        if (supportedCulturesCache.data[SupportedCulturesKey].includes(context.locale.split(\"-\")[0]) || supportedCulturesCache.data[SupportedCulturesKey].includes(context.locale)) {\r\n            i18n.changeLanguage(context.locale!);\r\n        }\r\n        else {\r\n            i18n.changeLanguage(defaultCultureCache.data[DefaultCultureKey]);\r\n        }\r\n    }\r\n    else {\r\n        getSupportedCulturesAsync().then((result: any) => {\r\n            const supportedCultures = result.data;\r\n\r\n            // Set supported culture to cache.\r\n            setDataToCache(SUPPORTEDCULTURE_CACHE, SupportedCulturesKey, supportedCultures);\r\n            if (supportedCultures.includes(context.locale.split(\"-\")[0]) || supportedCultures.includes(context.locale)) {\r\n                i18n.changeLanguage(context.locale!);\r\n            }\r\n            else {\r\n                getDefaultCultureAsync().then((result: any) => {\r\n                    defaultLocale = result.data;\r\n\r\n                    // Set default culture to cache.\r\n                    setDataToCache(DEFAULTCULTURE_CACHE, DefaultCultureKey, defaultLocale);\r\n                    i18n.changeLanguage(defaultLocale);\r\n                });\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\ni18n\r\n.use(Backend)\r\n.use(initReactI18next) // passes i18n down to react-i18next\r\n.init({\r\n    lng: locale,\r\n    fallbackLng: defaultLocale,\r\n    keySeparator: false, // we do not use keys in form messages.welcome\r\n    interpolation: {\r\n        escapeValue: false // react already safes from xss\r\n    },\r\n    react: {\r\n        useSuspense: true\r\n    }\r\n});\r\n\r\nexport default i18n;","// <copyright file=\"event-operation-type.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\n/** Indicates the event operation */\r\nexport enum EventOperationType {\r\n    /** No event operation */\r\n    None,\r\n\r\n    /** The operation in task module to close event registrations */\r\n    CloseRegistration,\r\n\r\n    /** The operation in task module to cancel an event to occur */\r\n    CancelEvent,\r\n\r\n    /** The operation in task module to register for an event */\r\n    Register,\r\n\r\n    /** The operation in task module to cancel event registration */\r\n    Remove\r\n}","// <copyright file=\"event-status.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\n/** Contains the values for event status */\r\nexport enum EventStatus {\r\n    /** Indicates that the event status is not specified */\r\n    None,\r\n\r\n    /** Indicates that the event is in draft */\r\n    Draft,\r\n\r\n    /** Indicates that the event is active */\r\n    Active,\r\n\r\n    /** Indicates that the event has been cancelled */\r\n    Cancelled,\r\n\r\n    /** Indicates that the event has been completed */\r\n    Completed\r\n}","// <copyright file=\"api-helper.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport baseAxios, { AxiosRequestConfig } from \"axios\";\r\n\r\n/**\r\n * Gets the API request configuration parameters\r\n * @param params The request parameters\r\n */\r\nexport const getAPIRequestConfigParams = (params: any) => {\r\n    let config: AxiosRequestConfig = baseAxios.defaults;\r\n    config.params = params;\r\n\r\n    return config;\r\n}","// <copyright file=\"event-audience.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nexport enum EventAudience {\r\n    /** Indicates that the event audience is not specified */\r\n    None,\r\n\r\n    /** Indicates that the event is public */\r\n    Public = 1,\r\n\r\n    /** Indicates that the event is private */\r\n    Private = 2,\r\n}","// <copyright file=\"event-type.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nexport enum EventType {\r\n    /** Indicates that the event type is not specified */\r\n    None,\r\n\r\n    /** Indicates that the event occurs in physical presence */\r\n    InPerson = 1,\r\n\r\n    /** Indicates that the event is a Microsoft Teams meeting */\r\n    Teams = 2,\r\n\r\n    /** Indicates that the event is a Microsoft Teams meeting */\r\n    LiveEvent = 3,\r\n}","// <copyright file=\"common-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport Constants from \"../constants/constants\";\r\nimport { getAPIRequestConfigParams } from \"../helpers/api-helper\";\r\n\r\n/**\r\n * Gets event details\r\n * @param eventId The event ID of which details need to be retrieved\r\n * @param teamId The LnD team ID\r\n */\r\nexport const getEventAsync = async (eventId: string, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/Event`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.get(url, config);\r\n}","// <copyright file=\"user-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport Constants from \"../constants/constants\";\r\nimport { getAPIRequestConfigParams } from \"../helpers/api-helper\";\r\n\r\n/**\r\n* Search users and groups.\r\n * @param searchText defines the searched text\r\n*/\r\nexport const searchUsersAndGroups = async (searchText: string): Promise<any> => {\r\n    let url = `${Constants.apiBaseURL}/users`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ searchText: encodeURIComponent(searchText) });\r\n\r\n    return await axios.get(url, config);\r\n}\r\n\r\n/**\r\n* Get members of group.\r\n * @param groupId identifies a particular group of members\r\n*/\r\nexport const getGroupMembers = async (groupId: string): Promise<any> => {\r\n    let url = `${Constants.apiBaseURL}/group/get-group-members`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ groupId: groupId });\r\n\r\n    return await axios.get(url, config);\r\n}\r\n\r\n/**\r\n * Gets the user profiles\r\n * @param userIds The user IDs of which profiles to get\r\n */\r\nexport const getUserProfiles = async (userIds: Array<string>): Promise<any> => {\r\n    let url = `${Constants.apiBaseURL}/users`;\r\n    return await axios.post(url, userIds);\r\n}","// <copyright file=\"user-events-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport baseAxios, { AxiosRequestConfig } from \"axios\";\r\n\r\n/** The base URL for API */\r\nconst baseURL = window.location.origin + \"/api\";\r\n\r\n/**\r\n * Register to an event\r\n * @param eventId The event Id in which registration need to be done\r\n */\r\nexport const getEventsAsync = async (\r\n    searchString: string, pageCount: number, eventSearchType: number, createdByFilter: string, categoryFilter: string, sortByFilter: number) => {\r\n    let url = `${baseURL}/event/UserEvents`;\r\n    let config: AxiosRequestConfig = baseAxios.defaults;\r\n    config.params = {\r\n        searchString: encodeURIComponent(searchString),\r\n        pageCount: pageCount,\r\n        eventSearchType: eventSearchType,\r\n        createdByFilter: createdByFilter,\r\n        categoryFilter: categoryFilter,\r\n        sortBy: sortByFilter\r\n    };\r\n\r\n    return axios.get(url, config);\r\n}\r\n\r\n/**\r\n * Registers user to an event\r\n * @param teamId The LnD team ID who created the event\r\n * @param eventId The event Id in which registration need to be done\r\n */\r\nexport const registerToEventAsync = (teamId: string, eventId: string) => {\r\n    let url = `${baseURL}/event/RegisterToEvent?teamId=${teamId}&eventId=${eventId}`;\r\n    let config: AxiosRequestConfig = baseAxios.defaults;\r\n    config.params = {\r\n        teamId: teamId,\r\n        eventId: eventId\r\n    };\r\n\r\n    return axios.post(url, null, config);\r\n}\r\n\r\n/**\r\n * Un-register user to an event\r\n * @param teamId The LnD team ID who created the event\r\n * @param eventId The event Id in which registration need to be cancelled\r\n */\r\nexport const removeEventAsync = (teamId: string, eventId: string) => {\r\n    let url = `${baseURL}/event/UnregisterToEvent`;\r\n    let config: AxiosRequestConfig = baseAxios.defaults;\r\n    config.params = {\r\n        teamId: teamId,\r\n        eventId: eventId\r\n    };\r\n\r\n    return axios.post(url, null, config);\r\n}","// <copyright file=\"language-direction.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nexport enum LanguageDirection {\r\n    /** Indicates that the language direction is right-to-left*/\r\n    Rtl = \"rtl\",\r\n\r\n    /** Indicates that the language direction is left-to-right*/\r\n    Ltr = \"ltr\",\r\n\r\n    /** Indicates that the language direction is auto*/\r\n    Auto = \"auto\",\r\n}","// <copyright file=\"create-event-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport { IEvent } from \"../models/IEvent\";\r\nimport Constants from \"../constants/constants\";\r\nimport { getAPIRequestConfigParams } from \"../helpers/api-helper\";\r\n\r\n/**\r\n * Upload image photo\r\n * @param formData Form data containing selected image\r\n * @param teamId The LnD team Id\r\n */\r\nexport const uploadEventImage = async (formData: FormData, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/eventfiles/upload-image`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.post(url, formData, config);\r\n}\r\n\r\n/**\r\n * Save event as draft\r\n * @param event Event details to be saved as draft\r\n * @param teamId The LnD team Id\r\n */\r\nexport const saveEventAsDraft = async (event: IEvent, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/eventworkflow/create-draft`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.post(url, event, config);\r\n}\r\n\r\n/**\r\n * Update draft event\r\n * @param event Event details to be updated as draft\r\n * @param teamId The LnD team Id\r\n */\r\nexport const updateEventAsDraft = async (event: IEvent, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/eventworkflow/update-draft`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.patch(url, event, config);\r\n}\r\n\r\n/**\r\n * Create event and add to calendar\r\n * @param event Event details to be saved\r\n * @param teamId The LnD team Id\r\n */\r\nexport const createNewEvent = async (event: IEvent, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/eventworkflow/create-event`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.post(url, event, config);\r\n}\r\n\r\n/**\r\n * Update event details\r\n * @param event Event details to be updated\r\n * @param teamId The LnD team Id\r\n */\r\nexport const updateEvent = async (event: IEvent, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/eventworkflow/update-event`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.patch(url, event, config);\r\n}\r\n\r\n/**\r\n * Gets event categories\r\n * @param teamId The LnD team Id\r\n */\r\nexport const getEventCategoriesAsync = async () => {\r\n    let url = `${Constants.apiBaseURL}/category/get-categories-for-event`;\r\n    return await axios.get(url);\r\n}\r\n\r\n/**\r\n * Check for event with same name\r\n * @param eventName User entered event name\r\n */\r\nexport const searchEventAsync = async (eventName:string) => {\r\n    let url = `${Constants.apiBaseURL}/event/search-by-title`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ search: eventName });\r\n\r\n    return await axios.get(url, config);\r\n}","import { createNewEvent, saveEventAsDraft, updateEvent, updateEventAsDraft } from \"../api/create-event-api\";\r\nimport { ResponseStatus } from \"../constants/constants\";\r\nimport { ISelectedUserGroup } from \"../models/ISelectedUserGroup\";\r\nimport { getGroupMembers } from \"../api/user-group-api\";\r\nimport { ICreateEventState } from \"../models/ICreateEventState\";\r\nimport moment from 'moment';\r\n\r\nexport const validateSelectedUsers = async (selectedUsersAndGroups: Array<ISelectedUserGroup>) => {\r\n    let users = { mandatoryUsers: new Array<string>(), optionalUsers: new Array<string>() };\r\n    let groups = { mandatoryUsers: new Array<string>(), optionalUsers: new Array<string>() };\r\n\r\n    let filteredUsers = { mandatoryUsers: new Array<string>(), optionalUsers: new Array<string>() };\r\n\r\n    for (let i = 0; i < selectedUsersAndGroups.length; i++) {\r\n        let userOrGroup = selectedUsersAndGroups[i];\r\n        if (userOrGroup.isGroup) {\r\n            let response = await getGroupMembers(userOrGroup.id);\r\n            if (response.status === ResponseStatus.OK) {\r\n                let members = response.data.map((member) => { return member.id });\r\n                if (userOrGroup.isMandatory) {\r\n                    groups.mandatoryUsers.push(...members);\r\n                }\r\n                else {\r\n                    groups.optionalUsers.push(...members);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (userOrGroup.isMandatory) {\r\n                users.mandatoryUsers.push(userOrGroup.id);\r\n            }\r\n            else {\r\n                users.optionalUsers.push(userOrGroup.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Remove duplicates\r\n    users.mandatoryUsers = [...new Set(users.mandatoryUsers)];\r\n    users.optionalUsers = [...new Set(users.optionalUsers)];\r\n    groups.mandatoryUsers = [...new Set(groups.mandatoryUsers)];\r\n    groups.optionalUsers = [...new Set(groups.optionalUsers)];\r\n\r\n    // Remove users from optional array if present in both mandatory and optional array (for users).\r\n    let filteredOptionalUsers = new Array<string>();\r\n    for (let j = 0; j < users.optionalUsers.length; j++) {\r\n        let result = users.mandatoryUsers.find((mandatoryUserId) => mandatoryUserId === users.optionalUsers[j]);\r\n        if (!result) {\r\n            filteredOptionalUsers.push(users.optionalUsers[j]);\r\n        }\r\n    }\r\n    users.optionalUsers = filteredOptionalUsers;\r\n\r\n    // Remove users from optional array if present in both mandatory and optional array (for users in group).\r\n    let filteredOptionalUsersInGroup = new Array<string>();\r\n    for (let k = 0; k < groups.optionalUsers.length; k++) {\r\n        let result = groups.mandatoryUsers.find((mandatoryUserId) => mandatoryUserId === groups.optionalUsers[k]);\r\n        if (!result) {\r\n            filteredOptionalUsersInGroup.push(groups.optionalUsers[k]);\r\n        }\r\n    }\r\n\r\n    groups.optionalUsers = filteredOptionalUsersInGroup;\r\n\r\n    // Check if user from group is added again as single user.\r\n    // If true then single user entity's mandatory/optional status will be considered and group's status will be neglected for that user.\r\n    let filteredMandatoryUsersInGroup = new Array<string>();\r\n    for (let l = 0; l < groups.mandatoryUsers.length; l++) {\r\n        let result = users.optionalUsers.find((optionalUser) => optionalUser === groups.mandatoryUsers[l]);\r\n        if (!result) {\r\n            filteredMandatoryUsersInGroup.push(groups.mandatoryUsers[l]);\r\n        }\r\n    }\r\n    groups.mandatoryUsers = filteredMandatoryUsersInGroup;\r\n\r\n    filteredOptionalUsersInGroup = new Array<string>();\r\n    for (let m = 0; m < groups.optionalUsers.length; m++) {\r\n        let result = users.mandatoryUsers.find((mandatoryUser) => mandatoryUser === groups.optionalUsers[m]);\r\n        if (!result) {\r\n            filteredOptionalUsersInGroup.push(groups.optionalUsers[m]);\r\n        }\r\n    }\r\n    groups.optionalUsers = filteredOptionalUsersInGroup;\r\n\r\n    filteredUsers.mandatoryUsers.push(...users.mandatoryUsers);\r\n    filteredUsers.mandatoryUsers.push(...groups.mandatoryUsers);\r\n    filteredUsers.optionalUsers.push(...users.optionalUsers);\r\n    filteredUsers.optionalUsers.push(...groups.optionalUsers);\r\n\r\n    filteredUsers.mandatoryUsers = [...new Set(filteredUsers.mandatoryUsers)];\r\n    filteredUsers.optionalUsers = [...new Set(filteredUsers.optionalUsers)];\r\n\r\n    return { mandatoryUsers: filteredUsers.mandatoryUsers, optionalUsers: filteredUsers.optionalUsers };\r\n}\r\n\r\nexport const createEvent = async (stepEventState: ICreateEventState, teamId: string) => {\r\n    let eventDetails = { ...stepEventState.eventDetails };\r\n    eventDetails.startDate = moment(eventDetails.startDate).startOf('day').add(eventDetails.startTime?.getHours(), 'hours').add(eventDetails.startTime?.getMinutes(), 'minutes').utc().toDate();\r\n    eventDetails.endDate = moment(eventDetails.endDate).startOf('day').add(eventDetails.startTime?.getHours(), 'hours').add(eventDetails.startTime?.getMinutes(), 'minutes').utc().toDate();\r\n    eventDetails.startTime = moment(eventDetails.startTime).utc().toDate();\r\n    eventDetails.endTime = moment(eventDetails.endTime).utc().toDate();\r\n    eventDetails.selectedUserOrGroupListJSON = JSON.stringify(stepEventState.selectedUserGroups);\r\n    let response = await createNewEvent(eventDetails, teamId);\r\n\r\n    if (response.status === ResponseStatus.OK) {\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const updateEventDetails = async (stepEventState: ICreateEventState, teamId: string) => {\r\n    let eventDetails = { ...stepEventState.eventDetails };\r\n    eventDetails.startDate = moment(eventDetails.startDate).utc().toDate();\r\n    eventDetails.endDate = moment(eventDetails.endDate).utc().toDate();\r\n    eventDetails.startTime = moment(eventDetails.startTime).utc().toDate();\r\n    eventDetails.endTime = moment(eventDetails.endTime).utc().toDate();\r\n    eventDetails.selectedUserOrGroupListJSON = JSON.stringify(stepEventState.selectedUserGroups);\r\n    let response = await updateEvent(eventDetails, teamId);\r\n\r\n    if (response.status === ResponseStatus.OK) {\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const saveEventAsDraftAsync = async (stepEventState: ICreateEventState, teamId: string) => {\r\n    let eventDetails = stepEventState.eventDetails;\r\n    // let users = await getUserIdString(stepEventState.selectedUserGroups);\r\n    eventDetails.startDate = moment(eventDetails.startDate).utc().toDate();\r\n    eventDetails.endDate = moment(eventDetails.endDate).utc().toDate();\r\n    eventDetails.startTime = moment(eventDetails.startTime).utc().toDate();\r\n    eventDetails.endTime = moment(eventDetails.endTime).utc().toDate();\r\n    eventDetails.selectedUserOrGroupListJSON = JSON.stringify(stepEventState.selectedUserGroups);\r\n\r\n    if (stepEventState.isDraft) {\r\n        let response = await updateEventAsDraft(eventDetails, teamId);\r\n\r\n        if (response.status === ResponseStatus.OK) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    else {\r\n        let response = await saveEventAsDraft(eventDetails, teamId);\r\n\r\n        if (response.status === ResponseStatus.OK) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n    * Format and renders event day and time as per local time.\r\n    * @param startDate The start date of an event\r\n    * @param startTime The start time of an event\r\n    * @param endTime The end time of an event\r\n    * @returns Returns formatted date and time. Ex. Tue, 10:00 - 11:00\r\n    */\r\nexport const formatEventDayAndTimeToShort = (startDate: Date, startTime: Date, endTime: Date) => {\r\n    let eventDay = moment.utc(startDate).local().format(\"ddd\");\r\n    let eventStartTime = moment.utc(startTime).local().format(\"HH:mm\");\r\n    let eventEndTime = moment.utc(endTime).local().format(\"HH:mm\");\r\n\r\n    return `${eventDay}, ${eventStartTime} - ${eventEndTime}`;\r\n}","// <copyright file=\"context-provider.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport i18n from \"i18next\";\r\nimport React, { Component } from 'react';\r\nimport { LanguageDirection } from \"../models/language-direction\";\r\n\r\nexport interface IWithContext {\r\n    teamsContext: microsoftTeams.Context | null,\r\n    microsoftTeams: typeof microsoftTeams,\r\n    dir: LanguageDirection\r\n}\r\n\r\nexport default function withContext(WrappedComponent: any) {\r\n    return class extends Component<any, IWithContext> {\r\n        constructor(props:any) {\r\n            super(props);\r\n            this.state = {\r\n                teamsContext: null,\r\n                microsoftTeams: microsoftTeams,\r\n                dir: LanguageDirection.Ltr\r\n            };\r\n        }\r\n\r\n        componentDidMount() {\r\n            microsoftTeams.initialize();\r\n            microsoftTeams.getContext((context: microsoftTeams.Context) => {\r\n                this.setState({ teamsContext: context, dir: i18n.dir(context.locale!) === LanguageDirection.Rtl ? LanguageDirection.Rtl : LanguageDirection.Ltr});\r\n            });\r\n        }\r\n\r\n        /** Renders component */\r\n        render() {\r\n            return (\r\n                <WrappedComponent {...this.props} teamsContext={this.state.teamsContext} microsoftTeams={this.state.microsoftTeams} dir={this.state.dir}/>\r\n            );\r\n        }\r\n    }\r\n}","// <copyright file=\"audience.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { EyeIcon, EyeSlashIcon, Text, Label, Layout } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { EventAudience } from \"../../../models/event-audience\";\r\nimport withContext, { IWithContext } from \"../../../providers/context-provider\";\r\nimport { LanguageDirection } from \"../../../models/language-direction\";\r\n\r\ninterface IAudienceArtifact extends WithTranslation, IWithContext {\r\n    audienceType: EventAudience\r\n}\r\n\r\n/** The event audience artifact */\r\nconst AudienceArtifact: React.FunctionComponent<IAudienceArtifact> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    return (\r\n        <Label\r\n            circular\r\n            className={props.dir === LanguageDirection.Rtl ? \"event-artifact rtl-right-margin-small\" : \"event-artifact\"}\r\n            title={props.audienceType === EventAudience.Private ? localize(\"private\") : localize(\"public\")}\r\n            content={\r\n                <Layout className=\"text-overflow-ellipsis\"\r\n                gap=\".6rem\"\r\n                start={props.audienceType === EventAudience.Private ? <EyeSlashIcon /> : <EyeIcon />}\r\n                main={<Text className=\"text-overflow-ellipsis\" content={props.audienceType === EventAudience.Private ? localize(\"private\") : localize(\"public\")} size=\"small\" weight=\"semibold\" />}\r\n            />}\r\n        />\r\n    );\r\n}\r\n\r\nexport default withTranslation()(withContext(AudienceArtifact));","// <copyright file=\"event-search-type.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nexport enum EventSearchType {\r\n    /** Represents operation type to get all public and private events for user */\r\n    AllPublicPrivateEventsForUser,\r\n\r\n    /** Represents operation type to get mandatory events for user */\r\n    MandatoryEventsForUser,\r\n\r\n    /** Represents operation type to get draft events for team */\r\n    DraftEventsForTeam,\r\n\r\n    /** Represents operation type to get active events for team */\r\n    ActiveEventsForTeam,\r\n\r\n    /** Represents operation type to get completed events for team */\r\n    CompletedEventsForTeam,\r\n\r\n    /** Represents operation type to get registered events for a user */\r\n    RegisteredEventsForUser,\r\n\r\n    /** Represents operation type to get completed events for a user */\r\n    CompletedEventsForUser = 7,\r\n}","// <copyright file=\"sort-by.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\n/** Represents 0 for recent and 1 for popular events */\r\nexport enum SortBy {\r\n    /** Represents default sorting of event by most recent first */\r\n    Recent,\r\n\r\n    /** Represents sorting of events by most number of registered attendee for an event */\r\n    Popularity,\r\n}","// <copyright file=\"teams-meeting.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Text, Label, TeamsIcon, Layout } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\n\r\n/** The teams-meeting artifact */\r\nconst TeamsMeetingArtifact: React.FunctionComponent<WithTranslation> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    return (\r\n        <Label\r\n            circular\r\n            className=\"event-artifact\"\r\n            title={localize(\"teamsMeeting\")}\r\n            content={<Layout className=\"text-overflow-ellipsis\"\r\n                gap=\".6rem\"\r\n                start={<TeamsIcon />}\r\n                main={<Text className=\"text-overflow-ellipsis\" content={localize(\"teamsMeeting\")} size=\"small\" weight=\"semibold\" />}\r\n            />} />\r\n    );\r\n}\r\n\r\nexport default withTranslation()(TeamsMeetingArtifact);","// <copyright file=\"live-event.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Text, Label, BroadcastIcon, Layout } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\n\r\n/** The live event artifact */\r\nconst LiveEventArtifact: React.FunctionComponent<WithTranslation> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    return (\r\n        <Label\r\n            circular\r\n            className=\"event-artifact\"\r\n            title={localize(\"liveEvent\")}\r\n            content={\r\n                <Layout className=\"text-overflow-ellipsis\"\r\n                gap=\".6rem\"\r\n                start={<BroadcastIcon />}\r\n                main={<Text className=\"text-overflow-ellipsis\" content={localize(\"liveEvent\")} size=\"small\" weight=\"semibold\" />}\r\n            />}\r\n        />\r\n    );\r\n}\r\n\r\nexport default withTranslation()(LiveEventArtifact);","// <copyright file=\"mandatory.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Label, RedbangIcon, Text, Layout } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\n\r\n/** The mandatory event artifact */\r\nconst MandatoryArtifact: React.FunctionComponent<WithTranslation> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    return (\r\n        <Label\r\n            circular\r\n            className=\"event-artifact mandatory text-overflow-ellipsis\"\r\n            title={localize(\"mandatoryArtifactText\")}\r\n            content={\r\n                <Layout className=\"text-overflow-ellipsis\"\r\n                    start={<RedbangIcon />}\r\n                    main={<Text className=\"text-overflow-ellipsis\" content={localize(\"mandatoryArtifactText\")} size=\"small\" weight=\"semibold\" />}\r\n                />\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default withTranslation()(MandatoryArtifact);","// <copyright file=\"event-image.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text, ImageUnavailableIcon } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\n\r\nimport \"./event-image.css\";\r\n\r\ninterface IEventImage extends WithTranslation {\r\n    className: string | undefined,\r\n    imageSrc: string\r\n}\r\n\r\n/**\r\n * Renders event image. If image not loaded successfully, then renders placeholder\r\n * @param props The props of type IEventImage\r\n */\r\nconst EventImage: React.FunctionComponent<IEventImage> = props => {\r\n    let localize: TFunction = props.t;\r\n\r\n    let [isImageLoaded, setImageLoaded] = React.useState(false);\r\n    let [isErrorLoadingImage, setImageError] = React.useState(false);\r\n\r\n    /** The event handler called when image loaded successfully */\r\n    const onImageLoaded = () => {\r\n        setImageLoaded(true);\r\n    }\r\n\r\n    /** The event handler called when image was not loaded or user aborted loading image */\r\n    const onImageNotLoaded = () => {\r\n        setImageError(true);\r\n    }\r\n\r\n    const renderImagePlaceholder = () => {\r\n        if (!isImageLoaded && !isErrorLoadingImage) {\r\n            return (\r\n                <Flex\r\n                    className={`${props.className} event-image-placeholder-container`}\r\n                    vAlign=\"center\"\r\n                    hAlign=\"center\">\r\n                    <Flex className=\"event-image-placeholder\" vAlign=\"center\" hAlign=\"center\" gap=\"gap.small\" fill>\r\n                        <Text\r\n                            content={localize(\"eventCardImageLoadingPlaceholder\")}\r\n                            align=\"center\" size=\"medium\"\r\n                            weight=\"semibold\"\r\n                            color=\"white\"\r\n                        />\r\n                    </Flex>\r\n                </Flex>\r\n            );\r\n        }\r\n        else if (isErrorLoadingImage) {\r\n            return (\r\n                <Flex\r\n                    className={`${props.className} event-image-placeholder-container`}\r\n                    vAlign=\"center\"\r\n                    hAlign=\"center\">\r\n                    <Flex className=\"event-image-placeholder\" vAlign=\"center\" hAlign=\"center\" gap=\"gap.small\" fill>\r\n                        <ImageUnavailableIcon className=\"placeholder-icon\" />\r\n                        <Text\r\n                            content={localize(\"eventCardImageNotFoundPlaceholder\")}\r\n                            align=\"center\" size=\"medium\"\r\n                            weight=\"semibold\"\r\n                            color=\"white\"\r\n                        />\r\n                    </Flex>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <img\r\n                className={`${props.className} ${isImageLoaded && !isErrorLoadingImage ? 'event-image-renderer image-loaded' : 'event-image-renderer image-not-loaded'}`}\r\n                src={props.imageSrc}\r\n                onLoad={onImageLoaded}\r\n                onError={onImageNotLoaded}\r\n                onAbort={onImageNotLoaded} />\r\n            {renderImagePlaceholder()}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default withTranslation()(EventImage);","// <copyright file=\"event-details.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text, Divider, Avatar, Layout, Provider, Button, Loader } from \"@fluentui/react-northstar\";\r\nimport { Icon } from '@fluentui/react/lib/Icon';\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { EventAudience } from \"../../models/event-audience\";\r\nimport { EventType } from \"../../models/event-type\";\r\nimport { EventOperationType } from \"../../models/event-operation-type\";\r\nimport { formatEventDayAndTimeToShort } from \"../../helpers/event-helper\";\r\nimport AudienceArtifact from \"../../components/common/event-artifacts/audience\";\r\nimport TeamsMeetingArtifact from \"../../components/common/event-artifacts/teams-meeting\";\r\nimport LiveEventArtifact from \"../../components/common/event-artifacts/live-event\";\r\nimport MandatoryArtifact from \"../../components/common/event-artifacts/mandatory\";\r\nimport EventImage from \"../../components/common/event-image/event-image\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\nimport { Fabric } from \"@fluentui/react\";\r\n\r\nimport \"./event-details.css\";\r\n\r\ninterface IEventDetailsProps extends WithTranslation {\r\n    dir: LanguageDirection\r\n    eventDetails: IEvent | undefined,\r\n    eventCreatedByName: string\r\n    eventOperationType: EventOperationType,\r\n    isLoadingEventDetails: boolean,\r\n    isFailedToGetEventDetails: boolean,\r\n    isOperationInProgress: boolean,\r\n    isOperationFailed: boolean,\r\n    isMobileView: boolean,\r\n    onPerformOperation: () => void\r\n}\r\n\r\n/** Renders the event details in task module */\r\nconst EventDetails: React.FunctionComponent<IEventDetailsProps> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    /** Renders artifacts */\r\n    const getArtifacts = () => {\r\n        let artifactElements: Array<JSX.Element> = [];\r\n\r\n        if (props.eventDetails?.isMandatoryForLoggedInUser) {\r\n            artifactElements.push(<MandatoryArtifact />);\r\n        }\r\n\r\n        switch (props.eventDetails?.type) {\r\n            case EventType.Teams:\r\n                artifactElements.push(<TeamsMeetingArtifact />);\r\n                break;\r\n\r\n            case EventType.LiveEvent:\r\n                artifactElements.push(<LiveEventArtifact />);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        switch (props.eventDetails?.audience) {\r\n            case EventAudience.Private:\r\n                artifactElements.push(<AudienceArtifact audienceType={EventAudience.Private} />);\r\n                break;\r\n\r\n            case EventAudience.Public:\r\n                artifactElements.push(<AudienceArtifact audienceType={EventAudience.Public} />);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <Flex gap=\"gap.small\" vAlign=\"center\">\r\n                {artifactElements}\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    /** Renders the event creator information */\r\n    const renderEventCreatorInfo = () => {\r\n        let name = props.eventCreatedByName && props.eventCreatedByName.length ? props.eventCreatedByName : localize(\"unknownUserName\");\r\n        return (\r\n            <Flex vAlign=\"center\" hAlign=\"start\" gap=\"gap.smaller\" design={{ marginTop: \"2.67rem\" }}>\r\n                <Avatar\r\n                    size=\"small\"\r\n                    name={name}\r\n                    className={props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}\r\n                />\r\n                <Layout\r\n                    start={<Text content={localize(\"createdBy\")} size=\"small\" />}\r\n                    main={<Text content={name} size=\"small\" weight=\"semibold\" />}\r\n                    gap=\".4rem\"\r\n                />\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Renders event venue if event type is In-Person\r\n     * @param eventType The event type\r\n     * @param venue The event venue\r\n     */\r\n    const renderEventVenue = (eventType: number, venue: string) => {\r\n        if (eventType === EventType.InPerson) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Divider vertical styles={{ height: \"1.13rem\", marginRight: \".8rem\" }} />\r\n                    <Text className=\"event-venue\" content={venue} weight=\"semibold\" size=\"small\" />\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Sets the event operation type that the task module is going to do */\r\n    const renderOperationButtonText = () => {\r\n        switch (props.eventOperationType) {\r\n            case EventOperationType.CloseRegistration:\r\n                return localize(\"closeRegistration\");\r\n\r\n            case EventOperationType.CancelEvent:\r\n                return localize(\"cancelEvent\");\r\n\r\n            case EventOperationType.Register:\r\n                return localize(\"register\");\r\n\r\n            case EventOperationType.Remove:\r\n                return localize(\"remove\");\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /** Renders the footer which has the submit action to close, cancel, register or cancel an event */\r\n    const renderFooter = () => {\r\n        if (props.eventOperationType === EventOperationType.None) {\r\n            return;\r\n        }\r\n\r\n        return (\r\n            <Flex className=\"footer\" vAlign=\"center\">\r\n                {props.isOperationFailed ? <Text error content={localize(\"dataResponseFailedStatus\")} weight=\"semibold\" /> : null}\r\n                <Flex.Item grow={props.dir === LanguageDirection.Rtl} push={props.dir === LanguageDirection.Ltr}>\r\n                    <div >\r\n                        <Button\r\n                            primary\r\n                            loading={props.isOperationInProgress}\r\n                            disabled={props.isOperationInProgress}\r\n                            content={renderOperationButtonText()}\r\n                            onClick={props.onPerformOperation}\r\n                        />\r\n                    </div>\r\n                </Flex.Item>\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    /** Renders task module header */\r\n    const renderHeader = () => {\r\n        if (props.isMobileView) {\r\n            return (\r\n                <Flex column vAlign=\"center\" gap=\"gap.smaller\">\r\n                    <Text className=\"category label-color\" truncated content={props.eventDetails?.categoryName} title={props.eventDetails?.categoryName} weight=\"bold\" />\r\n                    <Flex vAlign=\"center\">\r\n                        {getArtifacts()}\r\n                    </Flex>\r\n                </Flex>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <Flex space=\"between\" vAlign=\"center\">\r\n                    <Text className=\"category label-color\" truncated content={props.eventDetails?.categoryName} title={props.eventDetails?.categoryName} weight=\"bold\" />\r\n                    <Flex.Item push={props.dir === LanguageDirection.Ltr}>\r\n                        {getArtifacts()}\r\n                    </Flex.Item>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders the attendee URL for live event */\r\n    const renderAttendeeURL = () => {\r\n        if (props.eventDetails?.type === EventType.LiveEvent) {\r\n            return (\r\n                <Flex design={{ marginTop: \"2.67rem\" }} vAlign=\"center\" hAlign=\"start\" column>\r\n                    <Text content={localize(\"liveEventUrlStep1\")} weight=\"semibold\" />\r\n                    <a href={props.eventDetails?.meetingLink} target=\"_blank\" rel=\"noopener noreferrer\">{props.eventDetails?.meetingLink}</a>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders component */\r\n    const renderEventDetails = () => {\r\n        if (props.isLoadingEventDetails) {\r\n            return (\r\n                <Provider>\r\n                    <Flex>\r\n                        <div className=\"task-module-container\">\r\n                            <Loader className=\"task-module-loader\" />\r\n                        </div>\r\n                    </Flex>\r\n                </Provider>\r\n            );\r\n        }\r\n\r\n        if (props.isFailedToGetEventDetails || !props.eventDetails) {\r\n            return (\r\n                <Provider>\r\n                    <Flex>\r\n                        <div className=\"task-module-container event-task-module\">\r\n                            <Text error content={localize(\"dataResponseFailedStatus\")} weight=\"semibold\" />\r\n                        </div>\r\n                    </Flex>\r\n                </Provider>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Fabric dir={props.dir}>\r\n                <Provider>\r\n                    <Flex>\r\n                        <div className={`${props.isMobileView ? \"mobile-task-module-container\" : \"task-module-container\"} event-task-module`}>\r\n                            <div className=\"event-info\">\r\n                                { renderHeader() }\r\n                                {props.eventDetails.photo && <EventImage className=\"event-image\" imageSrc={props.eventDetails.photo} />}\r\n                                {props.eventDetails.selectedColor && <div className=\"event-image\" style={{ backgroundColor: props.eventDetails.selectedColor }}>\r\n                                    <Flex className=\"event-image\" hAlign=\"center\" vAlign=\"center\">\r\n                                        <Text className=\"event-color-text\" size=\"large\" weight=\"semibold\" content={props.eventDetails.name} title={props.eventDetails.name} />\r\n                                    </Flex>\r\n                                </div>}\r\n                                <div style={{ marginTop: \"1.33rem\" }}>\r\n                                    <Text align={props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} className={props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-smaller\" : \"\"} content={props.eventDetails?.name} weight=\"bold\" size=\"medium\" />\r\n                                </div>\r\n                                <Flex vAlign=\"center\" hAlign=\"start\">\r\n                                    <Layout\r\n                                        className=\"event-date-and-time\"\r\n                                        start={<Icon iconName=\"Clock\" />}\r\n                                        main={<Text content={formatEventDayAndTimeToShort(props.eventDetails?.startDate, props.eventDetails?.startTime!, props.eventDetails.endTime!)} weight=\"semibold\" size=\"small\" />}\r\n                                        gap=\".4rem\"\r\n                                    />\r\n                                    {renderEventVenue(props.eventDetails?.type, props.eventDetails?.venue)}\r\n                                </Flex>\r\n                                <Flex vAlign=\"center\" hAlign=\"start\" design={{ marginTop: \"2.67rem\" }}>\r\n                                    <Text className={props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-small\" : \"\"} content={props.eventDetails?.description} />\r\n                                </Flex>\r\n                                { renderAttendeeURL() }\r\n                                <Flex gap={props.dir === LanguageDirection.Rtl ? undefined : \"gap.large\"} className={props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-small\" : \"\"} design={{ marginTop: \"2.67rem\" }}>\r\n                                    <Flex column className={props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-large\" : \"\"}>\r\n                                        <Text content={localize(\"totalNoOfParticipants\")} weight=\"semibold\" />\r\n                                        <Text align={props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={props.eventDetails?.maximumNumberOfParticipants} />\r\n                                    </Flex>\r\n                                    <Flex column>\r\n                                        <Text content={localize(\"registeredParticipants\")} weight=\"semibold\" />\r\n                                        <Text align={props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={props.eventDetails?.registeredAttendeesCount} />\r\n                                    </Flex>\r\n                                </Flex>\r\n                                {renderEventCreatorInfo()}\r\n                            </div>\r\n                            {renderFooter()}\r\n                        </div>\r\n                    </Flex>\r\n                </Provider>\r\n            </Fabric>\r\n        );\r\n    }\r\n\r\n    return renderEventDetails();\r\n}\r\n\r\nexport default withTranslation()(EventDetails);","// <copyright file=\"register-remove-event.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport moment from \"moment\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\nimport { EventOperationType } from \"../../models/event-operation-type\";\r\nimport { EventStatus } from \"../../models/event-status\";\r\nimport { getEventAsync } from \"../../api/common-api\";\r\nimport { getUserProfiles } from \"../../api/user-group-api\"\r\nimport { registerToEventAsync, removeEventAsync } from \"../../api/user-events-api\";\r\nimport EventDetails from \"../event-operation-task-module/event-details\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\n\r\ninterface IRegisterRemoveEventProps extends IWithContext, WithTranslation {\r\n}\r\n\r\ninterface IRegisterRemoveEventState {\r\n    isLoading: boolean,\r\n    isOperationInProgress: boolean,\r\n    eventDetails: IEvent | undefined,\r\n    eventCreatedBy: string,\r\n    isErrorGettingEventDetails: boolean,\r\n    isFailedToRegisterOrRemove: boolean,\r\n    eventOperationType: EventOperationType\r\n}\r\n\r\nclass RegisterRemoveEvent extends React.Component<IRegisterRemoveEventProps, IRegisterRemoveEventState> {\r\n    readonly localize: TFunction;\r\n    isMobileView: boolean;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.localize = this.props.t;\r\n        this.isMobileView = false;\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            isOperationInProgress: false,\r\n            eventDetails: undefined,\r\n            eventCreatedBy: \"\",\r\n            isErrorGettingEventDetails: false,\r\n            isFailedToRegisterOrRemove: false,\r\n            eventOperationType: EventOperationType.None\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        this.getEventDetailsAsync();\r\n    }\r\n\r\n    /** Gets event details */\r\n    getEventDetailsAsync = async () => {\r\n        let queryParam = new URLSearchParams(window.location.search);\r\n        let eventId = queryParam.get(\"eventId\") ?? \"0\";\r\n        let teamId = queryParam.get(\"teamId\") ?? \"0\";\r\n        this.isMobileView = queryParam.get(\"isMobileView\") === \"true\" ? true : false;\r\n\r\n        let response = await getEventAsync(eventId!, teamId!);\r\n\r\n        if (response.status === ResponseStatus.OK && response.data) {\r\n            let eventDetails: IEvent = response.data;\r\n            let eventOperationType: EventOperationType = EventOperationType.None;\r\n\r\n            if (eventDetails.status === EventStatus.Active && new Date() < moment.utc(eventDetails.endDate).local().toDate()) {\r\n                if (eventDetails.isLoggedInUserRegistered) {\r\n                    eventOperationType = EventOperationType.Remove;\r\n                }\r\n                else if (!eventDetails.isRegistrationClosed && eventDetails.registeredAttendeesCount < eventDetails.maximumNumberOfParticipants && eventDetails.canLoggedInUserRegister) {\r\n                    eventOperationType = EventOperationType.Register;\r\n                }\r\n            }\r\n\r\n            this.setState({isLoading: false, eventDetails, eventOperationType }, () => {\r\n                if (this.state.eventDetails) {\r\n                    this.getUserProfileAsync(this.state.eventDetails.createdBy);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.setState({ isLoading: false, isErrorGettingEventDetails: true });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get event creator information\r\n     * @param userId The user ID of which information to get\r\n     */\r\n    getUserProfileAsync = async (userId: string) => {\r\n        let user: Array<string> = [userId];\r\n        let response = await getUserProfiles(user);\r\n\r\n        if (response.status === ResponseStatus.OK && response.data) {\r\n            let userInfo = response.data[0];\r\n            this.setState({ eventCreatedBy: userInfo.displayName });\r\n        }\r\n    }\r\n\r\n    /** Called when click on 'Register' or 'Remove' event */\r\n    onRegisterRemoveEvent = async () => {\r\n        this.setState({ isFailedToRegisterOrRemove: false, isOperationInProgress: true });\r\n\r\n        let response;\r\n        let teamId = this.state.eventDetails ? this.state.eventDetails.teamId : \"0\";\r\n        let eventId = this.state.eventDetails ? this.state.eventDetails.eventId : \"0\";\r\n\r\n        switch (this.state.eventOperationType) {\r\n            case EventOperationType.Register:\r\n                response = await registerToEventAsync(teamId, eventId);\r\n                break;\r\n\r\n            case EventOperationType.Remove:\r\n                response = await removeEventAsync(teamId, eventId);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data === true) {\r\n            microsoftTeams.tasks.submitTask({ isSuccess: true, type: this.state.eventOperationType });\r\n        }\r\n        else {\r\n            this.setState({ isFailedToRegisterOrRemove: true, isOperationInProgress: false });\r\n        }\r\n    }\r\n\r\n    /** Renders component */\r\n    render() {\r\n        return (\r\n            <EventDetails\r\n                dir={this.props.dir}\r\n                eventDetails={this.state.eventDetails}\r\n                eventCreatedByName={this.state.eventCreatedBy}\r\n                eventOperationType={this.state.eventOperationType}\r\n                isLoadingEventDetails={this.state.isLoading}\r\n                isFailedToGetEventDetails={this.state.isErrorGettingEventDetails}\r\n                isOperationInProgress={this.state.isOperationInProgress}\r\n                isOperationFailed={this.state.isFailedToRegisterOrRemove}\r\n                isMobileView={this.isMobileView}\r\n                onPerformOperation={this.onRegisterRemoveEvent}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(RegisterRemoveEvent));","// <copyright file=\"event-image.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text, ImageUnavailableIcon } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\n\r\nimport \"./event-image.css\";\r\n\r\ninterface IEventImage extends WithTranslation {\r\n    className: string | undefined,\r\n    imageSrc: string\r\n}\r\n\r\n/**\r\n * Renders event image. If image not loaded successfully, then renders placeholder\r\n * @param props The props of type IEventImage\r\n */\r\nconst EventImage: React.FunctionComponent<IEventImage> = props => {\r\n    let localize: TFunction = props.t;\r\n\r\n    let [isImageLoaded, setImageLoaded] = React.useState(false);\r\n    let [isErrorLoadingImage, setImageError] = React.useState(false);\r\n\r\n    /** The event handler called when image loaded successfully */\r\n    const onImageLoaded = () => {\r\n        setImageLoaded(true);\r\n    }\r\n\r\n    /** The event handler called when image was not loaded or user aborted loading image */\r\n    const onImageNotLoaded = () => {\r\n        setImageError(true);\r\n    }\r\n\r\n    const renderImagePlaceholder = () => {\r\n        if (!isImageLoaded && !isErrorLoadingImage) {\r\n            return (\r\n                <Flex\r\n                    className={`${props.className} event-image-placeholder-container`}\r\n                    vAlign=\"center\"\r\n                    hAlign=\"center\">\r\n                    <Flex className=\"event-image-placeholder\" vAlign=\"center\" hAlign=\"center\" gap=\"gap.small\" fill>\r\n                        <Text\r\n                            content={localize(\"eventCardImageLoadingPlaceholder\")}\r\n                            align=\"center\" size=\"medium\"\r\n                            weight=\"semibold\"\r\n                            color=\"white\"\r\n                        />\r\n                    </Flex>\r\n                </Flex>\r\n            );\r\n        }\r\n        else if (isErrorLoadingImage) {\r\n            return (\r\n                <Flex\r\n                    className={`${props.className} event-image-placeholder-container`}\r\n                    vAlign=\"center\"\r\n                    hAlign=\"center\">\r\n                    <Flex className=\"event-image-placeholder\" vAlign=\"center\" hAlign=\"center\" gap=\"gap.small\" fill>\r\n                        <ImageUnavailableIcon className=\"placeholder-icon\" />\r\n                        <Text\r\n                            content={localize(\"eventCardImageNotFoundPlaceholder\")}\r\n                            align=\"center\" size=\"medium\"\r\n                            weight=\"semibold\"\r\n                            color=\"white\"\r\n                        />\r\n                    </Flex>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <img\r\n                className={`${props.className} ${isImageLoaded && !isErrorLoadingImage ? 'event-image-renderer image-loaded' : 'event-image-renderer image-not-loaded'}`}\r\n                src={props.imageSrc}\r\n                onLoad={onImageLoaded}\r\n                onError={onImageNotLoaded}\r\n                onAbort={onImageNotLoaded} />\r\n            {renderImagePlaceholder()}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default withTranslation()(EventImage);","// <copyright file=\"event-card.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text, Divider } from \"@fluentui/react-northstar\";\r\nimport moment from \"moment\";\r\nimport { Icon } from 'office-ui-fabric-react';\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport MandatoryArtifact from \"../common/event-artifacts/mandatory\";\r\nimport TeamsMeetingArtifact from \"../common/event-artifacts/teams-meeting\";\r\nimport AudienceArtifact from \"../common/event-artifacts/audience\";\r\nimport LiveEventArtifact from \"../common/event-artifacts/live-event\";\r\nimport { EventAudience } from \"../../models/event-audience\";\r\nimport { formatEventDayAndTimeToShort } from \"../../helpers/event-helper\";\r\nimport EventImage from \"../event-image/event-image\";\r\nimport { EventType } from \"../../models/event-type\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\n\r\nimport \"../event-card/event-card.css\";\r\n\r\ninterface IEventCardProps extends WithTranslation, IWithContext {\r\n    eventDetails: IEvent,\r\n    onClick: () => void\r\n}\r\n\r\n/**\r\n * Renders the event card for user\r\n * @param props The props with type IEventCard\r\n */\r\nconst EventCard: React.FunctionComponent<IEventCardProps> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    const renderFooter = () => {\r\n        let footerElements: Array<JSX.Element> = [];\r\n\r\n        if (props.eventDetails.isMandatoryForLoggedInUser) {\r\n            footerElements.push(<MandatoryArtifact />);\r\n        }\r\n\r\n        switch (props.eventDetails.type) {\r\n            case EventType.Teams:\r\n                footerElements.push(<TeamsMeetingArtifact />);\r\n                break;\r\n\r\n            case EventType.LiveEvent:\r\n                footerElements.push(<LiveEventArtifact />);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        switch (props.eventDetails.audience) {\r\n            case EventAudience.Private:\r\n                footerElements.push(<AudienceArtifact audienceType={EventAudience.Private} />);\r\n                break;\r\n\r\n            case EventAudience.Public:\r\n                footerElements.push(<AudienceArtifact audienceType={EventAudience.Public} />);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <Flex className=\"footer\" gap=\"gap.small\" vAlign=\"center\">\r\n                {footerElements}\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    /** Gets the available slots for the event */\r\n    const getAvailableSlots = () => {\r\n        if (props.eventDetails.registeredAttendeesCount < props.eventDetails.maximumNumberOfParticipants) {\r\n            return props.eventDetails.maximumNumberOfParticipants - props.eventDetails.registeredAttendeesCount;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /** Renders event venue if event type is In-Person */\r\n    const renderEventVenue = () => {\r\n        if (props.eventDetails.type === EventType.InPerson) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Divider className=\"event-date-venue-separator\" vertical />\r\n                    <Text truncated className=\"event-venue\" content={props.eventDetails.venue} title={props.eventDetails.venue} weight=\"semibold\" size=\"small\" />\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Flex column className=\"event-card\" onClick={props.onClick}>\r\n            {props.eventDetails.photo && <EventImage className=\"event-photo\" imageSrc={props.eventDetails.photo} />}\r\n            {\r\n                props.eventDetails.selectedColor &&\r\n                <div className=\"event-photo\" style={{ backgroundColor: props.eventDetails.selectedColor }}>\r\n                    <Flex className=\"event-photo\" hAlign=\"center\" vAlign=\"center\">\r\n                        <Text className=\"event-color-text\" size=\"medium\" weight=\"semibold\" title={props.eventDetails.name} content={props.eventDetails.name} />\r\n                    </Flex>\r\n                </div>\r\n            }\r\n            <Flex className=\"event-info\" column fill>\r\n                <Flex vAlign=\"center\" gap=\"gap.medium\">\r\n                    <Flex className=\"event-day\" column vAlign=\"center\" hAlign=\"center\" fill>\r\n                        <Text content={moment.utc(props.eventDetails.startDate).local().format(\"DD\")} size=\"large\" weight=\"bold\" />\r\n                        <Text content={moment.utc(props.eventDetails.startDate).local().format(\"MMM\")} size=\"medium\" weight=\"semibold\" />\r\n                    </Flex>\r\n                    <Flex className=\"event-details\" column vAlign=\"center\" fill>\r\n                        <Text align={props.dir === \"rtl\" ? \"end\" : undefined} className={props.dir === \"rtl\" ? \"event-category rtl-right-margin-small\" : \"event-category\"} truncated content={props.eventDetails.categoryName} weight=\"bold\" size=\"smaller\" />\r\n                        <Text align={props.dir === \"rtl\" ? \"end\" : undefined} className={props.dir === \"rtl\" ? \"rtl-right-margin-small\" : \"\"} truncated content={props.eventDetails.name} title={props.eventDetails.name} weight=\"bold\" size=\"medium\" />\r\n                        <Flex className={props.dir === \"rtl\" ? \"event-date-and-venue-rtl event-date-and-venue\" : \"event-date-and-venue\"} vAlign=\"center\">\r\n                            <Icon iconName=\"Clock\" />\r\n                            <Flex.Item shrink={false}>\r\n                                <Text weight=\"semibold\" size=\"small\" content={formatEventDayAndTimeToShort(props.eventDetails.startDate, props.eventDetails.startTime!, props.eventDetails.endTime!)} />\r\n                            </Flex.Item>\r\n                            {renderEventVenue()}\r\n                        </Flex>\r\n                    </Flex>\r\n                </Flex>\r\n                <Flex className=\"event-participants\" gap=\"gap.small\">\r\n                    <Text size=\"small\" content={`${localize(\"participantsRegistered\")} : ${props.eventDetails.registeredAttendeesCount}`} />\r\n                    <Divider vertical />\r\n                    <Text size=\"small\" content={`${localize(\"availableSlots\")} : ${getAvailableSlots()}`} />\r\n                </Flex>\r\n                {renderFooter()}\r\n            </Flex>\r\n        </Flex>\r\n    );\r\n}\r\n\r\nexport default withTranslation()(withContext(EventCard));","// <copyright file=\"user-events-wrapper.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { Loader } from \"@fluentui/react-northstar\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport EventCard from \"../../components/event-card/event-card\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"../../components/user-events-wrapper/user-events-wrapper.css\"\r\n\r\ninterface IUserEventsProps {\r\n    key: string,\r\n    events: Array<IEvent>,\r\n    hasMoreEvents: boolean,\r\n    loadMoreEvents: (pageNumber: number) => void,\r\n    onClick: (eventDetails: IEvent) => void\r\n}\r\n\r\n/**\r\n * Renders the events for the user\r\n * @param props The props of type IUserEvents\r\n */\r\nconst UserEvents: React.FunctionComponent<IUserEventsProps> = props => {\r\n    /** Renders events details for every event */\r\n    const renderEvents = () => {\r\n        if (!props.events || props.events.length === 0) {\r\n            return \"No events available\";\r\n        }\r\n\r\n        let events = props.events.map((event: IEvent, index: number) => {\r\n            return <Col className=\"grid-column d-flex justify-content-center\" xl={4} lg={4} sm={6} md={4}><EventCard key={`event-${index}`} eventDetails={event} onClick={() => props.onClick(event)} /></Col>\r\n        });\r\n\r\n        return <Row data-testid=\"event_count\">{events}</Row>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"user-events\">\r\n            <div className=\"container-subdiv-cardview\">\r\n                <Container key={props.key} className=\"pagination-scroll-area\" fluid>\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        initialLoad={false}\r\n                        loader={<Loader />}\r\n                        useWindow={false}\r\n                        loadMore={props.loadMoreEvents}\r\n                        hasMore={props.hasMoreEvents}\r\n                    >\r\n                        {renderEvents()}\r\n                    </InfiniteScroll>\r\n                </Container>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserEvents;","// <copyright file=\"no-content-page.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from 'react';\r\nimport { Text } from \"@fluentui/react-northstar\";\r\nimport { EyeIcon } from \"@fluentui/react-icons-northstar\";\r\n\r\ninterface INoContentPage {\r\n    message: string\r\n}\r\n\r\nconst NoContent: React.FunctionComponent<INoContentPage> = props => {\r\n    return (\r\n        <div className=\"no-content-container\">\r\n            <div className=\"app-logo\">\r\n                <EyeIcon size=\"largest\" />\r\n            </div>\r\n            <div className=\"no-content-title\">\r\n                <Text content={props.message} weight=\"semibold\" />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NoContent;","// <copyright file=\"popup-menu-checkboxes-content.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Input, Button, Provider, Divider, Checkbox } from \"@fluentui/react-northstar\";\r\nimport { CloseIcon, SearchIcon } from \"@fluentui/react-icons-northstar\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ICheckBoxItem } from \"../../../models/ICheckBoxItem\";\r\nimport { LanguageDirection } from \"../../../models/language-direction\";\r\nimport { Fabric } from \"@fluentui/react\";\r\n\r\nimport \"./popup-menu.css\";\r\n\r\ninterface IPopupMenuCheckboxesContentProps {\r\n    showSearchBar: boolean,\r\n    content: any,\r\n    disableClear: boolean,\r\n    selectedCount: number,\r\n    onCheckboxStateChange: (checkboxState: Array<ICheckBoxItem>) => void,\r\n    dir: LanguageDirection\r\n}\r\n\r\nconst MaxItemsToShowInFilter: number = 50;\r\n\r\nconst PopupMenuCheckboxesContent: React.FunctionComponent<IPopupMenuCheckboxesContentProps> = props => {\r\n    const localize = useTranslation().t;\r\n    const [data, setCheckbox] = React.useState({ checkboxes: props.content.checkboxes });\r\n    const [filteredCheckboxes, setFilteredCheckboxes] = React.useState(props.content.checkboxes);\r\n    const [searchedString, setSearchString] = React.useState(\"\");\r\n    let [disableClear, setdisableClear] = React.useState(true);\r\n    let [checkBoxClicked, setcheckBoxClicked] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        setFilterCheckboxes(props.content.checkboxes);\r\n    }, []);\r\n\r\n    /**\r\n    *Updates particular checkbox's isChecked state and passes changed state back to parent component.\r\n    *@param key Unique key for checkbox which needs to be updated\r\n    *@param checked Boolean indicating checkbox current value\r\n    */\r\n    const onCheckboxValueChange = (key: string, checked: boolean) => {\r\n        let checkCount = 0;\r\n        setcheckBoxClicked(true);\r\n        let checkboxList = data.checkboxes.map((checkbox: ICheckBoxItem) => {\r\n            if (checkbox.key === key) {\r\n                checkbox.isChecked = checked;\r\n            }\r\n            return checkbox;\r\n        });\r\n\r\n        checkboxList.map((checkbox: ICheckBoxItem) => {\r\n            if (checkbox.isChecked) {\r\n                checkCount = checkCount + 1;\r\n            }\r\n        })\r\n\r\n        if (checkCount > 0) {\r\n            setdisableClear(false);\r\n        }\r\n        else {\r\n            setdisableClear(true);\r\n        }\r\n\r\n        if (searchedString.trim().length) {\r\n            let filteredItems = checkboxList.filter((item: ICheckBoxItem) => {\r\n                return item.title.toLowerCase().includes(searchedString.toLowerCase());\r\n            })\r\n\r\n            setFilterCheckboxes(filteredItems);\r\n        }\r\n        else {\r\n            setFilterCheckboxes(checkboxList);\r\n        }\r\n\r\n        props.onCheckboxStateChange(checkboxList);\r\n    }\r\n\r\n    /**\r\n    *Sets all checkbox's isChecked to false to unselect all and passes changed state back to parent component.\r\n    */\r\n    const deSelectAll = () => {\r\n        let checkboxList = data.checkboxes.map((checkbox: ICheckBoxItem) => {\r\n                checkbox.isChecked = false\r\n                return checkbox;\r\n        });\r\n\r\n        let filteredItems = checkboxList;\r\n\r\n        if (searchedString.trim().length) {\r\n            filteredItems = checkboxList.filter((item: ICheckBoxItem) => {\r\n                return item.title.toLowerCase().includes(searchedString.toLowerCase());\r\n            });\r\n        }\r\n\r\n        setFilterCheckboxes(filteredItems);\r\n        props.onCheckboxStateChange(checkboxList);\r\n        setdisableClear(true);\r\n        setcheckBoxClicked(true);\r\n    }\r\n\r\n    const onSearchChange = (text: string) => {\r\n        setSearchString(text);\r\n        if (text.trim().length > 0) {\r\n            let filteredItems = data.checkboxes.filter((item: ICheckBoxItem) => {\r\n                return item.title.toLowerCase().includes(text.toLowerCase());\r\n            });\r\n\r\n            setFilterCheckboxes(filteredItems);\r\n        }\r\n        else {\r\n            setFilterCheckboxes(data.checkboxes);\r\n        }\r\n    }\r\n\r\n    const getSelectedCountString = () => {\r\n        return props.selectedCount.toString();\r\n    }\r\n\r\n    const setFilterCheckboxes = (filterItems: any) => {\r\n        if (filterItems && filterItems.length > 0) {\r\n            let items = [...filterItems];\r\n            let itemsToRender = items.slice(0, MaxItemsToShowInFilter);\r\n            setFilteredCheckboxes(itemsToRender);\r\n        }\r\n        else {\r\n            setFilteredCheckboxes([]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fabric dir={props.dir}>\r\n            <Provider>\r\n                <div className=\"content-items-wrapper\">\r\n                    {props.showSearchBar && <div className=\"content-items-headerfooter\">\r\n                        <Input icon={<SearchIcon />} iconPosition={props.dir === \"rtl\" ? \"start\" : \"end\" } placeholder={localize(\"searchPlaceholder\")} value={searchedString} fluid onChange={(event: any) => onSearchChange(event.target.value)} />\r\n                    </div>}\r\n                    <Divider className=\"filter-popup-menu-divider\" />\r\n                    <div className=\"content-items-headerfooter\">\r\n                        <Flex gap=\"gap.small\" vAlign=\"center\" hAlign=\"end\">\r\n                            <Flex.Item push>\r\n                                <div></div>\r\n                            </Flex.Item>\r\n                            <Button disabled={checkBoxClicked ? disableClear : props.disableClear} className={props.selectedCount === 0 ? \"clear-button \": \"clear-button enable-clear\"} size=\"small\" text onClick={() => deSelectAll()} content={props.selectedCount > 0 ? localize(\"clear\") + \"(\" + getSelectedCountString() + \")\" : localize(\"clear\") } />\r\n                        </Flex>\r\n                    </div>\r\n                    <div className=\"content-items-body\">\r\n                        {\r\n                            filteredCheckboxes.map((checkbox: ICheckBoxItem) => {\r\n                                if (checkbox.title.trim().length) {\r\n                                    return (\r\n                                        <Flex gap=\"gap.small\">\r\n                                            <Checkbox data-testid={checkbox.key + \"_categoryCheckbox_item\"} className=\"checkbox-wrapper\" label={checkbox.checkboxLabel} key={checkbox.key} checked={checkbox.isChecked} onChange={(key, data: any) => onCheckboxValueChange(checkbox.key, data.checked)} />\r\n                                        </Flex>\r\n                                    );\r\n                                }\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </Provider>\r\n        </Fabric>\r\n    );\r\n}\r\n\r\nexport default React.memo(PopupMenuCheckboxesContent);","// <copyright file=\"popup-menu-radiogroup-content.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, RadioGroup } from \"@fluentui/react-northstar\";\r\nimport { Fabric } from \"@fluentui/react\";\r\nimport { LanguageDirection } from \"../../../models/language-direction\";\r\n\r\nimport \"./popup-menu.css\";\r\n\r\ninterface IPopupMenuRadiogroupContentProps {\r\n    content: any,\r\n    selectedValue: number,\r\n    onRadiogroupStateChange: (selectedValue: number) => void,\r\n    dir: LanguageDirection\r\n}\r\n\r\nconst PopupMenuRadiogroupContent: React.FunctionComponent<IPopupMenuRadiogroupContentProps> = props => {\r\n\r\n    return (\r\n        <Fabric dir={props.dir}>\r\n            <div className=\"content-items-wrapper radio-popup-content\">\r\n                <div className=\"content-items-body\">\r\n                    {   \r\n                        <Flex gap=\"gap.small\">\r\n\t\t\t\t            <RadioGroup\r\n\t\t\t\t\t            defaultCheckedValue={props.selectedValue}\r\n\t\t\t\t\t            vertical\r\n\t\t\t\t\t            items={props.content.radioGroupItems}\r\n                                onCheckedValueChange={(event, data: any) => props.onRadiogroupStateChange(data.value)}\r\n                                data-testid={\"radioGroup_items\"}\r\n\t\t\t\t            />\r\n\t\t\t            </Flex>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </Fabric>\r\n    );\r\n}\r\n\r\nexport default React.memo(PopupMenuRadiogroupContent);","// <copyright file=\"popup-menu-wrapper.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Popup, Button, Text } from \"@fluentui/react-northstar\";\r\nimport { ChevronDownIcon } from \"@fluentui/react-icons-northstar\";\r\nimport PopupMenuCheckboxesContent from \"./popup-menu-checkboxes-content\";\r\nimport PopupMenuRadiogroupContent from \"./popup-menu-radiogroup-content\";\r\nimport { ICheckBoxItem } from \"../../../models/ICheckBoxItem\";\r\nimport { LanguageDirection } from \"../../../models/language-direction\";\r\n\r\nimport \"./popup-menu.css\";\r\n\r\ninterface IPopupMenuWrapperProps {\r\n    checkboxes?: Array<any>,\r\n    radioGroup?: Array<any>,\r\n    title: string,\r\n    selectedSortBy?: number,\r\n    showSearchBar?: boolean,\r\n    selectedCount: number,\r\n    onCheckboxStateChange: (typeState: Array<any>) => void,\r\n    onRadiogroupStateChange: (selectedValue: number) => void,\r\n    onOpenChange: (isOpen: boolean) => void,\r\n    dir: LanguageDirection\r\n}\r\n\r\nconst PopupMenuWrapper: React.FunctionComponent<IPopupMenuWrapperProps> = props => {\r\n    const [popup, onOpenChange] = React.useState({ isOpen: false });\r\n    let [disableClear, setdisableClear] = React.useState(true);\r\n\r\n    const onFilterClick = () => {\r\n        let checkCount = 0;\r\n        let checkBox = props.checkboxes!;\r\n        checkBox.map((checkbox: ICheckBoxItem) => {\r\n            if (checkbox.isChecked) {\r\n                checkCount = checkCount + 1;\r\n            }\r\n        });\r\n        if (checkCount > 0) {\r\n            setdisableClear(false);\r\n        }\r\n        else {\r\n            setdisableClear(true);\r\n        }\r\n    }\r\n\r\n    const onPopupOpenChange = (isOpen: boolean) => {\r\n        onOpenChange({ isOpen: isOpen });\r\n        props.onOpenChange(isOpen);\r\n    }\r\n\r\n    if (props.checkboxes) {\r\n        return (\r\n            <Popup\r\n                className=\"popup-container\"\r\n                open={popup.isOpen}\r\n                align=\"end\"\r\n                position=\"below\"\r\n                onOpenChange={(e, { open }: any) => onPopupOpenChange(open)}\r\n                trigger={<Button data-testid={props.checkboxes.length > 0 ? props.checkboxes[0].title + \"_CheckboxButton\" : \"dummyTitle_CheckboxButton\"} className=\"filter-button\" onClick={() => onFilterClick()} content={< Text content={props.title} className={props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}/>} iconPosition=\"after\" icon = {< ChevronDownIcon />} text />}\r\n                content={<PopupMenuCheckboxesContent dir={props.dir} disableClear={disableClear} selectedCount={props.selectedCount} showSearchBar={props.showSearchBar!} content={{ checkboxes: props.checkboxes, title: props.title }} onCheckboxStateChange={props.onCheckboxStateChange} />}\r\n                trapFocus\r\n            />\r\n        );\r\n    }\r\n    else if (props.radioGroup) {\r\n        return (\r\n            <Popup\r\n                open={popup.isOpen}\r\n                align=\"end\"\r\n                position=\"below\"\r\n                onOpenChange={(e, { open }: any) => onPopupOpenChange(open)}\r\n                trigger={<Button data-testid={props.radioGroup.length > 0 ? props.radioGroup[0].name + \"_RadioGroupButton\" : \"dummyName_RadioGroupButton\"} icon={< ChevronDownIcon />} className=\"filter-button\" iconPosition=\"after\" content={< Text content={props.title} className={props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}/>} text />}\r\n                content={<PopupMenuRadiogroupContent dir={props.dir} selectedValue={props.selectedSortBy!} content={{ radioGroupItems: props.radioGroup, title: props.title }} onRadiogroupStateChange={props.onRadiogroupStateChange} />}\r\n                trapFocus\r\n            />\r\n        );\r\n    }\r\n    else {\r\n        return (<></>);\r\n    }\r\n}\r\n\r\nexport default React.memo(PopupMenuWrapper);","/*\r\n\t<copyright file=\"resources.ts\" company=\"Microsoft\">\r\n\tCopyright (c) Microsoft. All rights reserved.\r\n\t</copyright>\r\n*/\r\n\r\nimport { EventAudience } from \"../models/event-audience\";\r\nimport { EventType } from \"../models/event-type\";\r\nimport { IPostType } from \"../models/IPostType\";\r\nimport { SortBy } from \"../models/sort-by\";\r\n\r\nexport interface IConstantDropdownItem {\r\n\tname: string;\r\n\tid: number;\r\n}\r\n\r\nexport interface ITimeZonesItem {\r\n\tdisplayName: string;\r\n\tid: string;\r\n}\r\n\r\nexport default class Resources {\r\n\tpublic static readonly dark: string = \"dark\";\r\n\tpublic static readonly contrast: string = \"contrast\";\r\n\tpublic static readonly eventNameMaxLength: number = 100;\r\n\tpublic static readonly eventDescriptionMaxLength: number = 1000;\r\n\tpublic static readonly eventVenueMaxLength: number = 200;\r\n\tpublic static readonly userEventsMobileFilteredCategoriesLocalStorageKey: string = \"user-events-filtered-categories\";\r\n\tpublic static readonly userEventsMobileFilteredUsersLocalStorageKey: string = \"user-events-filtered-users\";\r\n\tpublic static readonly userEventsMobileSortByFilterLocalStorageKey: string = \"user-events-sortby\";\r\n\tpublic static readonly validUrlRegExp: RegExp = /^http(s)?:\\/\\/(www\\.)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$/;\r\n\r\n\t/** Color codes used while creating an event */\r\n\tpublic static readonly colorCells = [\r\n\t\t{ id: 'a', label: 'Wild blue yonder', color: '#A4A8CB' },\r\n\t\t{ id: 'b', label: 'Jasmine', color: '#FFDE85' },\r\n\t\t{ id: 'c', label: 'Sky blue', color: '#A0EAF8' },\r\n\t\t{ id: 'd', label: 'Nadeshiko pink', color: '#F1A7B9' },\r\n\t\t{ id: 'e', label: 'Lavender blue', color: '#E3D7FF' },\r\n\t];\r\n\r\n\t/** Color codes used while creating an event */\r\n\tpublic static readonly audienceType: Array<IConstantDropdownItem> = [\r\n\t\t{ name: \"Public\", id: EventAudience.Public },\r\n\t\t{ name: \"Private\", id: EventAudience.Private },\r\n\t];\r\n\r\n\t/** Sort by values for filter */\r\n\tpublic static readonly sortBy: Array<IPostType> = [\r\n\t\t{ name: \"Newest\", id: SortBy.Recent, color: \"\" },\r\n\t\t{ name: \"Popularity\", id: SortBy.Popularity, color: \"\" }\r\n\t];\r\n\r\n\t/** Event type values */\r\n\tpublic static readonly eventType: Array<IConstantDropdownItem> = [\r\n\t\t{ name: \"In person\", id: EventType.InPerson },\r\n\t\t{ name: \"Teams\", id: EventType.Teams },\r\n\t\t{ name: \"Live event\", id: EventType.LiveEvent },\r\n\t];\r\n}","// <copyright file=\"localized-constants.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport { EventAudience } from \"../models/event-audience\";\r\nimport { EventType } from \"../models/event-type\";\r\nimport { IConstantDropdownItem } from \"../constants/resources\";\r\nimport Resources from \"../constants/resources\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IPostType } from \"../models/IPostType\";\r\nimport { SortBy } from \"../models/sort-by\";\r\n\r\n/**\r\n* Get localized audience types.\r\n* @param localize i18n TFunction received from props.\r\n*/\r\nexport const getLocalizedAudienceTypes = (localize: TFunction): Array<IConstantDropdownItem> => {\r\n    return Resources.audienceType.map((value: IConstantDropdownItem) => {\r\n        switch (value.id) {\r\n            case EventAudience.Public:\r\n                value.name = localize(\"publicAudience\");\r\n                return value;\r\n\r\n            case EventAudience.Private:\r\n                value.name = localize(\"privateAudience\");\r\n                return value;\r\n\r\n            default:\r\n                return value;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n* Get localized event types.\r\n* @param localize i18n TFunction received from props.\r\n*/\r\nexport const getLocalizedEventTypes = (localize: TFunction): Array<IConstantDropdownItem> => {\r\n    return Resources.eventType.map((value: IConstantDropdownItem) => {\r\n        switch (value.id) {\r\n            case EventType.InPerson:\r\n                value.name = localize(\"inPersonEvent\");\r\n                return value;\r\n\r\n            case EventType.Teams:\r\n                value.name = localize(\"teamsEvent\");\r\n                return value;\r\n\r\n            case EventType.LiveEvent:\r\n                value.name = localize(\"liveEvent\");\r\n                return value;\r\n\r\n            default:\r\n                return value;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n* Get localized sort by filters.\r\n* @param localize i18n TFunction received from props.\r\n*/\r\nexport const getLocalizedSortBy = (localize: TFunction): Array<IPostType> => {\r\n    return Resources.sortBy.map((value: IPostType) => {\r\n        switch (value.id) {\r\n            case SortBy.Recent:\r\n                value.name = localize(\"sortByNewest\");\r\n                return value;\r\n\r\n            case SortBy.Popularity:\r\n                value.name = localize(\"sortByPopularity\");\r\n                return value;\r\n\r\n            default:\r\n                return value;\r\n        }\r\n    });\r\n}","// <copyright file=\"activity-status.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\n/** Contains the values which shows status for an activity */\r\nexport enum ActivityStatus {\r\n    /** Indicates no activity */\r\n    None,\r\n\r\n    /** Indicates that the activity completed successfully */\r\n    Success,\r\n\r\n    /** Indicates that the activity failed to execute */\r\n    Error\r\n}","// <copyright file=\"filter-bar.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text } from \"@fluentui/react-northstar\";\r\nimport { CloseIcon } from \"@fluentui/react-icons-northstar\";\r\nimport { initializeIcons } from \"@uifabric/icons\";\r\nimport PopupMenuWrapper from \"../../components/common/popup-menu/popup-menu-wrapper\";\r\nimport { ICheckBoxItem } from \"../../models/ICheckBoxItem\";\r\nimport { IRadioGroupItem } from \"../../models/IRadioGroupItem\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { getLocalizedSortBy } from \"../../helpers/localized-constants\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport { ITeamsChannelMember } from \"../../models/ITeamsChannelMember\";\r\nimport { SortBy } from \"../../models/sort-by\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { Fabric } from \"@fluentui/react\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\nimport \"./filter-bar.css\";\r\n\r\ninterface IFilterBarProps extends WithTranslation, IWithContext {\r\n    isVisible: boolean,\r\n    isReset: boolean,\r\n    categoryList: Array<ICategory>,\r\n    createdByList: Array<ITeamsChannelMember>,\r\n    onFilterBarCloseClick: (isFilterStateChanged: boolean) => void,\r\n    onFilterChange: (selectedCategories: Array<string>, selectedUsers: Array<string>, sortBy: number) => void\r\n}\r\n\r\ninterface IFilterBarState {\r\n    categoryList: Array<ICheckBoxItem>;\r\n    createdByList: Array<ICheckBoxItem>;\r\n    sortBy: Array<IRadioGroupItem>;\r\n    selectedSortBy: number;\r\n    screenWidth: number;\r\n    createdBySelectedCount: number;\r\n    categorySelectedCount: number;\r\n}\r\n\r\ninterface IPostType {\r\n    name: string;\r\n    id: number;\r\n    color: string;\r\n}\r\n\r\nclass FilterBar extends React.Component<IFilterBarProps, IFilterBarState> {\r\n    localize: TFunction;\r\n    isFilterStateChanged: boolean;\r\n\r\n    constructor(props: IFilterBarProps) {\r\n        super(props);\r\n\r\n        initializeIcons();\r\n        this.localize = this.props.t;\r\n        this.isFilterStateChanged = false;\r\n\r\n        const sortBy: Array<IRadioGroupItem> = getLocalizedSortBy(this.localize).map((sortBy: IPostType) => { return { key: sortBy.id, label: sortBy.name, value: sortBy.id, name: sortBy.name } });\r\n\r\n        this.state = {\r\n            selectedSortBy: sortBy[0].value,\r\n            categoryList: [],\r\n            createdByList: [],\r\n            sortBy: sortBy,\r\n            screenWidth: 800,\r\n            createdBySelectedCount: 0,\r\n            categorySelectedCount: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.resize.bind(this));\r\n        this.resize();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.resize.bind(this));\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: IFilterBarProps) {\r\n        if (nextProps.isReset) {\r\n            let categoryList = this.state.categoryList ? [...this.state.categoryList] : [];\r\n            let createdByList = this.state.createdByList ? [...this.state.createdByList] : [];\r\n\r\n            this.isFilterStateChanged = false;\r\n\r\n            this.setState({\r\n                categoryList: categoryList.map((value: ICheckBoxItem) => {\r\n                    value.isChecked = false;\r\n                    return value;\r\n                }),\r\n                categorySelectedCount: 0,\r\n                createdByList: createdByList.map((value: ICheckBoxItem) => {\r\n                    value.isChecked = false;\r\n                    return value;\r\n                }),\r\n                createdBySelectedCount: 0,\r\n                selectedSortBy: SortBy.Recent\r\n            });\r\n        }\r\n\r\n        if (nextProps.categoryList && nextProps.categoryList !== this.props.categoryList) {\r\n            this.setState({\r\n                categoryList: nextProps.categoryList.map((value: ICategory) => {\r\n                    return { isChecked: false, key: value.categoryId, title: value.name, checkboxLabel: <Text content={value.name} /> };\r\n                })\r\n            });\r\n        }\r\n\r\n        if (nextProps.createdByList && nextProps.createdByList !== this.props.createdByList) {\r\n            this.setState({\r\n                createdByList: nextProps.createdByList.map((value: ITeamsChannelMember) => {\r\n                    return { isChecked: false, key: value.aadObjectId, title: value.name, checkboxLabel: <Text content={value.name} /> };\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    resize = () => {\r\n        if (window.innerWidth !== this.state.screenWidth) {\r\n            this.setState({ screenWidth: window.innerWidth });\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t*Sets state of 'Category list' filter item when checkbox value changes.\r\n\t*@param categoryValues Array of 'category' checkboxes with updated user selection\r\n    */\r\n    onCategoryStateChange = (categoryValues: Array<ICheckBoxItem>) => {\r\n        let selectedCategories = categoryValues?.filter((value: ICheckBoxItem) => {\r\n            return value.isChecked;\r\n        });\r\n\r\n        this.isFilterStateChanged = true;\r\n        this.setState({ categoryList: categoryValues, categorySelectedCount: selectedCategories ? selectedCategories.length : 0 });\r\n    }\r\n\r\n\t/**\r\n\t*Sets state of 'Created by' filter item when checkbox value changes.\r\n\t*@param createdByValues Array of 'created by' checkboxes with updated user selection\r\n    */\r\n    onCreatedByStateChange = (createdByValues: Array<ICheckBoxItem>) => {\r\n        let selectedUsers = createdByValues?.filter((value: ICheckBoxItem) => {\r\n            return value.isChecked;\r\n        });\r\n\r\n        this.isFilterStateChanged = true;\r\n        this.setState({ createdByList: createdByValues, createdBySelectedCount: selectedUsers ? selectedUsers.length : 0 });\r\n    }\r\n\r\n\t/**\r\n\t*Sets state of selected sort by item.\r\n\t*@param selectedSortBy Selected 'sort by' value\r\n    */\r\n    onSortByStateChange = (selectedSortBy: number) => {\r\n        this.isFilterStateChanged = true;\r\n        this.setState({ selectedSortBy: selectedSortBy });\r\n    }\r\n\r\n\t/**\r\n\t*Removes all filters and hides filter bar.\r\n\t*@param event Event object for input\r\n    */\r\n    onCloseIconClick = (event: any) => {\r\n        this.props.onFilterBarCloseClick(this.state.categorySelectedCount > 0 || this.state.createdBySelectedCount > 0 || this.state.selectedSortBy !== SortBy.Recent );\r\n        this.isFilterStateChanged = false;\r\n    }\r\n\r\n    onFilterChange = (isFilterItemOpen: boolean) => {\r\n        if (!isFilterItemOpen && this.isFilterStateChanged) {\r\n            let categories: Array<ICheckBoxItem> = this.state.categoryList ? [...this.state.categoryList] : [];\r\n            let users: Array<ICheckBoxItem> = this.state.createdByList ? [...this.state.createdByList] : [];\r\n\r\n            let selectedCategories = categories.filter((category: ICheckBoxItem) => {\r\n                return category.isChecked;\r\n            });\r\n\r\n            let selectedUsers = users.filter((user: ICheckBoxItem) => {\r\n                return user.isChecked;\r\n            });\r\n\r\n            let filteredCategories = selectedCategories.map((category: ICheckBoxItem) => {\r\n                return category.key;\r\n            });\r\n\r\n            let filteredUsers = selectedUsers.map((user: ICheckBoxItem) => {\r\n                return user.key;\r\n            });\r\n\r\n            this.isFilterStateChanged = false;\r\n            this.props.onFilterChange(filteredCategories, filteredUsers, this.state.selectedSortBy);\r\n        }\r\n        else {\r\n            this.isFilterStateChanged = false;\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t* Renders the component\r\n\t*/\r\n    public render(): JSX.Element {\r\n        if (this.props.isVisible) {\r\n            return (\r\n                <Fabric dir={this.props.dir}>\r\n                    <Flex className=\"filter-bar\" data-testid=\"filterbar\">\r\n                        {this.state.screenWidth > 750 &&\r\n                            <Flex gap=\"gap.small\" vAlign=\"center\" className=\"filter-bar-wrapper\" space=\"between\">\r\n                                <div className=\"filter-bar-item-container\">\r\n                                    <Text content={this.localize(\"category\")} weight=\"semibold\" className=\"title-text\"/>\r\n                                    <PopupMenuWrapper dir={this.props.dir} title={this.state.categorySelectedCount > 0 ? this.state.categorySelectedCount + \" \" + this.localize(\"selected\") : this.localize(\"selectHere\")} showSearchBar={true} selectedSortBy={this.state.selectedSortBy!} selectedCount={this.state.categorySelectedCount} checkboxes={this.state.categoryList} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCategoryStateChange} onOpenChange={this.onFilterChange} />\r\n                                        <Text content={this.localize(\"createdBy\")} weight=\"semibold\" className=\"title-text\"/>\r\n                                    <PopupMenuWrapper dir={this.props.dir} title={this.state.createdBySelectedCount > 0 ? this.state.createdBySelectedCount + \" \" + this.localize(\"selected\") : this.localize(\"selectHere\")} showSearchBar={true} selectedSortBy={this.state.selectedSortBy!} checkboxes={this.state.createdByList} selectedCount={this.state.createdBySelectedCount} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCreatedByStateChange} onOpenChange={this.onFilterChange} />\r\n                                        <Text content={this.localize(\"sortBy\")} weight=\"semibold\" className=\"title-text\"/>\r\n                                    <PopupMenuWrapper dir={this.props.dir} title={this.state.sortBy[this.state.selectedSortBy!].name} selectedSortBy={this.state.selectedSortBy!} selectedCount={this.state.createdBySelectedCount} radioGroup={this.state.sortBy} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCreatedByStateChange} onOpenChange={this.onFilterChange} />\r\n                                </div>\r\n                            <Flex.Item push={this.props.dir === LanguageDirection.Ltr}>\r\n                                <CloseIcon onClick={this.onCloseIconClick} className={this.props.dir === LanguageDirection.Rtl ? \"close-icon rtl-left-margin-small\" : \"close-icon\"} />\r\n                                </Flex.Item>\r\n                            </Flex>}\r\n\r\n                        {this.state.screenWidth <= 750 && <Flex gap=\"gap.small\" vAlign=\"start\" className=\"filter-bar-wrapper\">\r\n                            <Flex.Item grow>\r\n                                <Flex column gap=\"gap.small\" vAlign=\"stretch\">\r\n                                    <Flex className=\"mobile-filterbar-wrapper\">\r\n                                        <PopupMenuWrapper dir={this.props.dir} title={this.state.categorySelectedCount > 0 ? this.state.categorySelectedCount + \" \" + this.localize(\"selected\") : this.localize(\"selectHere\")} showSearchBar={true} selectedSortBy={this.state.selectedSortBy!} selectedCount={this.state.categorySelectedCount} checkboxes={this.state.categoryList} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCategoryStateChange} onOpenChange={this.onFilterChange} />\r\n                                        <PopupMenuWrapper dir={this.props.dir} title={this.state.createdBySelectedCount > 0 ? this.state.createdBySelectedCount + \" \" + this.localize(\"selected\") : this.localize(\"selectHere\")} showSearchBar={true} selectedSortBy={this.state.selectedSortBy!} selectedCount={this.state.createdBySelectedCount} checkboxes={this.state.createdByList} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCreatedByStateChange} onOpenChange={this.onFilterChange} />\r\n                                        <PopupMenuWrapper dir={this.props.dir} title={this.state.sortBy[this.state.selectedSortBy!].name} selectedCount={this.state.createdBySelectedCount} selectedSortBy={this.state.selectedSortBy!} radioGroup={this.state.sortBy} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCreatedByStateChange} onOpenChange={this.onFilterChange} />\r\n                                    </Flex>\r\n                                </Flex>\r\n                            </Flex.Item>\r\n                        </Flex>}\r\n                    </Flex>\r\n                </Fabric>\r\n            );\r\n        }\r\n        else {\r\n            return (<></>);\r\n        }\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(FilterBar))","// <copyright file=\"tab-menu.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Menu, MenuProps } from \"@fluentui/react-northstar\";\r\nimport \"./tab-menu.css\";\r\n\r\ninterface ITabMenuProps {\r\n    defaultTabIndex: number,\r\n    tabItems: Array<any>,\r\n    activeTabIndex: string | number,\r\n    onTabIndexChange: (tabEvent: MenuProps | undefined) => void\r\n}\r\n\r\n/**\r\n * Renders tab menu\r\n * @param props The props of type ITabMenuProps\r\n */\r\nconst TabMenu: React.FunctionComponent<ITabMenuProps> = props => {\r\n    return (\r\n        <Flex className=\"tab-menu\">\r\n            <Menu primary items={props.tabItems} defaultActiveIndex={props.defaultTabIndex} activeIndex={props.activeTabIndex} onActiveIndexChange={(event, tabEventDetails: MenuProps | undefined) => props.onTabIndexChange(tabEventDetails)} />\r\n        </Flex>\r\n    );\r\n}\r\n\r\nexport default TabMenu;","// <copyright file=\"toast-notification.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IToastNotification } from \"../../models/IToastNotification\";\r\nimport { ActivityStatus } from \"../../models/activity-status\";\r\nimport { Toast } from \"react-bootstrap\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\nimport \"./toast-notification.css\";\r\n\r\ninterface IToastNotificationProps extends WithTranslation {\r\n    notification: IToastNotification,\r\n    dir: LanguageDirection\r\n}\r\n\r\ninterface IToastNotificationState {\r\n    isShowNotification: boolean\r\n}\r\n\r\n/**\r\n * The toast notification which shows the recent status messages\r\n * @param props The props of type IToastNotificationProps\r\n */\r\nclass ToastNotification extends React.Component<IToastNotificationProps, IToastNotificationState> {\r\n    readonly localize: TFunction;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.localize = this.props.t;\r\n\r\n        this.state = {\r\n            isShowNotification: false\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: IToastNotificationProps) {\r\n        if (nextProps.notification.id !== this.props.notification.id && nextProps.notification.message?.length && nextProps.notification.type !== ActivityStatus.None) {\r\n            this.setState({ isShowNotification: true });\r\n        }\r\n    }\r\n\r\n    onClose = () => {\r\n        this.setState({ isShowNotification: false });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Toast\r\n                className={`notification-toast ${this.props.notification.type === ActivityStatus.Success ? \"success\" : \"error\"}`}\r\n                autohide\r\n                delay={4000}\r\n                show={this.state.isShowNotification}\r\n                onClose={this.onClose}>\r\n                <Toast.Body className={this.props.dir === LanguageDirection.Ltr ? \"notification\" : \"rtl-notification\"}>\r\n                    <strong>{this.props.notification.message}</strong>\r\n                </Toast.Body>\r\n            </Toast>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(ToastNotification);","// <copyright file=\"LnD-team-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\n\r\nlet baseAxiosUrl = window.location.origin + '/api';\r\n\r\n/**\r\n* Gets all LnD teams' members\r\n*/\r\nexport const getAllLnDTeamMembersAsync = async (): Promise<any> => {\r\n    let url = `${baseAxiosUrl}/LnDTeam`;\r\n    return await axios.get(url);\r\n}","// <copyright file=\"mobile-filter-helper.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport Resources from \"../constants/resources\";\r\n\r\n/** Clears the local storage data saved for mobile filter */\r\nexport const clearMobileFilterLocalStorage = () => {\r\n    localStorage.removeItem(Resources.userEventsMobileFilteredCategoriesLocalStorageKey);\r\n    localStorage.removeItem(Resources.userEventsMobileFilteredUsersLocalStorageKey);\r\n    localStorage.removeItem(Resources.userEventsMobileSortByFilterLocalStorageKey);\r\n}","// <copyright file=\"discover-events.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Button, Flex, Input, Loader, MenuButton, MenuProps, Provider, SearchIcon, CloseIcon } from \"@fluentui/react-northstar\";\r\nimport { Fabric } from \"@fluentui/react\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { EventSearchType } from \"../../models/event-search-type\";\r\nimport Constants, { ResponseStatus } from \"../../constants/constants\";\r\nimport { SortBy } from \"../../models/sort-by\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport UserEvents from \"../user-events-wrapper/user-events-wrapper\";\r\nimport NoContent from \"../no-content-page/no-content-page\"\r\nimport FilterBar from \"../filter-bar/filter-bar\";\r\nimport TabMenu from \"../tab-menu/tab-menu\"\r\nimport { getEventsAsync } from \"../../api/user-events-api\";\r\nimport { Icon } from '@fluentui/react';\r\nimport { ITeamsChannelMember } from \"../../models/ITeamsChannelMember\";\r\nimport ToastNotification from \"../toast-notification/toast-notification\";\r\nimport { ActivityStatus } from \"../../models/activity-status\";\r\nimport { IToastNotification } from \"../../models/IToastNotification\";\r\nimport { getEventCategoriesAsync } from \"../../api/create-event-api\";\r\nimport { getAllLnDTeamMembersAsync } from \"../../api/LnD-team-api\";\r\nimport { EventOperationType } from \"../../models/event-operation-type\";\r\nimport Resources from \"../../constants/resources\";\r\nimport { clearMobileFilterLocalStorage } from \"../../helpers/mobile-filter-helper\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\nimport \"./discover-events.css\";\r\n\r\ninterface IDiscoverEventsState {\r\n    mandatoryEvents: Array<IEvent>,\r\n    allEvents: Array<IEvent>,\r\n    hasMoreEvents: boolean,\r\n    userEventsContainerKey: number,\r\n    isLoadingEvents: boolean,\r\n    activeTabIndex: number | string | undefined,\r\n    isFilterOpen: boolean,\r\n    searchText: string,\r\n    filteredCategories: string,\r\n    filteredUsers: string,\r\n    sortByFilter: number,\r\n    categoriesInFilter: Array<ICategory>,\r\n    lnDTeamMembersInFilter: Array<ITeamsChannelMember>,\r\n    isResetFilter: boolean,\r\n    notification: IToastNotification,\r\n    isMobileView: boolean,\r\n    isMobileSearchBoxOpen: boolean\r\n}\r\n\r\ninterface IDiscoverEventsProps extends WithTranslation, IWithContext {\r\n}\r\n\r\n/** The tab index for 'Mandatory events' tab */\r\nconst MandatoryEventsTabIndex: number = 0;\r\n\r\n/** The tab index for 'All events' */\r\nconst AllEventsTabIndex: number = 1;\r\n\r\n/** Renders all events for user created by LnD team */\r\nclass DiscoverEvents extends React.Component<IDiscoverEventsProps, IDiscoverEventsState> {\r\n    localize: TFunction;\r\n    searchText: string;\r\n    timeout: number | null;\r\n    mandatoryEventsCount: number;\r\n    allEventsCount: number;\r\n\r\n    constructor(props: IDiscoverEventsProps) {\r\n        super(props);\r\n\r\n        this.searchText = \"\";\r\n        this.localize = this.props.t;\r\n        this.timeout = null;\r\n        this.mandatoryEventsCount = -1;\r\n        this.allEventsCount = -1;\r\n\r\n        this.state = {\r\n            mandatoryEvents: [],\r\n            allEvents: [],\r\n            hasMoreEvents: false,\r\n            userEventsContainerKey: 0,\r\n            isLoadingEvents: true,\r\n            activeTabIndex: MandatoryEventsTabIndex,\r\n            isFilterOpen: false,\r\n            searchText: \"\",\r\n            filteredCategories: \"\",\r\n            filteredUsers: \"\",\r\n            sortByFilter: SortBy.Recent,\r\n            categoriesInFilter: [],\r\n            lnDTeamMembersInFilter: [],\r\n            isResetFilter: false,\r\n            notification: { id: 0, message: \"\", type: ActivityStatus.None },\r\n            isMobileView: false,\r\n            isMobileSearchBoxOpen: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.screenResize.bind(this));\r\n        this.screenResize();\r\n\r\n        this.loadEventCategories();\r\n        this.loadAllLnDTeamMembers();\r\n\r\n        clearMobileFilterLocalStorage();\r\n\r\n        let mandatoryEvents = this.getEventsAsync(EventSearchType.MandatoryEventsForUser);\r\n        let allEvents = this.getEventsAsync(EventSearchType.AllPublicPrivateEventsForUser);\r\n\r\n        Promise.all([mandatoryEvents, allEvents])\r\n            .then((results) => {\r\n                this.setTotalEventsCount(EventSearchType.MandatoryEventsForUser, results[0].length);\r\n                this.setTotalEventsCount(EventSearchType.AllPublicPrivateEventsForUser, results[1].length);\r\n            })\r\n            .finally(() => {\r\n                this.getEvents();\r\n            });\r\n    }\r\n\r\n    screenResize = () => {\r\n        this.setState({ isMobileView: window.innerWidth <= Constants.maxWidthForMobileView });\r\n    }\r\n\r\n    /** Get all event categories and load in filter */\r\n    loadEventCategories = async () => {\r\n        let response = await getEventCategoriesAsync();\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            this.setState({ categoriesInFilter: response.data });\r\n        }\r\n    }\r\n\r\n    /** Get all LnD teams' members and load in filter */\r\n    loadAllLnDTeamMembers = async () => {\r\n        let response = await getAllLnDTeamMembersAsync();\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            this.setState({ lnDTeamMembersInFilter: response.data });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all events for specified page number\r\n     * @param eventSearchType The type of user events to get\r\n     * @param pageNumber The page number of which events to get\r\n     */\r\n    getEventsAsync = async (eventSearchType: EventSearchType, pageNumber: number = 0) => {\r\n        let response: any;\r\n\r\n        if (eventSearchType === EventSearchType.MandatoryEventsForUser) {\r\n            response = await getEventsAsync(\r\n                this.state.searchText,\r\n                pageNumber,\r\n                EventSearchType.MandatoryEventsForUser,\r\n                this.state.filteredUsers,\r\n                this.state.filteredCategories,\r\n                this.state.sortByFilter);\r\n        }\r\n        else {\r\n            response = await getEventsAsync(this.state.searchText,\r\n                pageNumber,\r\n                EventSearchType.AllPublicPrivateEventsForUser,\r\n                this.state.filteredUsers,\r\n                this.state.filteredCategories,\r\n                this.state.sortByFilter);\r\n        }\r\n\r\n        let result: Array<IEvent> = [];\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            result = response.data;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets all events for specified page number\r\n     * @param eventSearchType The type of user events to get\r\n     * @param pageNumber The page number of which events to get\r\n     */\r\n    loadEvents = async (eventSearchType: EventSearchType, pageNumber: number = 0) => {\r\n        let events: Array<IEvent> = await this.getEventsAsync(eventSearchType, pageNumber);\r\n\r\n        if (events) {\r\n            switch (eventSearchType) {\r\n                case EventSearchType.MandatoryEventsForUser:\r\n                    if (pageNumber > 0) {\r\n                        let response = [...events];\r\n                        let mandatoryEvents = [...this.state.mandatoryEvents];\r\n\r\n                        let updatedEventResponse = response.filter((event: IEvent) =>\r\n                            mandatoryEvents.findIndex((eventDetails: IEvent) => eventDetails.eventId === event.eventId) === -1\r\n                        );\r\n\r\n                        this.setState({\r\n                            mandatoryEvents: mandatoryEvents.concat(updatedEventResponse),\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.setTotalEventsCount(EventSearchType.MandatoryEventsForUser, events.length);\r\n\r\n                        this.setState({\r\n                            mandatoryEvents: [...events],\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n\r\n                    break;\r\n\r\n                case EventSearchType.AllPublicPrivateEventsForUser:\r\n                    if (pageNumber > 0) {\r\n                        let response = [...events];\r\n                        let allEvents = [...this.state.allEvents];\r\n\r\n                        let updatedEventResponse = response.filter((event: IEvent) =>\r\n                            allEvents.findIndex((eventDetails: IEvent) => eventDetails.eventId === event.eventId) === -1);\r\n\r\n                        this.setState({\r\n                            allEvents: allEvents.concat(updatedEventResponse),\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.setTotalEventsCount(EventSearchType.AllPublicPrivateEventsForUser, events.length);\r\n\r\n                        this.setState({\r\n                            allEvents: [...events],\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            if (pageNumber === 0) {\r\n                this.setTotalEventsCount(eventSearchType, 0);\r\n\r\n                if (eventSearchType === EventSearchType.MandatoryEventsForUser) {\r\n                    this.setState({ mandatoryEvents: [], hasMoreEvents: false });\r\n                }\r\n                else {\r\n                    this.setState({ allEvents: [], hasMoreEvents: false });\r\n                }\r\n            }\r\n            else {\r\n                this.setState({ hasMoreEvents: false });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the total event count for selected tab\r\n     * @param count The total count to set\r\n     */\r\n    setTotalEventsCount = (eventSeatchType: EventSearchType, count: number) => {\r\n        if ((!this.state.searchText || this.state.searchText.trim() === \"\") && !this.state.filteredCategories?.length && !this.state.filteredUsers?.length) {\r\n            switch (eventSeatchType) {\r\n                case EventSearchType.MandatoryEventsForUser:\r\n                    this.mandatoryEventsCount = count;\r\n                    break;\r\n\r\n                case EventSearchType.AllPublicPrivateEventsForUser:\r\n                    this.allEventsCount = count;\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when click on event\r\n     * @param eventDetails The event details\r\n     */\r\n    onEventClick = (eventDetails: IEvent) => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            url: `${window.location.origin}/register-remove?eventId=${eventDetails.eventId}&teamId=${eventDetails.teamId}&isMobileView=${this.state.isMobileView}`,\r\n            height: 746,\r\n            width: 600,\r\n            title: this.localize(\"eventDetailsStep1\"),\r\n        }, (error:any, result:any) => {\r\n                if (result) {\r\n                    let events: Array<IEvent> = this.state.activeTabIndex === MandatoryEventsTabIndex ? [...this.state.mandatoryEvents] : [...this.state.allEvents];\r\n                    let eventAtIndex: number = events?.findIndex((event: IEvent) => event.eventId === eventDetails.eventId);\r\n\r\n                    let eventToUpdate: IEvent = events[eventAtIndex];\r\n                    eventToUpdate.registeredAttendeesCount = result.type === EventOperationType.Register ? eventToUpdate.registeredAttendeesCount + 1 : eventToUpdate.registeredAttendeesCount - 1;\r\n\r\n                    if (this.state.activeTabIndex === MandatoryEventsTabIndex) {\r\n                        this.setState((prevState: IDiscoverEventsState) => (\r\n                            {\r\n                                mandatoryEvents: events,\r\n                                notification: {\r\n                                    id: prevState.notification.id + 1,\r\n                                    message: result.type === EventOperationType.Register ? this.localize(\"eventRegistrationSuccessfulMessage\") : this.localize(\"eventUnregistrationSuccessfulMessage\"),\r\n                                    type: ActivityStatus.Success\r\n                                }\r\n                            }\r\n                        ));\r\n                    }\r\n                    else {\r\n                        this.setState((prevState: IDiscoverEventsState) => (\r\n                            {\r\n                                allEvents: events,\r\n                                notification: {\r\n                                    id: prevState.notification.id + 1,\r\n                                    message: result.type === EventOperationType.Register ? this.localize(\"eventRegistrationSuccessfulMessage\") : this.localize(\"eventUnregistrationSuccessfulMessage\"),\r\n                                    type: ActivityStatus.Success\r\n                                }\r\n                            }\r\n                        ));\r\n                    }\r\n                }\r\n        });\r\n    }\r\n\r\n    /** Get called when tab selection change */\r\n    onTabIndexChange = (event: MenuProps | undefined) => {\r\n        if (this.timeout) {\r\n            window.clearTimeout(this.timeout);\r\n        }\r\n\r\n        clearMobileFilterLocalStorage();\r\n\r\n        this.setState({ isLoadingEvents: true, activeTabIndex: event?.activeIndex!, searchText: \"\", filteredCategories: \"\", filteredUsers: \"\", sortByFilter: SortBy.Recent, isResetFilter: true }, () => {\r\n            this.timeout = window.setTimeout(async () => {\r\n                if (event) {\r\n                    this.getEvents();\r\n                }\r\n            }, 700);\r\n        });\r\n    }\r\n\r\n    /** Get called when 'Enter' key pressed in 'Search events' textbox */\r\n    onSearchEvents = (event: any) => {\r\n        if (event.keyCode === 13 && this.state.searchText.trim() !== \"\") {\r\n            this.getEvents();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when search text gets changed\r\n     * @param event The input event object\r\n     */\r\n    onSearchTextChange = (event: any) => {\r\n        if (!event.target.value.length) {\r\n            this.setState({ searchText: \"\" }, () => {\r\n                this.getEvents();\r\n            });\r\n        }\r\n        else {\r\n            this.setState({ searchText: event.target.value });\r\n        }\r\n    }\r\n\r\n    /** The event handler to toggle the state of filter bar */\r\n    onFilterBarToggle = () => {\r\n        this.setState((prevState) => ({\r\n            isFilterOpen: !prevState.isFilterOpen,\r\n            isResetFilter: false\r\n        }));\r\n    }\r\n\r\n    /** The event handler called when click on filter icon and mobile mode is ON */\r\n    onMobileFilterButtonClick = () => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            url: `${window.location.origin}/mobile-filter`,\r\n            height: 746,\r\n            width: 600,\r\n            title: this.localize(\"mobileFilterTitle\"),\r\n        }, (error: any, result: any) => {\r\n                if (result && result.isFilterStateChanged) {\r\n                    let filteredCategories = localStorage.getItem(Resources.userEventsMobileFilteredCategoriesLocalStorageKey);\r\n                    let filteredUsers = localStorage.getItem(Resources.userEventsMobileFilteredUsersLocalStorageKey);\r\n                    let sortBy = localStorage.getItem(Resources.userEventsMobileSortByFilterLocalStorageKey);\r\n\r\n                    this.setState({\r\n                        filteredCategories: filteredCategories ? filteredCategories : \"\",\r\n                        filteredUsers: filteredUsers ? filteredUsers : \"\",\r\n                        sortByFilter: sortBy ? sortBy as unknown as number : 0\r\n                    }, () => this.getEvents());\r\n                }\r\n        });\r\n    }\r\n\r\n    /** Event handler called when click on close filter bar which closes it and clears all filters those were applied */\r\n    onFilterBarClose = (isFilterStateChanged: boolean) => {\r\n        this.setState((prevState) => ({\r\n            isFilterOpen: !prevState.isFilterOpen,\r\n            filteredCategories: \"\",\r\n            filteredUsers: \"\",\r\n            sortByFilter: SortBy.Recent,\r\n            isResetFilter: true\r\n        }), () => {\r\n                if (isFilterStateChanged) {\r\n                    this.getEvents();\r\n                }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The event handler called when to get events based on filtered values\r\n     * @param selectedCategories The selected categories in filter bar\r\n     * @param selectedUsers The selected users in filter bar\r\n     * @param sortBy The selected sort by value in filter bar\r\n     */\r\n    onFilterChange = (selectedCategories: Array<string>, selectedUsers: Array<string>, sortBy: number) => {\r\n        let filteredCategories: Array<string> = selectedCategories ? selectedCategories : [];\r\n        let filteredUsers: Array<string> = selectedUsers ? selectedUsers : [];\r\n\r\n        this.setState({\r\n            filteredCategories: filteredCategories.join(\";\"),\r\n            filteredUsers: filteredUsers.join(\";\"),\r\n            sortByFilter: sortBy\r\n        }, () => {\r\n            this.getEvents();\r\n        });\r\n    }\r\n\r\n    /** The event handler called when mobile search box get closed */\r\n    onMobileSearchBoxClose = () => {\r\n        this.setState({ isMobileSearchBoxOpen: !this.state.isMobileSearchBoxOpen });\r\n\r\n        /** If search box do not have the search text, then-\r\n         - No need to call get events as it was already called when user explicitly makes search box empty\r\n         - No need to call get events if user simply open and closes the search box\r\n         */\r\n        if (this.state.searchText?.trim().length) {\r\n            this.setState({ searchText: \"\" }, () => this.getEvents());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get events based on current tab selection\r\n     * @param pageNumber The page number of which events to get\r\n     */\r\n    getEvents = (pageNumber: number = 0) => {\r\n        if (pageNumber === 0) {\r\n            this.setState((prevState: IDiscoverEventsState) =>\r\n                ({ isLoadingEvents: true, hasMoreEvents: false, userEventsContainerKey: prevState.userEventsContainerKey + 1, isResetFilter: false }));\r\n        }\r\n\r\n        switch (this.state.activeTabIndex) {\r\n            case MandatoryEventsTabIndex:\r\n                this.loadEvents(EventSearchType.MandatoryEventsForUser, pageNumber)\r\n                    .finally(() => {\r\n                        this.setState({ isLoadingEvents: false });\r\n                    });\r\n                break;\r\n\r\n            case AllEventsTabIndex:\r\n                this.loadEvents(EventSearchType.AllPublicPrivateEventsForUser, pageNumber)\r\n                    .finally(() => {\r\n                        this.setState({ isLoadingEvents: false });\r\n                    });\r\n                break;\r\n\r\n            default:\r\n                this.setState({ isLoadingEvents: false });\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Formats events count to show on tab items\r\n     * @param count The count of events\r\n     */\r\n    formatEventsCount = (count: number) => {\r\n        if (count === -1) {\r\n            return \"\";\r\n        }\r\n        else if (count < Constants.lazyLoadEventsCount) {\r\n            return `(${count})`;\r\n        }\r\n        else {\r\n            return `(${Constants.lazyLoadEventsCount}+)`;\r\n        }\r\n    }\r\n\r\n    /** Gets tab menu items */\r\n    renderTabMenuItems = () => {\r\n        return (\r\n            [\r\n                {\r\n                    key: \"mandatory-user-events\",\r\n                    content: `${this.localize(\"mandatoryEventsTab\")} ${this.formatEventsCount(this.mandatoryEventsCount)}`\r\n                },\r\n                {\r\n                    key: \"all-user-events\",\r\n                    content: `${this.localize(\"allEventsTab\")} ${this.formatEventsCount(this.allEventsCount)}`\r\n                },\r\n            ]\r\n        );\r\n    }\r\n\r\n    /** Renders user events */\r\n    renderEvents = () => {\r\n        if (this.state.isLoadingEvents) {\r\n            return <Provider><Loader className=\"loader\" /></Provider>;\r\n        }\r\n\r\n        let events: Array<IEvent> = [];\r\n\r\n        if (this.state.activeTabIndex === MandatoryEventsTabIndex) {\r\n            events = [...this.state.mandatoryEvents];\r\n        }\r\n        else if (this.state.activeTabIndex === AllEventsTabIndex) {\r\n            events = [...this.state.allEvents];\r\n        }\r\n\r\n        if (!events || events.length === 0) {\r\n            return (\r\n                <NoContent message={this.localize(\"eventsNotAvailable\")} />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Flex className={this.state.isFilterOpen ? \"filter-open\" : undefined}>\r\n                <UserEvents\r\n                    key={`discover-events-${this.state.userEventsContainerKey}`}\r\n                    events={events}\r\n                    hasMoreEvents={this.state.hasMoreEvents}\r\n                    loadMoreEvents={this.getEvents}\r\n                    onClick={this.onEventClick}\r\n                />\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    renderFilterButtonIcon = () => {\r\n        if ((this.state.filteredCategories && this.state.filteredCategories.length > 0)\r\n            || (this.state.filteredUsers && this.state.filteredUsers.length > 0)) {\r\n            return <Icon iconName=\"FilterSolid\" />\r\n        }\r\n        else {\r\n            return <Icon iconName=\"Filter\" />\r\n        }\r\n    }\r\n\r\n    /** Renders the desktop view */\r\n    renderDesktopView = () => {\r\n        return (\r\n            <Fabric dir={this.props.dir}>\r\n                <Flex column>\r\n                    <Flex space=\"between\" vAlign=\"center\">\r\n                        <TabMenu defaultTabIndex={MandatoryEventsTabIndex} activeTabIndex={this.state.activeTabIndex!} tabItems={this.renderTabMenuItems()} onTabIndexChange={this.onTabIndexChange} />\r\n                        <Flex.Item push={this.props.dir === LanguageDirection.Ltr}>\r\n                            <Flex gap=\"gap.medium\" vAlign=\"center\">\r\n                                <MenuButton\r\n                                    className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-medium\" : \"\"}\r\n                                    trigger={\r\n                                        <Button icon={this.renderFilterButtonIcon()}\r\n                                            content={this.localize(\"filterButtonText\")}\r\n                                            onClick={this.onFilterBarToggle}\r\n                                            data-testid=\"filterbutton\"\r\n                                        />}\r\n                            />\r\n                                <Input\r\n                                    inverted\r\n                                    value={this.state.searchText}\r\n                                    icon={<SearchIcon />}\r\n                                    iconPosition={this.props.dir === LanguageDirection.Rtl ? \"start\" : \"end\"}\r\n                                    placeholder={this.localize(\"searchForEventsPlaceholder\")}\r\n                                    input={{ design: { minWidth: \"20rem\", maxWidth: \"20rem\" } }}\r\n                                    onKeyUp={this.onSearchEvents}\r\n                                    onChange={this.onSearchTextChange}\r\n                                    data-testid=\"search_input\"\r\n                                />\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <FilterBar\r\n                        isVisible={this.state.isFilterOpen}\r\n                        isReset={this.state.isResetFilter}\r\n                        categoryList={this.state.categoriesInFilter}\r\n                        createdByList={this.state.lnDTeamMembersInFilter}\r\n                        onFilterBarCloseClick={this.onFilterBarClose}\r\n                        onFilterChange={this.onFilterChange}\r\n                    />\r\n                </Flex>\r\n                {this.renderEvents()}\r\n            </Fabric>\r\n        );\r\n    }\r\n\r\n    /** Renders the mobile view */\r\n    renderMobileView = () => {\r\n        return (\r\n            <Fabric dir={this.props.dir}>\r\n                <Flex column>\r\n                    <Flex space=\"between\">\r\n                        <TabMenu defaultTabIndex={MandatoryEventsTabIndex} activeTabIndex={this.state.activeTabIndex!} tabItems={this.renderTabMenuItems()} onTabIndexChange={this.onTabIndexChange} />\r\n                        <Flex.Item push>\r\n                            <Flex gap=\"gap.medium\" vAlign=\"center\">\r\n                                <MenuButton\r\n                                    trigger={\r\n                                        <Button\r\n                                            text\r\n                                            iconOnly\r\n                                            icon={this.renderFilterButtonIcon()}\r\n                                            onClick={this.onMobileFilterButtonClick}\r\n                                        />}\r\n                                />\r\n                                <SearchIcon onClick={() => this.setState({ isMobileSearchBoxOpen: !this.state.isMobileSearchBoxOpen })} />\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    {this.state.isMobileSearchBoxOpen && !this.state.isFilterOpen &&\r\n                        <Flex className=\"search-box\" vAlign=\"center\" gap=\"gap.small\">\r\n                            <Input\r\n                                inverted\r\n                                fluid\r\n                                value={this.state.searchText}\r\n                                placeholder={this.localize(\"searchForEventsPlaceholder\")}\r\n                                input={{ design: { minWidth: \"20rem\", width: \"100rem\" } }}\r\n                                onKeyUp={this.onSearchEvents}\r\n                                onChange={this.onSearchTextChange}\r\n                            />\r\n                            <Flex.Item push>\r\n                                <CloseIcon className=\"close-searchbox-icon\" onClick={this.onMobileSearchBoxClose} />\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    }\r\n                </Flex>\r\n                {!this.state.isFilterOpen && this.renderEvents()}\r\n            </Fabric>\r\n        );\r\n    }\r\n\r\n    /** Renders component */\r\n    render() {\r\n        return (\r\n            <div className=\"container-div\">\r\n                <div className=\"discover-events-container\">\r\n                    {this.state.isMobileView ? this.renderMobileView() : this.renderDesktopView()}\r\n                    <ToastNotification dir={this.props.dir} notification={this.state.notification} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(DiscoverEvents));","// <copyright file=\"my-events.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Button, Flex, Input, Loader, MenuButton, MenuProps, Provider, SearchIcon, CloseIcon } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { SortBy } from \"../../models/sort-by\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { EventSearchType } from \"../../models/event-search-type\";\r\nimport Constants, { ResponseStatus } from \"../../constants/constants\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport UserEvents from \"../user-events-wrapper/user-events-wrapper\";\r\nimport NoContent from \"../no-content-page/no-content-page\"\r\nimport FilterBar from \"../filter-bar/filter-bar\";\r\nimport TabMenu from \"../tab-menu/tab-menu\"\r\nimport { getEventsAsync } from \"../../api/user-events-api\";\r\nimport { Fabric, Icon } from 'office-ui-fabric-react';\r\nimport { getEventCategoriesAsync } from \"../../api/create-event-api\";\r\nimport { getAllLnDTeamMembersAsync } from \"../../api/LnD-team-api\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport { IToastNotification } from \"../../models/IToastNotification\";\r\nimport { ITeamsChannelMember } from \"../../models/ITeamsChannelMember\";\r\nimport ToastNotification from \"../toast-notification/toast-notification\";\r\nimport { ActivityStatus } from \"../../models/activity-status\";\r\nimport { EventOperationType } from \"../../models/event-operation-type\";\r\nimport { clearMobileFilterLocalStorage } from \"../../helpers/mobile-filter-helper\";\r\nimport Resources from \"../../constants/resources\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\nimport \"./my-events.css\";\r\n\r\ninterface IMyEventsState {\r\n    registeredEvents: Array<IEvent>,\r\n    completedEvents: Array<IEvent>,\r\n    hasMoreEvents: boolean,\r\n    userEventsContainerKey: number,\r\n    isLoadingEvents: boolean,\r\n    activeTabIndex: number | string | undefined,\r\n    isFilterOpen: boolean,\r\n    searchText: string,\r\n    filteredCategories: string,\r\n    filteredUsers: string,\r\n    sortByFilter: number,\r\n    categoriesInFilter: Array<ICategory>,\r\n    lnDTeamMembersInFilter: Array<ITeamsChannelMember>,\r\n    isResetFilter: boolean,\r\n    notification: IToastNotification,\r\n    isMobileView: boolean,\r\n    isMobileSearchBoxOpen: boolean\r\n}\r\n\r\ninterface IMyEventsProps extends WithTranslation, IWithContext {\r\n}\r\n\r\n/** The tab index for 'Registered events' tab */\r\nconst RegisteredEventsTabIndex: number = 0;\r\n\r\n/** The tab index for 'Completed events' */\r\nconst CompletedEventsTabIndex: number = 1;\r\n\r\n/** Renders all events for user created by LnD team */\r\nclass MyEvents extends React.Component<IMyEventsProps, IMyEventsState> {\r\n    teamId: string;\r\n    localize: TFunction;\r\n    searchText: string;\r\n    timeout: number | null;\r\n    registeredEventsCount: number;\r\n    completedEventsCount: number;\r\n\r\n    constructor(props: IMyEventsProps) {\r\n        super(props);\r\n\r\n        this.teamId = \"\";\r\n        this.searchText = \"\";\r\n        this.localize = this.props.t;\r\n        this.timeout = null;\r\n        this.registeredEventsCount = -1;\r\n        this.completedEventsCount = -1;\r\n\r\n        this.state = {\r\n            registeredEvents: [],\r\n            completedEvents: [],\r\n            hasMoreEvents: false,\r\n            userEventsContainerKey: 0,\r\n            isLoadingEvents: true,\r\n            activeTabIndex: RegisteredEventsTabIndex,\r\n            isFilterOpen: false,\r\n            searchText: \"\",\r\n            filteredCategories: \"\",\r\n            filteredUsers: \"\",\r\n            sortByFilter: SortBy.Recent,\r\n            categoriesInFilter: [],\r\n            lnDTeamMembersInFilter: [],\r\n            isResetFilter: false,\r\n            notification: { id: 0, message: \"\", type: ActivityStatus.None },\r\n            isMobileView: false,\r\n            isMobileSearchBoxOpen: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.resize.bind(this));\r\n        this.resize();\r\n\r\n        this.loadEventCategories();\r\n        this.loadAllLnDTeamMembers();\r\n\r\n        clearMobileFilterLocalStorage();\r\n\r\n        let registeredEvents = this.getEventsAsync(EventSearchType.RegisteredEventsForUser);\r\n        let completedEvents = this.getEventsAsync(EventSearchType.CompletedEventsForUser);\r\n\r\n        Promise.all([registeredEvents, completedEvents])\r\n            .then((results) => {\r\n                this.setTotalEventsCount(EventSearchType.RegisteredEventsForUser, results[0].length);\r\n                this.setTotalEventsCount(EventSearchType.CompletedEventsForUser, results[1].length);\r\n            })\r\n            .finally(() => {\r\n                this.getEvents();\r\n            });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.resize.bind(this));\r\n    }\r\n\r\n    resize = () => {\r\n        this.setState({ isMobileView: window.innerWidth <= Constants.maxWidthForMobileView });\r\n    }\r\n\r\n    /** Get all event categories and load in filter */\r\n    loadEventCategories = async () => {\r\n        let response = await getEventCategoriesAsync();\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            this.setState({ categoriesInFilter: response.data });\r\n        }\r\n    }\r\n\r\n    /** Get all LnD teams' members and load in filter */\r\n    loadAllLnDTeamMembers = async () => {\r\n        let response = await getAllLnDTeamMembersAsync();\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            this.setState({ lnDTeamMembersInFilter: response.data });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all events for specified page number\r\n     * @param eventSearchType The type of user events to get\r\n     * @param pageNumber The page number of which events to get\r\n     */\r\n    getEventsAsync = async (eventSearchType: EventSearchType, pageNumber: number = 0) => {\r\n        let response: any;\r\n\r\n        if (eventSearchType === EventSearchType.RegisteredEventsForUser) {\r\n            response = await getEventsAsync(\r\n                this.state.searchText,\r\n                pageNumber,\r\n                EventSearchType.RegisteredEventsForUser,\r\n                this.state.filteredUsers,\r\n                this.state.filteredCategories,\r\n                this.state.sortByFilter);\r\n        }\r\n        else {\r\n            response = await getEventsAsync(\r\n                this.state.searchText,\r\n                pageNumber,\r\n                EventSearchType.CompletedEventsForUser,\r\n                this.state.filteredUsers,\r\n                this.state.filteredCategories,\r\n                this.state.sortByFilter);\r\n        }\r\n\r\n        let result: Array<IEvent> = [];\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            result = response.data;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets and loads the events details on UI \r\n     * @param eventSearchType The type of user events to load\r\n     * @param pageNumber The page number of which events to get\r\n     */\r\n    loadEvents = async (eventSearchType: EventSearchType, pageNumber: number = 0) => {\r\n        let events: Array<IEvent> = await this.getEventsAsync(eventSearchType, pageNumber);\r\n\r\n        if (events) {\r\n            switch (eventSearchType) {\r\n                case EventSearchType.RegisteredEventsForUser:\r\n                    if (pageNumber > 0) {\r\n                        let response = [...events];\r\n                        let registeredEvents = [...this.state.registeredEvents];\r\n\r\n                        let updatedEventResponse = response.filter((event: IEvent) =>\r\n                            registeredEvents.findIndex((eventDetails: IEvent) => eventDetails.eventId === event.eventId) === -1);\r\n\r\n                        this.setState({\r\n                            registeredEvents: registeredEvents.concat(updatedEventResponse),\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.setTotalEventsCount(EventSearchType.RegisteredEventsForUser, events.length);\r\n\r\n                        this.setState({\r\n                            registeredEvents: [...events],\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n\r\n                    break;\r\n\r\n                case EventSearchType.CompletedEventsForUser:\r\n                    if (pageNumber > 0) {\r\n                        let response = [...events];\r\n                        let completedEvents = [...this.state.completedEvents];\r\n\r\n                        let updatedEventResponse = response.filter((event: IEvent) =>\r\n                            completedEvents.findIndex((eventDetails: IEvent) => eventDetails.eventId === event.eventId) === -1);\r\n\r\n                        this.setState({\r\n                            completedEvents: completedEvents.concat(updatedEventResponse),\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.setTotalEventsCount(EventSearchType.CompletedEventsForUser, events.length);\r\n\r\n                        this.setState({\r\n                            completedEvents: [...events],\r\n                            hasMoreEvents: events.length < Constants.lazyLoadEventsCount ? false : true\r\n                        });\r\n                    }\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            if (pageNumber === 0) {\r\n                this.setTotalEventsCount(eventSearchType, 0);\r\n\r\n                if (eventSearchType === EventSearchType.RegisteredEventsForUser) {\r\n                    this.setState({ registeredEvents: [], hasMoreEvents: false });\r\n                }\r\n                else {\r\n                    this.setState({ completedEvents: [], hasMoreEvents: false });\r\n                }\r\n            }\r\n            else {\r\n                this.setState({ hasMoreEvents: false });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the total event count for selected tab\r\n     * @param count The total count to set\r\n     */\r\n    setTotalEventsCount = (eventSeatchType: EventSearchType, count: number) => {\r\n        if ((!this.state.searchText || this.state.searchText.trim() === \"\") && !this.state.filteredCategories?.length && !this.state.filteredUsers?.length) {\r\n            switch (eventSeatchType) {\r\n                case EventSearchType.RegisteredEventsForUser:\r\n                    this.registeredEventsCount = count;\r\n                    break;\r\n\r\n                case EventSearchType.CompletedEventsForUser:\r\n                    this.completedEventsCount = count;\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when click on event\r\n     * @param eventDetails The event details\r\n     */\r\n    onEventClick = (eventDetails: IEvent) => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            url: `${window.location.origin}/register-remove?eventId=${eventDetails.eventId}&teamId=${eventDetails.teamId}&isMobileView=${this.state.isMobileView}`,\r\n            height: 746,\r\n            width: 600,\r\n            title: this.localize(\"eventDetailsStep1\"),\r\n        }, (error: any, result: any) => {\r\n                if (result && result.isSuccess) {\r\n                    let events: Array<IEvent> = this.state.registeredEvents ? [...this.state.registeredEvents] : [];\r\n\r\n                    let updatedRegisteredEvents: Array<IEvent> = events.filter((event: IEvent) => event.eventId !== eventDetails.eventId);\r\n                    this.registeredEventsCount -= 1;\r\n\r\n                    this.setState((prevState: IMyEventsState) => (\r\n                        {\r\n                            registeredEvents: updatedRegisteredEvents,\r\n                            notification: {\r\n                                id: prevState.notification.id + 1,\r\n                                message: result.type === EventOperationType.Register ? this.localize(\"eventRegistrationSuccessfulMessage\") : this.localize(\"eventUnregistrationSuccessfulMessage\"),\r\n                                type: ActivityStatus.Success\r\n                            }\r\n                        }\r\n                    ));\r\n                }\r\n        });\r\n    }\r\n\r\n    /** Get called when tab selection change */\r\n    onTabIndexChange = (event: MenuProps | undefined) => {\r\n        if (this.timeout) {\r\n            window.clearTimeout(this.timeout);\r\n        }\r\n\r\n        clearMobileFilterLocalStorage();\r\n\r\n        this.setState({ isLoadingEvents: true, activeTabIndex: event?.activeIndex!, searchText: \"\", filteredCategories: \"\", filteredUsers: \"\", sortByFilter: SortBy.Recent, isResetFilter: true }, () => {\r\n            this.timeout = window.setTimeout(async () => {\r\n                if (event) {\r\n                    this.getEvents();\r\n                }\r\n            }, 700);\r\n        });\r\n    }\r\n\r\n    /** Get called when 'Enter' key pressed in 'Search events' textbox */\r\n    onSearchEvents = (event: any) => {\r\n        if (event.keyCode === 13 && this.state.searchText.trim() !== \"\") {\r\n            this.getEvents();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when search text gets changed\r\n     * @param event The input event object\r\n     */\r\n    onSearchTextChange = (event: any) => {\r\n        if (!event.target.value.length) {\r\n            this.setState({ searchText: \"\" }, () => {\r\n                this.getEvents();\r\n            });\r\n        }\r\n        else {\r\n            this.setState({ searchText: event.target.value });\r\n        }\r\n    }\r\n\r\n    /** The event handler to toggle the state of filter bar */\r\n    onFilterBarToggle = () => {\r\n        this.setState((prevState) => ({\r\n            isFilterOpen: !prevState.isFilterOpen,\r\n            isResetFilter: false\r\n        }));\r\n    }\r\n\r\n    /** The event handler called when click on filter icon and mobile mode is ON */\r\n    onMobileFilterButtonClick = () => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            url: `${window.location.origin}/mobile-filter`,\r\n            height: 746,\r\n            width: 600,\r\n            title: this.localize(\"mobileFilterTitle\"),\r\n        }, (error: any, result: any) => {\r\n            if (result && result.isFilterStateChanged) {\r\n                let filteredCategories = localStorage.getItem(Resources.userEventsMobileFilteredCategoriesLocalStorageKey);\r\n                let filteredUsers = localStorage.getItem(Resources.userEventsMobileFilteredUsersLocalStorageKey);\r\n                let sortBy = localStorage.getItem(Resources.userEventsMobileSortByFilterLocalStorageKey);\r\n\r\n                this.setState({\r\n                    filteredCategories: filteredCategories ? filteredCategories : \"\",\r\n                    filteredUsers: filteredUsers ? filteredUsers : \"\",\r\n                    sortByFilter: sortBy ? sortBy as unknown as number : 0\r\n                }, () => this.getEvents());\r\n            }\r\n        });\r\n    }\r\n\r\n    /** Event handler called when click on close filter bar which closes it and clears all filters those were applied */\r\n    onFilterBarClose = (isFilterStateChanged: boolean) => {\r\n        this.setState((prevState) => ({\r\n            isFilterOpen: !prevState.isFilterOpen,\r\n            filteredCategories: \"\",\r\n            filteredUsers: \"\",\r\n            sortByFilter: SortBy.Recent,\r\n            isResetFilter: true\r\n        }), () => {\r\n                if (isFilterStateChanged) {\r\n                    this.getEvents();\r\n                }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The event handler called when to get events based on filtered values\r\n     * @param selectedCategories The selected categories in filter bar\r\n     * @param selectedUsers The selected users in filter bar\r\n     * @param sortBy The selected sort by value in filter bar\r\n     */\r\n    onFilterChange = (selectedCategories: Array<string>, selectedUsers: Array<string>, sortBy: number) => {\r\n        let filteredCategories: Array<string> = selectedCategories ? selectedCategories : [];\r\n        let filteredUsers: Array<string> = selectedUsers ? selectedUsers : [];\r\n\r\n        this.setState({\r\n            filteredCategories: filteredCategories.join(\";\"),\r\n            filteredUsers: filteredUsers.join(\";\"),\r\n            sortByFilter: sortBy\r\n        }, () => {\r\n            this.getEvents();\r\n        });\r\n    }\r\n\r\n    /** The event handler called when mobile search box get closed */\r\n    onMobileSearchBoxClose = () => {\r\n        this.setState({ isMobileSearchBoxOpen: !this.state.isMobileSearchBoxOpen });\r\n\r\n        /** If search box do not have the search text, then-\r\n         - No need to call get events as it was already called when user explicitly makes search box empty\r\n         - No need to call get events if user simply open and closes the search box\r\n         */\r\n        if (this.state.searchText?.trim().length) {\r\n            this.setState({ searchText: \"\" }, () => this.getEvents());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get events based on current tab selection\r\n     * @param pageNumber The page number of which events to get\r\n     */\r\n    getEvents = (pageNumber: number = 0) => {\r\n        if (pageNumber === 0) {\r\n            this.setState((prevState: IMyEventsState) =>\r\n                ({ isLoadingEvents: true, hasMoreEvents: false, userEventsContainerKey: prevState.userEventsContainerKey + 1, isResetFilter: false }));\r\n        }\r\n\r\n        switch (this.state.activeTabIndex) {\r\n            case RegisteredEventsTabIndex:\r\n                this.loadEvents(EventSearchType.RegisteredEventsForUser, pageNumber)\r\n                    .finally(() => {\r\n                        this.setState({ isLoadingEvents: false });\r\n                    });\r\n                break;\r\n\r\n            case CompletedEventsTabIndex:\r\n                this.loadEvents(EventSearchType.CompletedEventsForUser, pageNumber)\r\n                    .finally(() => {\r\n                        this.setState({ isLoadingEvents: false });\r\n                    });\r\n                break;\r\n\r\n            default:\r\n                this.setState({ isLoadingEvents: false });\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Formats events count to show on tab items\r\n     * @param count The count of events\r\n     */\r\n    formatEventsCount = (count: number) => {\r\n        if (count === -1) {\r\n            return \"\";\r\n        }\r\n        else if (count < Constants.lazyLoadEventsCount) {\r\n            return `(${count})`;\r\n        }\r\n        else {\r\n            return `(${Constants.lazyLoadEventsCount}+)`;\r\n        }\r\n    }\r\n\r\n    /** Gets tab menu items */\r\n    renderTabMenuItems = () => {\r\n        return (\r\n            [\r\n                {\r\n                    key: \"registered-user-events\",\r\n                    content: `${this.localize(\"registeredEventsTab\")} ${this.formatEventsCount(this.registeredEventsCount)}`\r\n                },\r\n                {\r\n                    key: \"completed-user-events\",\r\n                    content: `${this.localize(\"completedEventsTab\")} ${this.formatEventsCount(this.completedEventsCount)}`\r\n                },\r\n            ]\r\n        );\r\n    }\r\n\r\n    /** Renders user events */\r\n    renderEvents = () => {\r\n        if (this.state.isLoadingEvents) {\r\n            return <Provider><Loader className=\"loader\" /></Provider>;\r\n        }\r\n\r\n        let events: Array<IEvent> = [];\r\n\r\n        if (this.state.activeTabIndex === RegisteredEventsTabIndex) {\r\n            events = [...this.state.registeredEvents];\r\n        }\r\n        else if (this.state.activeTabIndex === CompletedEventsTabIndex) {\r\n            events = [...this.state.completedEvents];\r\n        }\r\n\r\n        if (!events || events.length === 0) {\r\n            return (\r\n                <NoContent message={this.localize(\"eventsNotAvailable\")} />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Flex className={this.state.isFilterOpen ? \"filter-open\" : undefined}>\r\n                <UserEvents\r\n                    key={`my-events-${this.state.userEventsContainerKey}`}\r\n                    events={events}\r\n                    hasMoreEvents={this.state.hasMoreEvents}\r\n                    loadMoreEvents={this.getEvents}\r\n                    onClick={this.onEventClick}\r\n                />\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    renderFilterButtonIcon = () => {\r\n        if ((this.state.filteredCategories && this.state.filteredCategories.length > 0)\r\n            || (this.state.filteredUsers && this.state.filteredUsers.length > 0)) {\r\n            return <Icon iconName=\"FilterSolid\" />\r\n        }\r\n        else {\r\n            return <Icon iconName=\"Filter\" />\r\n        }\r\n    }\r\n\r\n    /** Renders the desktop view */\r\n    renderDesktopView = () => {\r\n        return (\r\n            <Fabric dir={this.props.dir}>\r\n                <Flex column>\r\n                    <Flex space=\"between\" vAlign=\"center\">\r\n                        <TabMenu defaultTabIndex={RegisteredEventsTabIndex} activeTabIndex={this.state.activeTabIndex!} tabItems={this.renderTabMenuItems()} onTabIndexChange={this.onTabIndexChange} />\r\n                        <Flex.Item push={this.props.dir === LanguageDirection.Ltr}>\r\n                            <Flex gap=\"gap.medium\" vAlign=\"center\">\r\n                                <MenuButton\r\n                                    className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-medium\" : \"\"}\r\n                                    trigger={\r\n                                        <Button icon={this.renderFilterButtonIcon()}\r\n                                            content={this.localize(\"filterButtonText\")}\r\n                                            onClick={this.onFilterBarToggle}\r\n                                            data-testid=\"filterbutton\"\r\n                                        />}\r\n                                />\r\n                                <Input\r\n                                    inverted\r\n                                    value={this.state.searchText}\r\n                                    icon={<SearchIcon />}\r\n                                    iconPosition={this.props.dir === LanguageDirection.Rtl ? \"start\" : \"end\"}\r\n                                    placeholder={this.localize(\"searchForEventsPlaceholder\")}\r\n                                    input={{ design: { minWidth: \"20rem\", maxWidth: \"20rem\" } }}\r\n                                    onKeyUp={this.onSearchEvents}\r\n                                    onChange={this.onSearchTextChange}\r\n                                    data-testid=\"search_input\"\r\n                                />\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <FilterBar\r\n                        isVisible={this.state.isFilterOpen}\r\n                        isReset={this.state.isResetFilter}\r\n                        categoryList={this.state.categoriesInFilter}\r\n                        createdByList={this.state.lnDTeamMembersInFilter}\r\n                        onFilterBarCloseClick={this.onFilterBarClose}\r\n                        onFilterChange={this.onFilterChange}\r\n                    />\r\n                </Flex>\r\n                {this.renderEvents()}\r\n            </Fabric>\r\n        );\r\n    }\r\n\r\n    /** Renders the mobile view */\r\n    renderMobileView = () => {\r\n        return (\r\n            <Fabric dir={this.props.dir}>\r\n                <Flex column>\r\n                    <Flex space=\"between\">\r\n                        <TabMenu defaultTabIndex={RegisteredEventsTabIndex} activeTabIndex={this.state.activeTabIndex!} tabItems={this.renderTabMenuItems()} onTabIndexChange={this.onTabIndexChange} />\r\n                        <Flex.Item push>\r\n                            <Flex gap=\"gap.medium\" vAlign=\"center\">\r\n                                <MenuButton\r\n                                    trigger={\r\n                                        <Button\r\n                                            text\r\n                                            iconOnly\r\n                                            icon={this.renderFilterButtonIcon()}\r\n                                            onClick={this.onMobileFilterButtonClick}\r\n                                        />\r\n                                    }\r\n                                />\r\n                                <SearchIcon onClick={() => this.setState({ isMobileSearchBoxOpen: !this.state.isMobileSearchBoxOpen })} />\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    {this.state.isMobileSearchBoxOpen && !this.state.isFilterOpen &&\r\n                        <Flex className=\"search-box\" vAlign=\"center\" gap=\"gap.small\">\r\n                            <Input\r\n                                inverted\r\n                                fluid\r\n                                value={this.state.searchText}\r\n                                placeholder={this.localize(\"searchForEventsPlaceholder\")}\r\n                                input={{ design: { minWidth: \"20rem\", width: \"100rem\" } }}\r\n                                onKeyUp={this.onSearchEvents}\r\n                                onChange={this.onSearchTextChange}\r\n                            />\r\n                            <Flex.Item push>\r\n                                <CloseIcon className=\"close-searchbox-icon\" onClick={this.onMobileSearchBoxClose} />\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    }\r\n                </Flex>\r\n                {!this.state.isFilterOpen && this.renderEvents()}\r\n            </Fabric>\r\n        );\r\n    }\r\n\r\n    /** Renders component */\r\n    render() {\r\n        return (\r\n            <div className=\"container-div\">\r\n                <div className=\"my-events-container\">\r\n                    {this.state.isMobileView ? this.renderMobileView() : this.renderDesktopView()}\r\n                    <ToastNotification dir={this.props.dir} notification={this.state.notification} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(MyEvents));","// <copyright file=\"accordion-menu-checkboxes-content.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Input, Button, Provider, Divider, Checkbox } from \"@fluentui/react-northstar\";\r\nimport { SearchIcon } from \"@fluentui/react-icons-northstar\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ICheckBoxItem } from \"../../../models/ICheckBoxItem\";\r\n\r\nimport \"./accordion-menu.css\";\r\n\r\ninterface IAccordionMenuCheckboxesContentProps {\r\n    isOpen: boolean,\r\n    showSearchBar: boolean,\r\n    content: any,\r\n    disableClear: boolean,\r\n    selectedCount: number;\r\n    onCheckboxStateChange: (checkboxState: Array<ICheckBoxItem>) => void\r\n}\r\n\r\nconst MaxItemsToShowInFilter: number = 50;\r\n\r\nconst AccordionCheckboxesContent: React.FunctionComponent<IAccordionMenuCheckboxesContentProps> = props => {\r\n    const localize = useTranslation().t;\r\n    const [data, setCheckbox] = React.useState({ checkboxes: props.content.checkboxes });\r\n    const [filteredCheckboxes, setFilteredCheckboxes] = React.useState(props.content.checkboxes);\r\n    const [searchedString, setSearchString] = React.useState(\"\");\r\n    let [disableClear, setdisableClear] = React.useState(true);\r\n    let [checkBoxClicked, setcheckBoxClicked] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        setFilterCheckboxes(props.content.checkboxes);\r\n    }, []);\r\n\r\n    /**\r\n    *Updates particular checkbox's isChecked state and passes changed state back to parent component.\r\n    *@param key Unique key for checkbox which needs to be updated\r\n    *@param checked Boolean indicating checkbox current value\r\n    */\r\n    const onCheckboxValueChange = (key: string, checked: boolean) => {\r\n        setcheckBoxClicked(true);\r\n\r\n        let checkboxList = data.checkboxes.map((checkbox: ICheckBoxItem) => {\r\n            if (checkbox.key === key) {\r\n                checkbox.isChecked = checked;\r\n            }\r\n            return checkbox;\r\n        });\r\n\r\n        let checkCount: number = checkboxList.reduce((accumulator: number, checkbox: ICheckBoxItem) => {\r\n            return checkbox.isChecked ? accumulator + 1 : accumulator;\r\n        }, 0);\r\n\r\n        setdisableClear(checkCount <= 0);\r\n\r\n        let filteredItems = checkboxList;\r\n\r\n        if (searchedString.trim().length) {\r\n            filteredItems = checkboxList.filter((item: ICheckBoxItem) => {\r\n                return item.title.toLowerCase().includes(searchedString.toLowerCase());\r\n            });\r\n        }\r\n\r\n        setFilterCheckboxes(filteredItems);\r\n        props.onCheckboxStateChange(checkboxList);\r\n    }\r\n\r\n    const setFilterCheckboxes = (filterItems: any) => {\r\n        if (!filterItems) {\r\n            filterItems = [];\r\n        }\r\n\r\n        let items = [...filterItems];\r\n        let itemsToRender = items.slice(0, MaxItemsToShowInFilter);\r\n        setFilteredCheckboxes(itemsToRender);\r\n    }\r\n\r\n    /**\r\n    *Sets all checkbox's isChecked to false to unselect all and passes changed state back to parent component.\r\n    */\r\n    const deSelectAll = () => {\r\n        let checkboxList = data.checkboxes.map((checkbox: ICheckBoxItem) => {\r\n            checkbox.isChecked = false\r\n            return checkbox;\r\n        });\r\n\r\n        let filteredItems = checkboxList;\r\n\r\n        if (searchedString.trim().length) {\r\n            filteredItems = checkboxList.filter((item: ICheckBoxItem) => {\r\n                return item.title.toLowerCase().includes(searchedString.toLowerCase());\r\n            });\r\n        }\r\n\r\n        setFilterCheckboxes(filteredItems);\r\n        props.onCheckboxStateChange(checkboxList);\r\n        setdisableClear(true);\r\n        setcheckBoxClicked(true);\r\n    }\r\n\r\n    const onSearchChange = (text: string) => {\r\n        setSearchString(text);\r\n\r\n        if (text.trim().length > 0) {\r\n            let filteredItems = data.checkboxes.filter((item: ICheckBoxItem) => {\r\n                return item.title.toLowerCase().includes(text.toLowerCase()) === true;\r\n            });\r\n\r\n            setFilterCheckboxes(filteredItems);\r\n        }\r\n        else {\r\n            setFilterCheckboxes(data.checkboxes);\r\n        }\r\n    }\r\n\r\n    const getSelectedCountString = () => {\r\n            return props.selectedCount.toString();\r\n    }\r\n\r\n    return (\r\n        props.isOpen ? \r\n            <Provider>\r\n                <div className=\"accordion-content-items-wrapper\">\r\n                    {props.showSearchBar && <div className=\"accordion-content-items-headerfooter\">\r\n                        <Input icon={<SearchIcon />} placeholder={localize(\"searchPlaceholder\")} value={searchedString} fluid onChange={(event: any) => onSearchChange(event.target.value)} />\r\n                    </div>}\r\n                    <Divider className=\"accordion-filter-popup-menu-divider\" />\r\n                    <div className=\"accordion-content-items-headerfooter\">\r\n                        <Flex gap=\"gap.small\" vAlign=\"center\" hAlign=\"end\">\r\n                            <Flex.Item push>\r\n                                <div></div>\r\n                            </Flex.Item>\r\n                            <Button disabled={checkBoxClicked ? disableClear : props.disableClear} className={props.selectedCount === 0 ? \"clear-button \" : \"clear-button enable-clear\"} size=\"small\" text onClick={() => deSelectAll()} content={props.selectedCount > 0 ? localize(\"clear\") + \"(\" + getSelectedCountString() + \")\" : localize(\"clear\")} />\r\n                        </Flex>\r\n                    </div>\r\n                    <div className=\"accordion-content-items-body\">\r\n                        {\r\n                            filteredCheckboxes.map((checkbox: ICheckBoxItem) => {\r\n                                if (checkbox.title.trim().length) {\r\n                                    return (\r\n                                        <Flex gap=\"gap.small\">\r\n                                            <Checkbox className=\"checkbox-wrapper\" label={checkbox.checkboxLabel} key={checkbox.key} checked={checkbox.isChecked} onChange={(key, data: any) => onCheckboxValueChange(checkbox.key, data.checked)} />\r\n                                        </Flex>\r\n                                    );\r\n                                }\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </Provider>\r\n            : <></>\r\n    );\r\n}\r\n\r\nexport default React.memo(AccordionCheckboxesContent);","// <copyright file=\"popup-menu-radiogroup-content.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, RadioGroup } from \"@fluentui/react-northstar\";\r\n\r\nimport \"./accordion-menu.css\";\r\n\r\ninterface IAccordionMenuRadiogroupContentProps {\r\n    isOpen: boolean,\r\n    content: any,\r\n    selectedValue: number,\r\n    onRadiogroupStateChange: (selectedValue: number) => void\r\n}\r\n\r\nconst AccordionRadiogroupContent: React.FunctionComponent<IAccordionMenuRadiogroupContentProps> = props => {\r\n\r\n    return (\r\n        props.isOpen ?\r\n        <>\r\n            <div className=\"accordion-content-items-wrapper radio-popup-content\">\r\n                <div className=\"accordion-content-items-body\">\r\n                    {   \r\n                        <Flex gap=\"gap.small\">\r\n\t\t\t\t            <RadioGroup\r\n\t\t\t\t\t            defaultCheckedValue={props.selectedValue}\r\n\t\t\t\t\t            vertical\r\n\t\t\t\t\t            items={props.content.radioGroupItems}\r\n\t\t\t\t\t            onCheckedValueChange={(event, data: any) => props.onRadiogroupStateChange(data.value)}\r\n\t\t\t\t            />\r\n\t\t\t            </Flex>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n        : <></>\r\n    );\r\n}\r\n\r\nexport default React.memo(AccordionRadiogroupContent);","// <copyright file=\"accordion-menu-wrapper.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Text, Flex } from \"@fluentui/react-northstar\";\r\nimport { ChevronDownIcon } from \"@fluentui/react-icons-northstar\";\r\nimport AccordionCheckboxesContent from \"./accordion-menu-checkboxes-content\";\r\nimport AccordionRadiogroupContent from \"./accordion-menu-radiogroup-content\";\r\n\r\nimport \"./accordion-menu.css\";\r\n\r\ninterface IAccordionMenuWrapperProps {\r\n    isFilterOpen: boolean,\r\n    checkboxes?: Array<any>,\r\n    radioGroup?: Array<any>,\r\n    title: string,\r\n    selectedSortBy?: number,\r\n    showSearchBar?: boolean,\r\n    selectedCount: number;\r\n    onCheckboxStateChange: (typeState: Array<any>) => void,\r\n    onRadiogroupStateChange: (selectedValue: number) => void,\r\n    onFilterOpenChange: (isOpen: boolean) => void\r\n}\r\n\r\nconst AccordionMenuWrapper: React.FunctionComponent<IAccordionMenuWrapperProps> = props => {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const onAccordionOpenChange = () => {\r\n        setOpen(!open);\r\n        props.onFilterOpenChange(!open);\r\n    }\r\n\r\n    if (props.checkboxes) {\r\n        return (\r\n            <div className=\"accordion-container\">\r\n                <div className=\"accordion-main\" onClick={() => onAccordionOpenChange()}>\r\n                    <Flex><Flex.Item><Text content={props.title} /></Flex.Item><Flex.Item push><ChevronDownIcon /></Flex.Item></Flex>\r\n                </div>\r\n                <AccordionCheckboxesContent isOpen={props.isFilterOpen} disableClear={props.selectedCount === 0} selectedCount={props.selectedCount} showSearchBar={props.showSearchBar!} content={{ checkboxes: props.checkboxes, title: props.title }} onCheckboxStateChange={props.onCheckboxStateChange} />\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.radioGroup) {\r\n        return (\r\n            <div className=\"accordion-container\">\r\n                <div className=\"accordion-main\" onClick={() => onAccordionOpenChange()}>\r\n                    <Flex><Flex.Item><Text content={props.title} /></Flex.Item><Flex.Item push><ChevronDownIcon /></Flex.Item></Flex>\r\n                </div>\r\n                <AccordionRadiogroupContent isOpen={props.isFilterOpen} selectedValue={props.selectedSortBy!} content={{ radioGroupItems: props.radioGroup, title: props.title }} onRadiogroupStateChange={props.onRadiogroupStateChange} />\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return (<></>);\r\n    }\r\n}\r\n\r\nexport default React.memo(AccordionMenuWrapper);","// <copyright file=\"filter-bar.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text, Provider, Loader, Button } from \"@fluentui/react-northstar\";\r\nimport { initializeIcons } from \"@uifabric/icons\";\r\nimport AccordionMenuWrapper from \"../../components/common/accordion-menu/accordion-menu-wrapper\";\r\nimport { ICheckBoxItem } from \"../../models/ICheckBoxItem\";\r\nimport { IRadioGroupItem } from \"../../models/IRadioGroupItem\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { TFunction } from \"i18next\";\r\nimport { getLocalizedSortBy } from \"../../helpers/localized-constants\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport { ITeamsChannelMember } from \"../../models/ITeamsChannelMember\";\r\nimport Resources from \"../../constants/resources\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\nimport { getEventCategoriesAsync } from \"../../api/create-event-api\";\r\nimport { getAllLnDTeamMembersAsync } from \"../../api/LnD-team-api\";\r\nimport { SortBy } from \"../../models/sort-by\";\r\n\r\nimport \"./mobile-filter-bar.css\";\r\n\r\ninterface IMobileFilterBarState {\r\n    categoryList: Array<ICheckBoxItem>;\r\n    createdByList: Array<ICheckBoxItem>;\r\n    selectedSortBy: number;\r\n    searchText: string;\r\n    screenWidth: number;\r\n    createdBySelectedCount: number;\r\n    categorySelectedCount: number;\r\n    isLoading: boolean;\r\n    isCategoriesFilterOpen: boolean,\r\n    isCreatedByFilterOpen: boolean,\r\n    isSortByFilterOpen: boolean\r\n}\r\n\r\ninterface IMobileFilterBarProps extends WithTranslation, IWithContext  {\r\n}\r\n\r\ninterface IPostType {\r\n    name: string;\r\n    id: number;\r\n    color: string;\r\n}\r\n\r\nclass MobileFilterBar extends React.Component<IMobileFilterBarProps, IMobileFilterBarState> {\r\n    localize: TFunction;\r\n    readonly sortByList: Array<IRadioGroupItem> = [];\r\n    isFilterStateChanged: boolean;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        initializeIcons();\r\n        this.localize = this.props.t;\r\n        this.sortByList = getLocalizedSortBy(this.localize).map((sortBy: IPostType) => { return { key: sortBy.id, label: sortBy.name, value: sortBy.id, name: sortBy.name } });\r\n        this.isFilterStateChanged = false;\r\n\r\n        this.state = {\r\n            selectedSortBy: this.sortByList[0].value,\r\n            categoryList: [],\r\n            createdByList: [],\r\n            searchText: \"\",\r\n            screenWidth: 800,\r\n            createdBySelectedCount: 0,\r\n            categorySelectedCount: 0,\r\n            isLoading: true,\r\n            isCategoriesFilterOpen: false,\r\n            isCreatedByFilterOpen: false,\r\n            isSortByFilterOpen: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadFilterItems();\r\n\r\n        window.addEventListener(\"resize\", this.resize.bind(this));\r\n        this.resize();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.resize.bind(this));\r\n    }\r\n\r\n    /** Get all event categories and load in filter */\r\n    loadEventCategories = async () => {\r\n        let response = await getEventCategoriesAsync();\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n                this.setState({\r\n                    categoryList: response.data.map((value: ICategory) => {\r\n                        return { isChecked: false, key: value.categoryId, title: value.name, checkboxLabel: <Text content={value.name} /> };\r\n                    })\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Get all LnD teams' members and load in filter */\r\n    loadAllLnDTeamMembers = async () => {\r\n        let response = await getAllLnDTeamMembersAsync();\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n            if (response && response.status === ResponseStatus.OK && response.data?.length > 0) {\r\n                this.setState({\r\n                    createdByList: response.data.map((value: ITeamsChannelMember) => {\r\n                        return { isChecked: false, key: value.aadObjectId, title: value.name, checkboxLabel: <Text content={value.name} /> };\r\n                    })\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Populates the filter items */\r\n    loadFilterItems = async () => {\r\n        let eventCategories = this.loadEventCategories();\r\n        let lndTeamMembers = this.loadAllLnDTeamMembers();\r\n\r\n        Promise.all([eventCategories, lndTeamMembers])\r\n            .finally(() => {\r\n                let filteredCategories = localStorage.getItem(Resources.userEventsMobileFilteredCategoriesLocalStorageKey);\r\n                let filteredUsers = localStorage.getItem(Resources.userEventsMobileFilteredUsersLocalStorageKey);\r\n                let sortBy = localStorage.getItem(Resources.userEventsMobileSortByFilterLocalStorageKey);\r\n\r\n                let categoryList = [...this.state.categoryList];\r\n                let categorySelectedCount: number = 0;\r\n\r\n                if (filteredCategories?.trim().length && categoryList?.length > 0) {\r\n                    let categories = categoryList.filter((category: ICheckBoxItem) => filteredCategories && filteredCategories.indexOf(category.key) > -1);\r\n\r\n                    for (let i = 0; i < categories.length; i++) {\r\n                        categories[i].isChecked = true;\r\n                        categorySelectedCount += 1;\r\n                    }\r\n                }\r\n\r\n                let createdByList = [...this.state.createdByList];\r\n                let createdBySelectedCount: number = 0;\r\n\r\n                if (filteredUsers?.trim().length && createdByList?.length > 0) {\r\n                    let users = createdByList.filter((user: ICheckBoxItem) => filteredUsers && filteredUsers.indexOf(user.key) > -1);\r\n\r\n                    for (let i = 0; i < users.length; i++) {\r\n                        users[i].isChecked = true;\r\n                        createdBySelectedCount += 1;\r\n                    }\r\n                }\r\n\r\n                let sortByFilter = this.state.selectedSortBy;\r\n\r\n                if (sortBy?.trim().length) {\r\n                    let sortByValue = this.sortByList?.find((sortByItem: IRadioGroupItem) => sortByItem.key.toString() === sortBy?.trim());\r\n\r\n                    if (sortByValue) {\r\n                        sortByFilter = sortByValue.key;\r\n                    }\r\n                }\r\n\r\n                this.setState({\r\n                    categoryList,\r\n                    categorySelectedCount,\r\n                    createdByList,\r\n                    createdBySelectedCount,\r\n                    selectedSortBy: sortByFilter,\r\n                    isLoading: false\r\n                });\r\n            });\r\n    }\r\n\r\n    resize = () => {\r\n        if (window.innerWidth !== this.state.screenWidth) {\r\n            this.setState({ screenWidth: window.innerWidth });\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t*Sets state of 'Category list' filter item when checkbox value changes.\r\n\t*@param categoryValues Array of 'category' checkboxes with updated user selection\r\n    */\r\n    onCategoryStateChange = (categoryValues: Array<ICheckBoxItem>) => {\r\n        let selectedCategories = categoryValues?.filter((value: ICheckBoxItem) => {\r\n            return value.isChecked;\r\n        });\r\n\r\n        this.setState({\r\n            categoryList: categoryValues,\r\n            categorySelectedCount: selectedCategories && selectedCategories.length\r\n        }, () => this.isFilterStateChanged = true);\r\n    }\r\n\r\n\t/**\r\n\t*Sets state of 'Created by' filter item when checkbox value changes.\r\n\t*@param createdByValues Array of 'created by' checkboxes with updated user selection\r\n    */\r\n    onCreatedByStateChange = (createdByValues: Array<ICheckBoxItem>) => {\r\n        let selectedUsers = createdByValues?.filter((value: ICheckBoxItem) => {\r\n            return value.isChecked;\r\n        });\r\n\r\n        this.setState({\r\n            createdByList: createdByValues,\r\n            createdBySelectedCount: selectedUsers ? selectedUsers.length : 0\r\n        }, () => this.isFilterStateChanged = true);\r\n    }\r\n\r\n\t/**\r\n\t*Sets state of selected sort by item.\r\n\t*@param selectedSortBy Selected 'sort by' value\r\n    */\r\n    onSortByStateChange = (selectedSortBy: number) => {\r\n        this.setState({ selectedSortBy: selectedSortBy }, () => this.isFilterStateChanged = true);\r\n    }\r\n\r\n\t/**\r\n\t*Removes all filters and hides filter bar.\r\n\t*@param event Event object for input\r\n    */\r\n    onCloseIconClick = () => {\r\n        if (this.state.searchText.trim().length > 0) {\r\n            this.setState({ searchText: \"\" });\r\n        }\r\n\r\n        if (this.state.categoryList.filter((sharedBy: ICheckBoxItem) => { return sharedBy.isChecked }).length) {\r\n            let updatedList = this.state.categoryList.map((sharedBy: ICheckBoxItem) => { sharedBy.isChecked = false; return sharedBy; });\r\n            this.setState({ categoryList: updatedList });\r\n        }\r\n\r\n        if (this.state.createdByList.filter((tag: ICheckBoxItem) => { return tag.isChecked }).length) {\r\n            let updatedList = this.state.createdByList.map((tag: ICheckBoxItem) => { tag.isChecked = false; return tag; });\r\n            this.setState({ createdByList: updatedList });\r\n        }\r\n\r\n        this.setState({ selectedSortBy: this.sortByList[0].value });\r\n    }\r\n\r\n    onCategoriesFilterOpenStateChange = (isOpen: boolean) => {\r\n        if (isOpen) {\r\n            this.setState({ isCategoriesFilterOpen: true, isCreatedByFilterOpen: false, isSortByFilterOpen: false });\r\n        }\r\n        else {\r\n            this.setState({ isCategoriesFilterOpen: false });\r\n        }\r\n    }\r\n\r\n    onCreatedByFilterOpenStateChange = (isOpen: boolean) => {\r\n        if (isOpen) {\r\n            this.setState({ isCategoriesFilterOpen: false, isCreatedByFilterOpen: true, isSortByFilterOpen: false });\r\n        }\r\n        else {\r\n            this.setState({ isCreatedByFilterOpen: false });\r\n        }\r\n    }\r\n\r\n    onSortByFilterOpenStateChange = (isOpen: boolean) => {\r\n        if (isOpen) {\r\n            this.setState({ isCategoriesFilterOpen: false, isCreatedByFilterOpen: false, isSortByFilterOpen: true });\r\n        }\r\n        else {\r\n            this.setState({ isSortByFilterOpen: false });\r\n        }\r\n    }\r\n\r\n    onClearFilter = () => {\r\n        let categoryList = this.state.categoryList ? [...this.state.categoryList] : [];\r\n        let createdByList = this.state.createdByList ? [...this.state.createdByList] : [];\r\n\r\n        this.setState({\r\n            categoryList: categoryList.map((value: ICheckBoxItem) => {\r\n                value.isChecked = false;\r\n                return value;\r\n            }),\r\n            categorySelectedCount: 0,\r\n            createdByList: createdByList.map((value: ICheckBoxItem) => {\r\n                value.isChecked = false;\r\n                return value;\r\n            }),\r\n            createdBySelectedCount: 0,\r\n            selectedSortBy: SortBy.Recent\r\n        }, () => {\r\n            this.isFilterStateChanged = true;\r\n        });\r\n    }\r\n\r\n    onApplyFilter = () => {\r\n        let categories: Array<ICheckBoxItem> = this.state.categoryList ? [...this.state.categoryList] : [];\r\n\r\n        let selectedCategories = categories.filter((category: ICheckBoxItem) => {\r\n            return category.isChecked;\r\n        });\r\n\r\n        let selectedCategoryIds: Array<string> = selectedCategories.map((category: ICheckBoxItem) => { return category.key });\r\n        localStorage.setItem(Resources.userEventsMobileFilteredCategoriesLocalStorageKey, selectedCategoryIds.join(\";\"));\r\n\r\n        let users: Array<ICheckBoxItem> = this.state.createdByList ? [...this.state.createdByList] : [];\r\n\r\n        let selectedUsers = users.filter((user: ICheckBoxItem) => {\r\n            return user.isChecked;\r\n        });\r\n\r\n        let selectedUserIds: Array<string> = selectedUsers.map((user: ICheckBoxItem) => { return user.key });\r\n        localStorage.setItem(Resources.userEventsMobileFilteredUsersLocalStorageKey, selectedUserIds.join(\";\"));\r\n\r\n        localStorage.setItem(Resources.userEventsMobileSortByFilterLocalStorageKey, this.state.selectedSortBy.toString());\r\n\r\n        this.props.microsoftTeams.tasks.submitTask({ isFilterStateChanged: this.isFilterStateChanged });\r\n    }\r\n\r\n\t/**\r\n\t* Renders the component\r\n\t*/\r\n    public render(): JSX.Element {\r\n        if (this.state.isLoading) {\r\n            return <Provider><Loader className=\"loader\" /></Provider>\r\n        }\r\n\r\n        return (\r\n            <Provider className=\"mobile-filter-bar-container\">\r\n                <Flex className=\"mobile-filter-buttons\">\r\n                    <Flex.Item push>\r\n                        <Flex gap=\"gap.small\" vAlign=\"center\">\r\n                            <Button content={this.localize(\"mobileFilterClearButtonText\")} onClick={this.onClearFilter} />\r\n                            <Button primary content={this.localize(\"mobileFilterApplyButtonText\")} onClick={this.onApplyFilter} />\r\n                        </Flex>\r\n                    </Flex.Item>\r\n                </Flex>\r\n                <Flex className=\"filter-bar mobile-filter-wrapper\">\r\n                    <div className=\"menu-wrapper\">\r\n                        <AccordionMenuWrapper isFilterOpen={this.state.isCategoriesFilterOpen} title={`${this.localize(\"category\")} ${this.state.categorySelectedCount > 0 ? `(${this.state.categorySelectedCount} ${this.localize(\"selected\")})` : \"\"}`} showSearchBar={true} selectedSortBy={this.state.selectedSortBy!} selectedCount={this.state.categorySelectedCount} checkboxes={this.state.categoryList} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCategoryStateChange} onFilterOpenChange={this.onCategoriesFilterOpenStateChange} />\r\n                        <AccordionMenuWrapper isFilterOpen={this.state.isCreatedByFilterOpen} title={`${this.localize(\"createdBy\")} ${this.state.createdBySelectedCount > 0 ? `(${this.state.createdBySelectedCount} ${this.localize(\"selected\")})` : \"\"}`} showSearchBar={true} selectedSortBy={this.state.selectedSortBy!} selectedCount={this.state.createdBySelectedCount} checkboxes={this.state.createdByList} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCreatedByStateChange} onFilterOpenChange={this.onCreatedByFilterOpenStateChange} />\r\n                        <AccordionMenuWrapper isFilterOpen={this.state.isSortByFilterOpen} title={this.sortByList[this.state.selectedSortBy!].name} selectedCount={this.state.createdBySelectedCount} selectedSortBy={this.state.selectedSortBy!} radioGroup={this.sortByList} onRadiogroupStateChange={this.onSortByStateChange} onCheckboxStateChange={this.onCreatedByStateChange} onFilterOpenChange={this.onSortByFilterOpenStateChange} />\r\n                    </div>\r\n                </Flex>\r\n            </Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(MobileFilterBar));","// <copyright file=\"manage-events-menu.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { EventStatus } from \"../../models/event-status\";\r\nimport { MenuButton, Button, MenuItemProps, MenuShorthandKinds, ShorthandCollection, BellIcon } from \"@fluentui/react-northstar\";\r\nimport { UserFriendsIcon, EditIcon, ArrowDownIcon, CloseIcon, MoreIcon } from \"@fluentui/react-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport moment from \"moment\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\ninterface IManageEventsMenuProps extends WithTranslation {\r\n    eventDetails: IEvent,\r\n    onCloseRegistration: (eventId: string) => void,\r\n    onEditEvent: (eventId: string) => void,\r\n    onExportDetails: (eventId: string, eventName: string) => void,\r\n    onSendReminder: (eventId: string) => void,\r\n    onCancelEvent: (eventId: string) => void,\r\n    onDeleteDraftEvent: (eventId: string, eventName: string) => void,\r\n    dir: LanguageDirection\r\n}\r\n\r\n/**\r\n * This component renders menu based on event status\r\n * @param props The props of type IManageEventsMenu\r\n */\r\nconst ManageEventsMenu: React.FunctionComponent<IManageEventsMenuProps> = props => {\r\n    const localize: TFunction = props.t;\r\n\r\n    /** Gets menu items for active events */\r\n    const getActiveEventsMenu: ShorthandCollection<MenuItemProps, MenuShorthandKinds> = [\r\n        {\r\n            icon: <EditIcon outline />,\r\n            content: localize(\"editEventInformation\"),\r\n            onClick: () => props.onEditEvent(props.eventDetails.eventId)\r\n        },\r\n        {\r\n            icon: <ArrowDownIcon />,\r\n            content: localize(\"exportRegistrationDetails\"),\r\n            onClick: () => props.onExportDetails(props.eventDetails.eventId, props.eventDetails.name)\r\n        },\r\n        {\r\n            icon: <BellIcon outline />,\r\n            content: localize(\"sendReminder\"),\r\n            onClick: () => props.onSendReminder(props.eventDetails.eventId)\r\n        },\r\n        {\r\n            kind: \"divider\"\r\n        },\r\n        {\r\n            icon: <CloseIcon outline />,\r\n            content: localize(\"cancelEvent\"),\r\n            onClick: () => props.onCancelEvent(props.eventDetails.eventId)\r\n        }\r\n    ]\r\n\r\n    /** Gets menu items for draft events */\r\n    const getDraftEventsMenu: ShorthandCollection<MenuItemProps, MenuShorthandKinds> = [\r\n        {\r\n            icon: <EditIcon outline />,\r\n            content: localize(\"editEventInformation\"),\r\n            onClick: () => props.onEditEvent(props.eventDetails.eventId)\r\n        },\r\n        {\r\n            kind: \"divider\"\r\n        },\r\n        {\r\n            icon: <CloseIcon outline />,\r\n            content: localize(\"deleteDraft\"),\r\n            onClick: () => props.onDeleteDraftEvent(props.eventDetails.eventId, props.eventDetails.name)\r\n        }\r\n    ]\r\n\r\n    /** Gets menu items for completed events */\r\n    const getCompletedEventsMenu: ShorthandCollection<MenuItemProps, MenuShorthandKinds> = [\r\n        {\r\n            icon: <ArrowDownIcon />,\r\n            content: localize(\"exportRegistrationDetails\"),\r\n            onClick: () => props.onExportDetails(props.eventDetails.eventId, props.eventDetails.name)\r\n        }\r\n    ]\r\n\r\n    /** Gets menu based on event status */\r\n    const getMenuItems = () => {\r\n        switch (props.eventDetails.status) {\r\n            case EventStatus.Draft:\r\n                return getDraftEventsMenu;\r\n\r\n            case EventStatus.Active:\r\n                if (new Date() < moment.utc(props.eventDetails.endDate).local().toDate()) {\r\n                    if (props.eventDetails.isRegistrationClosed) {\r\n                        return getActiveEventsMenu;\r\n                    }\r\n\r\n                    getActiveEventsMenu.unshift(\r\n                        {\r\n                            icon: <UserFriendsIcon outline />,\r\n                            content: localize(\"closeRegistration\"),\r\n                            onClick: () => props.onCloseRegistration(props.eventDetails.eventId)\r\n                        });\r\n\r\n                    return getActiveEventsMenu;\r\n                }\r\n\r\n                return getCompletedEventsMenu;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MenuButton\r\n            trigger={<Button text iconOnly icon={<MoreIcon />} />}\r\n            menu={{\r\n                items: getMenuItems()\r\n            }}\r\n            position=\"before\"\r\n            className={ props.dir === LanguageDirection.Rtl ? \"ltr-direction\" : \"\"}\r\n        />\r\n    );\r\n}\r\n\r\nexport default withTranslation()(ManageEventsMenu);","// <copyright file=\"manage-events-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport Constants from \"../constants/constants\";\r\nimport { getAPIRequestConfigParams } from \"../helpers/api-helper\";\r\n\r\n/**\r\n * Gets LnD team events\r\n * @param searchString The events to load with matching search text\r\n * @param pageCount The page count of which events to be fetched\r\n * @param eventSearchType The events of particular status type that need to be retrieved\r\n * @param teamId The LnD team ID\r\n */\r\nexport const getEventsAsync = async (searchString: string, pageCount: number, eventSearchType: number, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/EventWorkflow`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({\r\n        searchString: encodeURIComponent(searchString),\r\n        eventSearchType: eventSearchType,\r\n        teamId: teamId,\r\n        pageCount: pageCount\r\n    });\r\n\r\n    return await axios.get(url, config);\r\n}\r\n\r\n/**\r\n * Gets event details\r\n * @param eventId The event ID of which details need to be retrieved\r\n * @param teamId The LnD team ID\r\n */\r\nexport const getEventAsync = async (eventId: string, teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/Event`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.get(url, config);\r\n}\r\n\r\n/**\r\n * Closes the event registrations\r\n * @param teamId The LnD team ID\r\n * @param eventId The event ID of which registrations needs to be closed\r\n */\r\nexport const closeEventRegistrationsAsync = async (teamId: string, eventId: string) => {\r\n    let url = `${Constants.apiBaseURL}/EventWorkflow/CloseEventRegistrations`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.patch(url, null, config);\r\n}\r\n\r\n/**\r\n * Cancels an event to occur \r\n * @param teamId The LnD team ID\r\n * @param eventId The event ID that needs to be cancelled\r\n */\r\nexport const cancelEventAsync = async (teamId: string, eventId: string) => {\r\n    let url = `${Constants.apiBaseURL}/EventWorkflow/CancelEvent`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.patch(url, null, config);\r\n}\r\n\r\n/**\r\n * \r\n * @param teamId The LnD team ID\r\n * @param eventId The draft event ID that needs to be deleted\r\n */\r\nexport const deleteDraftEventAsync = async (teamId: string, eventId: string) => {\r\n    let url = `${Constants.apiBaseURL}/EventWorkflow/delete-draft`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.delete(url, config);\r\n}\r\n\r\n/**\r\n * Exports event details to CSV file\r\n * @param teamId The LnD team ID\r\n * @param eventId The event ID that of which details needs to be exported\r\n */\r\nexport const exportEventDetailsToCSV = async (teamId: string, eventId: string) => {\r\n    let url = `${Constants.apiBaseURL}/eventfiles/ExportEventDetailsToCSV`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.get(url, config);\r\n}\r\n\r\n/**\r\n * Sends reminder to the users registered for the event\r\n * @param teamId The LnD team ID\r\n * @param eventId The event ID\r\n */\r\nexport const sendReminder = async (teamId: string, eventId: string) => {\r\n    let url = `${Constants.apiBaseURL}/EventWorkflow/SendReminder`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ eventId: eventId, teamId: teamId });\r\n\r\n    return await axios.post(url, null, config);\r\n}","// <copyright file=\"manage-events.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport moment from \"moment\";\r\nimport { Flex, Table, Button, Input, Text, TableRowProps, Loader, SplitButton, MenuItemProps, List, CloseIcon } from \"@fluentui/react-northstar\";\r\nimport { AddIcon, SearchIcon, MoreIcon } from \"@fluentui/react-northstar\";\r\nimport TabMenu from \"../tab-menu/tab-menu\";\r\nimport ManageEventsMenu from \"./manage-events-menu\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { EventSearchType } from \"../../models/event-search-type\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { getEventsAsync, exportEventDetailsToCSV, sendReminder } from \"../../api/manage-events-api\";\r\nimport Constants, { ResponseStatus } from \"../../constants/constants\";\r\nimport NoContent from \"../no-content-page/no-content-page\"\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { EventType } from \"../../models/event-type\";\r\nimport { EventStatus } from \"../../models/event-status\";\r\nimport { IToastNotification } from \"../../models/IToastNotification\";\r\nimport ToastNotification from \"../toast-notification/toast-notification\";\r\nimport { ActivityStatus } from \"../../models/activity-status\";\r\nimport { EventOperationType } from \"../../models/event-operation-type\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { Fabric } from \"@fluentui/react\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\nimport \"../manage-events/manage-events.css\";\r\n\r\nconst DraftEventsTabIndex: number = 0;\r\nconst ActiveEventsTabIndex: number = 1;\r\nconst CompletedEventsTabIndex: number = 2;\r\n\r\ninterface IManageEventsState {\r\n    activeTabIndex: number | string,\r\n    draftEvents: Array<IEvent>,\r\n    activeEvents: Array<IEvent>,\r\n    completedEvents: Array<IEvent>,\r\n    isLoading: boolean,\r\n    infiniteScrollKey: number,\r\n    loadMoreEvents: boolean,\r\n    isInitialLoadComplete: boolean,\r\n    isMobileView: boolean,\r\n    notification: IToastNotification,\r\n    searchText: string,\r\n    isMobileSearchBoxOpen: boolean\r\n}\r\n\r\ninterface IManageEventsProps extends WithTranslation, IWithContext {\r\n}\r\n\r\n/** This class manages all the events created by LnD team */\r\nclass ManageEvents extends React.Component<IManageEventsProps, IManageEventsState> {\r\n    readonly localize: TFunction;\r\n    draftEventsCount: number;\r\n    completedEventsCount: number;\r\n    activeEventsCount: number;\r\n    teamId: string;\r\n    timeout: number | null;\r\n    eventsScrollAreaRef: any;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.localize = this.props.t;\r\n        this.teamId = \"\";\r\n        this.timeout = null;\r\n        this.draftEventsCount = -1;\r\n        this.completedEventsCount = -1;\r\n        this.activeEventsCount = -1;\r\n        this.eventsScrollAreaRef = null;\r\n\r\n        this.state = {\r\n            activeTabIndex: ActiveEventsTabIndex,\r\n            draftEvents: [],\r\n            activeEvents: [],\r\n            completedEvents: [],\r\n            isLoading: true,\r\n            infiniteScrollKey: 0,\r\n            loadMoreEvents: false,\r\n            isInitialLoadComplete: false,\r\n            isMobileView: false,\r\n            notification: { id: 0, message: \"\", type: ActivityStatus.None },\r\n            searchText: \"\",\r\n            isMobileSearchBoxOpen: false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets teams context from HOC as props\r\n     */\r\n    componentWillReceiveProps= async (nextProps: IManageEventsProps) => {\r\n        if (this.props.teamsContext !== nextProps.teamsContext) {\r\n            if (nextProps.teamsContext) {\r\n                this.teamId = nextProps.teamsContext.teamId!;\r\n\r\n                if (this.activeEventsCount === -1 && this.draftEventsCount === -1 && this.completedEventsCount === -1) {\r\n                    this.activeEventsCount = this.draftEventsCount = this.completedEventsCount = 0;\r\n\r\n                    let activeEvents = await this.getEventsAsync(0, EventSearchType.ActiveEventsForTeam);\r\n                    let draftEvents = await this.getEventsAsync(0, EventSearchType.DraftEventsForTeam);\r\n                    let completedEvents = await this.getEventsAsync(0, EventSearchType.CompletedEventsForTeam);\r\n\r\n                    this.setTotalEventsCount(EventSearchType.ActiveEventsForTeam, activeEvents.length);\r\n                    this.setTotalEventsCount(EventSearchType.DraftEventsForTeam, draftEvents.length);\r\n                    this.setTotalEventsCount(EventSearchType.CompletedEventsForTeam, completedEvents.length);\r\n\r\n                    this.getEvents();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.onScreenSizeChange.bind(this));\r\n        this.onScreenSizeChange();\r\n    }\r\n\r\n    /** The HTTP GET call to get events of LnD team based on event status */\r\n    getEventsAsync = async (pageNumber: number, eventSearchType: EventSearchType) => {\r\n        let response = await getEventsAsync(this.state.searchText, pageNumber, eventSearchType, this.teamId);\r\n\r\n        let events: Array<IEvent> = [];\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data) {\r\n            events = response.data;\r\n        }\r\n\r\n        return events;\r\n    }\r\n\r\n    /** Loads the events details on UI */\r\n    loadEvents = async (pageNumber: number, eventSearchType: EventSearchType) => {\r\n        let events: Array<IEvent> = await this.getEventsAsync(pageNumber, eventSearchType);\r\n\r\n        if (events) {\r\n            let loadMoreEvents: boolean = events.length < Constants.lazyLoadEventsCount ? false : true;\r\n\r\n            switch (eventSearchType) {\r\n                case EventSearchType.DraftEventsForTeam:\r\n                    if (pageNumber === 0) {\r\n                        this.setTotalEventsCount(EventSearchType.DraftEventsForTeam, events.length);\r\n                        this.setState({ draftEvents: [...events], loadMoreEvents });\r\n                    }\r\n                    else {\r\n                        let draftEvents = [...this.state.draftEvents];\r\n                        this.setState({ draftEvents: [...draftEvents, ...events], loadMoreEvents });\r\n                    }\r\n                    break;\r\n\r\n                case EventSearchType.CompletedEventsForTeam:\r\n                    if (pageNumber === 0) {\r\n                        this.setTotalEventsCount(EventSearchType.CompletedEventsForTeam, events.length);\r\n                        this.setState({ completedEvents: [...events], loadMoreEvents });\r\n                    }\r\n                    else {\r\n                        let completedEvents = [...this.state.completedEvents];\r\n                        this.setState({ completedEvents: [...completedEvents, ...events], loadMoreEvents });\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    if (pageNumber === 0) {\r\n                        this.setTotalEventsCount(EventSearchType.ActiveEventsForTeam, events.length);\r\n                        this.setState({ activeEvents: [...events], loadMoreEvents });\r\n                    }\r\n                    else {\r\n                        let activeEvents = [...this.state.activeEvents];\r\n                        this.setState({ activeEvents: [...activeEvents, ...events], loadMoreEvents });\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            if (pageNumber === 0) {\r\n                this.setTotalEventsCount(eventSearchType, 0);\r\n            }\r\n\r\n            this.setState({ loadMoreEvents: false });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the total event count for selected tab\r\n     * @param count The total count to set\r\n     */\r\n    setTotalEventsCount = (eventSeatchType: EventSearchType, count: number) => {\r\n        if (!this.state.searchText || this.state.searchText.trim() === \"\") {\r\n            switch (eventSeatchType) {\r\n                case EventSearchType.DraftEventsForTeam:\r\n                    this.draftEventsCount = count;\r\n                    break;\r\n\r\n                case EventSearchType.CompletedEventsForTeam:\r\n                    this.completedEventsCount = count;\r\n                    break;\r\n\r\n                case EventSearchType.ActiveEventsForTeam:\r\n                    this.activeEventsCount = count;\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets events based on currently selected tab\r\n     * @param pageNumber The page number for which events to get\r\n     */\r\n    getEvents = (pageNumber: number = 0) => {\r\n        if (pageNumber === 0) {\r\n            this.setState((prevState: IManageEventsState) =>\r\n                ({ isLoading: true, loadMoreEvents: false, infiniteScrollKey: prevState.infiniteScrollKey + 1 }));\r\n        }\r\n\r\n        switch (this.state.activeTabIndex) {\r\n            case DraftEventsTabIndex:\r\n                this.loadEvents(pageNumber, EventSearchType.DraftEventsForTeam)\r\n                    .finally(() => {\r\n                        this.setState({ isLoading: false });\r\n                    });\r\n                break;\r\n\r\n            case CompletedEventsTabIndex:\r\n                this.loadEvents(pageNumber, EventSearchType.CompletedEventsForTeam)\r\n                    .finally(() => {\r\n                        this.setState({ isLoading: false });\r\n                    });\r\n                break;\r\n\r\n            default:\r\n                this.loadEvents(pageNumber, EventSearchType.ActiveEventsForTeam)\r\n                    .finally(() => {\r\n                        this.setState({ isLoading: false });\r\n                    });\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Formats evetn's date and time in the format- {Date} {Start Time}-{End Time} => 05 Jun 2020, 13:00 - 16:00\r\n     * @param eventDetails\r\n     */\r\n    formatEventDateAndTime = (eventDetails: IEvent) => {\r\n        if (eventDetails) {\r\n            let eventDayMonthYear = moment.utc(eventDetails.startDate).local().format(\"DD MMM YYYY\");\r\n            let eventStartTime = moment.utc(eventDetails.startTime).local().format(\"HH:mm\");\r\n            let eventEndTime = moment.utc(eventDetails.endTime).local().format(\"HH:mm\");\r\n\r\n            return `${eventDayMonthYear}, ${eventStartTime} - ${eventEndTime}`;\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when the event tab menu index gets changed\r\n     * @param event The event details\r\n     */\r\n    onTabMenuIndexChange = (event: any) => {\r\n        if (this.timeout) {\r\n            window.clearTimeout(this.timeout);\r\n        }\r\n\r\n        this.setState({\r\n            isLoading: true,\r\n            searchText: \"\",\r\n            activeTabIndex: this.state.isMobileView ? event?.index! : event?.activeIndex!\r\n        });\r\n\r\n        this.timeout = window.setTimeout(async () => {\r\n            if (event) {\r\n                this.getEvents();\r\n            }\r\n        }, 700);\r\n    }\r\n\r\n    /**\r\n     * The event handler called when click on 'Close Registration' menu item of event table\r\n     * @param eventId The event ID of which the registration need to be closed\r\n     */\r\n    onCloseRegistration = (eventId: string) => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            title: this.localize(\"closeRegistration\"),\r\n            height: 746,\r\n            width: 600,\r\n            url: `${window.location.origin}/close-or-cancel-event?operationType=${EventOperationType.CloseRegistration}&eventId=${eventId}&teamId=${this.teamId}&isMobileView=${this.state.isMobileView}`\r\n        }, (error: any, result: any) => {\r\n            if (result) {\r\n                this.setState((prevState: IManageEventsState) => (\r\n                    {\r\n                        notification: {\r\n                            id: prevState.notification.id + 1,\r\n                            message: this.localize(\"closeRegistrationSuccessfulMessage\"),\r\n                            type: ActivityStatus.Success\r\n                        }\r\n                    }));\r\n            }\r\n        });\r\n    }\r\n\r\n    onEditEvent = (eventId: string) => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            title: this.localize(\"editEvent\"),\r\n            height: 746,\r\n            width: 600,\r\n            url: `${window.location.origin}/create-event?eventId=${eventId}&isDraft=${this.state.activeTabIndex === 0 ? true : false}`,\r\n        }, (error: any, result: any) => {\r\n            if (result) {\r\n                if (result.isSuccess) {\r\n                    this.setState((prevState: IManageEventsState) =>\r\n                        ({\r\n                            notification: {\r\n                                id: prevState.notification.id + 1,\r\n                                message: this.localize(\"updateEventSuccessfulMessage\"),\r\n                                type: ActivityStatus.Success\r\n                            },\r\n                            activeTabIndex: result.isCreateEvent ? ActiveEventsTabIndex : prevState.activeTabIndex\r\n                        }), () => {\r\n                            window.setTimeout(() => this.getEvents(), 2000);\r\n                        });\r\n                }\r\n                else {\r\n                    this.setState((prevState: IManageEventsState) =>\r\n                        ({\r\n                            notification: {\r\n                                id: prevState.notification.id + 1,\r\n                                message: this.localize(\"updateEventFailureMessage\"),\r\n                                type: ActivityStatus.Error\r\n                            }\r\n                        }));\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The event handler called when sending reminder to the users of an event\r\n     * @param eventId The event ID\r\n     */\r\n    onSendReminder = async (eventId: string) => {\r\n        let response = await sendReminder(this.teamId, eventId);\r\n\r\n        if (response.status === ResponseStatus.OK) {\r\n            this.setState((prevState: IManageEventsState) =>\r\n                ({\r\n                    notification: {\r\n                        id: prevState.notification.id + 1,\r\n                        message: this.localize(\"sendReminderSuccessfulMessage\"),\r\n                        type: ActivityStatus.Success\r\n                    }\r\n                }));\r\n        }\r\n        else {\r\n            this.setState((prevState: IManageEventsState) =>\r\n                ({\r\n                    notification: {\r\n                        id: prevState.notification.id + 1,\r\n                        message: this.localize(\"sendReminderFailureMessage\"),\r\n                        type: ActivityStatus.Error\r\n                    }\r\n                }));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when click on 'Cancel Event' menu item of event table\r\n     * @param eventId The event ID that need to be cancelled\r\n     */\r\n    onCancelEvent = (eventId: string) => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            title: this.localize(\"cancelEvent\"),\r\n            height: 746,\r\n            width: 600,\r\n            url: `${window.location.origin}/close-or-cancel-event?operationType=${EventOperationType.CancelEvent}&eventId=${eventId}&teamId=${this.teamId}&isMobileView=${this.state.isMobileView}`\r\n        }, (error: any, result: any) => {\r\n            if (result) {\r\n                let activeEvents = this.state.activeEvents ? [...this.state.activeEvents] : [];\r\n                let updatedActiveEvents: Array<IEvent> = activeEvents.filter((event: IEvent) => event.eventId !== eventId);\r\n\r\n                this.activeEventsCount -= 1;\r\n\r\n                this.setState((prevState: IManageEventsState) => (\r\n                    {\r\n                        activeEvents: updatedActiveEvents,\r\n                        notification: {\r\n                            id: prevState.notification.id + 1,\r\n                            message: this.localize(\"cancelEventSuccessfulMessage\"),\r\n                            type: ActivityStatus.Success,\r\n                        }\r\n                    }));\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The event handler called when deleting draft event\r\n     * @param eventId The draft event ID that needs to be deleted\r\n     */\r\n    onDeleteDraftEvent = (eventId: string, eventName: string) => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            title: this.localize(\"deleteEvent\"),\r\n            height: 200,\r\n            width: 400,\r\n            url: `${window.location.origin}/delete-draft?eventId=${eventId}&teamId=${this.teamId}`\r\n        }, (error: any, result: any) => {\r\n            if (result) {\r\n                let draftEvents = this.state.draftEvents ? [...this.state.draftEvents] : [];\r\n                let updatedDraftEvents: Array<IEvent> = draftEvents.filter((event: IEvent) => event.eventId !== eventId);\r\n\r\n                this.draftEventsCount -= 1;\r\n\r\n                this.setState((prevState: IManageEventsState) => ({\r\n                    draftEvents: updatedDraftEvents,\r\n                    notification: {\r\n                        id: prevState.notification.id + 1,\r\n                        message: this.localize(\"deleteDraftEvent\"),\r\n                        type: ActivityStatus.Success\r\n                    }\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    onExportDetails = async (eventId: string, eventName: string) => {\r\n        let response = await exportEventDetailsToCSV(this.teamId, eventId);\r\n\r\n        if (response.status === ResponseStatus.OK) {\r\n            const url = window.URL.createObjectURL(new Blob([\"\\ufeff\", response.data], {type: 'text/csv;charset=utf-8'}));\r\n            const downloadLink = document.createElement('a');\r\n            downloadLink.href = url;\r\n            downloadLink.setAttribute('download', `${eventName}.csv`);\r\n            downloadLink.click();\r\n\r\n            this.setState((prevState: IManageEventsState) => ({\r\n                notification: {\r\n                    id: prevState.notification.id + 1,\r\n                    message: this.localize(\"exportDetailsSuccessfulMessage\"),\r\n                    type: ActivityStatus.Success\r\n                }\r\n            }));\r\n        }\r\n        else {\r\n            this.setState((prevState: IManageEventsState) => ({\r\n                notification: {\r\n                    id: prevState.notification.id + 1,\r\n                    message: this.localize(\"exportDetailsFailureMessage\"),\r\n                    type: ActivityStatus.Error\r\n                }\r\n            }));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called after 'Enter' key press while searching events\r\n     * @param event\r\n     */\r\n    onSearchEvents = (event: any) => {\r\n        if (event.keyCode === 13 && this.state.searchText?.length && this.state.searchText.trim() !== \"\") {\r\n            this.getEvents();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when search text gets changed\r\n     * @param event The input event object\r\n     */\r\n    onSearchTextChange = (event: any) => {\r\n        if (!event.target.value.length) {\r\n            this.setState({ searchText: \"\" }, () => {\r\n                this.getEvents();\r\n            });\r\n        }\r\n        else {\r\n            this.setState({ searchText: event.target.value });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Formats events count to show on tab items\r\n     * @param count The count of events\r\n     */\r\n    formatEventsCount = (count: number) => {\r\n        if (count === -1) {\r\n            return \"\";\r\n        }\r\n        else if (count < Constants.lazyLoadEventsCount) {\r\n            return `(${count})`;\r\n        }\r\n        else {\r\n            return `(${Constants.lazyLoadEventsCount}+)`;\r\n        }\r\n    }\r\n\r\n    /** Gets tab menu items */\r\n    getTabMenuItems = () => {\r\n        return (\r\n            [\r\n                {\r\n                    key: \"draft-events\",\r\n                    content: `${this.localize(\"draftEvents\")} ${this.formatEventsCount(this.draftEventsCount)}`\r\n                },\r\n                {\r\n                    key: \"active-events\",\r\n                    content: `${this.localize(\"activeEvents\")} ${this.formatEventsCount(this.activeEventsCount)}`\r\n                },\r\n                {\r\n                    key: \"completed-events\",\r\n                    content: `${this.localize(\"completedEvents\")} ${this.formatEventsCount(this.completedEventsCount)}`\r\n                }\r\n            ]\r\n        );\r\n    }\r\n\r\n    onEventCreated = (err: any, result: any) => {\r\n        if (result) {\r\n            if (result.isSuccess) {\r\n                this.setState((prevState: IManageEventsState) =>\r\n                    ({\r\n                        notification: {\r\n                            id: prevState.notification.id + 1,\r\n                            message: result.isDraft ? this.localize(\"createDraftSuccessfulMessage\") : this.localize(\"createEventSuccessfulMessage\"),\r\n                            type: ActivityStatus.Success\r\n                        },\r\n                        activeTabIndex: result.isDraft ? DraftEventsTabIndex : ActiveEventsTabIndex\r\n                    }), () => {\r\n                        window.setTimeout(() => this.getEvents(), 2000);\r\n                    });\r\n            }\r\n            else {\r\n                this.setState((prevState: IManageEventsState) =>\r\n                    ({\r\n                        notification: {\r\n                            id: prevState.notification.id + 1,\r\n                            message: result.isDraft ? this.localize(\"createDraftFailureMessage\") : this.localize(\"createEventFailureMessage\"),\r\n                            type: ActivityStatus.Error\r\n                        }\r\n                    }));\r\n            }\r\n        }\r\n\r\n        this.props.microsoftTeams?.getContext((context: microsoftTeams.Context) => {\r\n            this.teamId = context.teamId!;\r\n        });\r\n    }\r\n\r\n    /** Open task module for manage categories */\r\n    onManageCategoriesClick = () => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            title: this.localize(\"manageCategories\"),\r\n            height: 600,\r\n            width: 900,\r\n            url: `${window.location.origin}/manage-categories`,\r\n        }, () => { });\r\n    }\r\n\r\n    /** Open task module for create event */\r\n    onCreateEventsClick = () => {\r\n        this.props.microsoftTeams.tasks.startTask({\r\n            title: this.localize(\"createEvent\"),\r\n            height: 746,\r\n            width: 600,\r\n            url: `${window.location.origin}/create-event`,\r\n        }, this.onEventCreated);\r\n    }\r\n\r\n    /** Called when screen size gets updated; which sets the state to indicate whether mobile view enabled */\r\n    onScreenSizeChange() {\r\n        this.setState({ isMobileView: window.innerWidth <= Constants.maxWidthForMobileView });\r\n    }\r\n\r\n    /** The event handler called when mobile search box get closed */\r\n    onMobileSearchBoxClose = () => {\r\n        this.setState({ isMobileSearchBoxOpen: !this.state.isMobileSearchBoxOpen });\r\n\r\n        /** If search box do not have the search text, then-\r\n         - No need to call get events as it was already called when user explicitly makes search box empty\r\n         - No need to call get events if user simply open and closes the search box\r\n         */\r\n        if (this.state.searchText?.trim().length) {\r\n            this.setState({\r\n                searchText: \"\",\r\n            }, () => this.getEvents());\r\n        }\r\n    }\r\n\r\n    /** Gets event table header */\r\n    getEventsTableHeader = () => {\r\n        return ({\r\n            items: [\r\n                {\r\n                    content: this.localize(\"eventTitle\")\r\n                },\r\n                {\r\n                    content: this.localize(\"dateAndTime\"),\r\n                    design: { minWidth: \"17vw\", maxWidth: \"17vw\" }\r\n                },\r\n                {\r\n                    content: this.localize(\"venue\"),\r\n                    design: { minWidth: \"17vw\", maxWidth: \"17vw\" }\r\n                },\r\n                {\r\n                    content: this.localize(\"noOfRegistrations\"),\r\n                    design: { minWidth: \"12vw\", maxWidth: \"12vw\" }\r\n                },\r\n                {\r\n                    content: this.localize(\"category\"),\r\n                    design: { minWidth: \"15vw\", maxWidth: \"15vw\" }\r\n                },\r\n                {\r\n                    design: { minWidth: \"5vw\", maxWidth: \"5vw\" }\r\n                }\r\n            ]\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the event type text in grid based on event type\r\n     * @param eventDetails The event details\r\n     */\r\n    getEventType = (eventDetails: IEvent) => {\r\n        if (eventDetails.type === EventType.InPerson) {\r\n            return eventDetails.venue;\r\n        }\r\n        else if (eventDetails.type === EventType.LiveEvent) {\r\n            return this.localize(\"liveEvent\");\r\n        }\r\n        else {\r\n            return this.localize(\"teamsMeeting\");\r\n        }\r\n    }\r\n\r\n    /** Renders events' table */\r\n    renderEvents() {\r\n        let events: Array<IEvent> = [];\r\n\r\n        if (this.state.activeTabIndex === DraftEventsTabIndex) {\r\n            events = [...this.state.draftEvents];\r\n        }\r\n        else if (this.state.activeTabIndex === CompletedEventsTabIndex) {\r\n            events = [...this.state.completedEvents];\r\n        }\r\n        else if (this.state.activeTabIndex === ActiveEventsTabIndex) {\r\n            events = [...this.state.activeEvents];\r\n        }\r\n\r\n        if (events?.length > 0) {\r\n            if (this.state.isMobileView) {\r\n                let items: Array<any> = events.map((event: IEvent, index: number) => {\r\n                    return {\r\n                        key: `event-${index}`,\r\n                        content:\r\n                            <div className=\"manage-events-list-item-container\">\r\n                                <Flex space=\"between\">\r\n                                    <Flex column>\r\n                                        <Text content={event.name} weight=\"bold\" className=\"list-header\" />\r\n                                        <Flex className=\"list-elements\" vAlign=\"center\">\r\n                                            <Text className=\"category-name\" content={event.categoryName} weight=\"semibold\" />\r\n                                            <Text content=\"|\" weight=\"semibold\" className=\"divider\" />\r\n                                            <Text content={event.type === EventType.InPerson ? event.venue : this.localize(\"teamsMeeting\")} weight=\"semibold\" />\r\n                                        </Flex>\r\n                                        <Text className=\"list-elements\" content={this.formatEventDateAndTime(event)} />\r\n                                        <Text className=\"list-elements\" content={`${this.localize(\"noOfRegistrations\")}: ${event.registeredAttendeesCount}/${event.maximumNumberOfParticipants}`} />\r\n                                    </Flex>\r\n                                    <Flex.Item push>\r\n                                        {\r\n                                            event.status === EventStatus.Cancelled ? <Button disabled text iconOnly icon={<MoreIcon />} /> :\r\n                                                <ManageEventsMenu\r\n                                                    eventDetails={event}\r\n                                                    onCancelEvent={this.onCancelEvent}\r\n                                                    onCloseRegistration={this.onCloseRegistration}\r\n                                                    onEditEvent={this.onEditEvent}\r\n                                                    onExportDetails={this.onExportDetails}\r\n                                                    onSendReminder={this.onSendReminder}\r\n                                                    onDeleteDraftEvent={this.onDeleteDraftEvent}\r\n                                                    dir={this.props.dir}\r\n                                                />\r\n                                        }\r\n                                    </Flex.Item>\r\n                                </Flex>\r\n                            </div>\r\n                    }\r\n                });\r\n\r\n                return (\r\n                    <List className=\"manage-events-mobile-list-view\" items={items} />\r\n                );\r\n            }\r\n            else {\r\n                let rows: Array<TableRowProps> = events.map((event: IEvent) => {\r\n                    let eventVenue: string = this.getEventType(event);\r\n                    let eventDateAndTime: string = this.formatEventDateAndTime(event);\r\n\r\n                    return {\r\n                        key: `row-${event.eventId}`,\r\n                        items: [\r\n                            {\r\n                                content: <Text error={event.status === EventStatus.Cancelled ? true : false} content={event.name + (event.status === EventStatus.Cancelled ? ` (${this.localize(\"cancelledStatus\")})` : \"\")} weight=\"bold\" />,\r\n                                truncateContent: true,\r\n                                title: event.name\r\n                            },\r\n                            {\r\n                                content: eventDateAndTime,\r\n                                truncateContent: true,\r\n                                title: eventDateAndTime,\r\n                                design: { minWidth: \"17vw\", maxWidth: \"17vw\" }\r\n                            },\r\n                            {\r\n                                content: eventVenue,\r\n                                truncateContent: true,\r\n                                title: eventVenue,\r\n                                design: { minWidth: \"17vw\", maxWidth: \"17vw\" }\r\n                            },\r\n                            {\r\n                                content: `${event.registeredAttendeesCount}/${event.maximumNumberOfParticipants}`,\r\n                                design: { minWidth: \"12vw\", maxWidth: \"12vw\" }\r\n                            },\r\n                            {\r\n                                content: event.categoryName,\r\n                                truncateContent: true,\r\n                                title: event.categoryName,\r\n                                design: { minWidth: \"15vw\", maxWidth: \"15vw\" }\r\n                            },\r\n                            {\r\n                                content: event.status === EventStatus.Cancelled ? <Button disabled text iconOnly icon={<MoreIcon />} /> :\r\n                                    <ManageEventsMenu\r\n                                        eventDetails={event}\r\n                                        onCancelEvent={this.onCancelEvent}\r\n                                        onCloseRegistration={this.onCloseRegistration}\r\n                                        onEditEvent={this.onEditEvent}\r\n                                        onExportDetails={this.onExportDetails}\r\n                                        onSendReminder={this.onSendReminder}\r\n                                        onDeleteDraftEvent={this.onDeleteDraftEvent}\r\n                                        dir={this.props.dir}\r\n                                    />,\r\n                                design: { minWidth: \"5vw\", maxWidth: \"5vw\" }\r\n                            }\r\n                        ]\r\n                    }\r\n                });\r\n\r\n                return (\r\n                    <Table className=\"manage-events-table\" header={this.getEventsTableHeader()} rows={rows} />\r\n                );\r\n            }\r\n        }\r\n        else {\r\n            return (\r\n                <NoContent message={this.localize(\"eventsNotAvailable\")} />\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders mobile view */\r\n    renderMobileView = () => {\r\n        return (\r\n            <div className=\"container-manage-events\">\r\n                <Flex>\r\n                    <Flex.Item push>\r\n                        <Flex gap=\"gap.small\">\r\n                            <Button primary content={this.localize(\"manageCategories\")} onClick={this.onManageCategoriesClick} />\r\n                            <Button primary content={this.localize(\"createEvent\")} onClick={this.onCreateEventsClick} />\r\n                        </Flex>\r\n                    </Flex.Item>\r\n                </Flex>\r\n                <Flex className=\"mobile-menu-manage-events\" space=\"between\" vAlign=\"center\">\r\n                    <SplitButton\r\n                        button={this.getTabMenuItems()[this.state.activeTabIndex]}\r\n                        menu={{ activeIndex: this.state.activeTabIndex, items: this.getTabMenuItems() }}\r\n                        onMenuItemClick={(event: any, data: MenuItemProps | undefined) => this.onTabMenuIndexChange(data)}\r\n                        style={{ \"width\": \"40rem !important\" }}\r\n                        className=\"split-button\"\r\n                    />\r\n                    <Flex.Item push>\r\n                        <SearchIcon onClick={this.onMobileSearchBoxClose} />\r\n                    </Flex.Item>\r\n                </Flex>\r\n                { this.state.isMobileSearchBoxOpen &&\r\n                    <Flex className=\"manage-events-mobile-search-box\" vAlign=\"center\" gap=\"gap.small\">\r\n                        <Input\r\n                            inverted\r\n                            fluid\r\n                            placeholder={this.localize(\"searchForEventsPlaceholder\")}\r\n                            input={{ design: { minWidth: \"20rem\", width: \"100rem\" } }}\r\n                            onKeyUp={this.onSearchEvents}\r\n                            onChange={this.onSearchTextChange}\r\n                        />\r\n                        <Flex.Item push>\r\n                            <CloseIcon onClick={this.onMobileSearchBoxClose} />\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                }\r\n                {\r\n                    this.state.isLoading\r\n                        ? <Loader className=\"loader\" />\r\n                        : <div key={this.state.infiniteScrollKey} className=\"manage-events-scroll-area-mobile\">\r\n                            <InfiniteScroll\r\n                                pageStart={0}\r\n                                loadMore={this.getEvents}\r\n                                hasMore={this.state.loadMoreEvents}\r\n                                initialLoad={false}\r\n                                loader={<div><Loader /></div>}\r\n                                useWindow={false}\r\n                            >\r\n                                {this.renderEvents()}\r\n                            </InfiniteScroll>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /** Renders desktop view */\r\n    renderDesktopView = () => {\r\n        return (\r\n            <div className=\"container-manage-events\">\r\n                <Flex space=\"between\" vAlign=\"center\">\r\n                    <TabMenu\r\n                        tabItems={this.getTabMenuItems()}\r\n                        defaultTabIndex={ActiveEventsTabIndex}\r\n                        activeTabIndex={this.state.activeTabIndex!}\r\n                        onTabIndexChange={this.onTabMenuIndexChange}\r\n                    />\r\n                    <Flex.Item push={this.props.dir === LanguageDirection.Ltr}>\r\n                        <Flex gap=\"gap.medium\" vAlign=\"center\">\r\n                            <Input\r\n                                inverted\r\n                                value={this.state.searchText}\r\n                                icon={<SearchIcon />}\r\n                                iconPosition={this.props.dir === LanguageDirection.Rtl ? \"start\" : \"end\"}\r\n                                placeholder={this.localize(\"searchForEventsPlaceholder\")}\r\n                                input={{ design: { minWidth: \"20rem\", maxWidth: \"20rem\" } }}\r\n                                onKeyUp={this.onSearchEvents}\r\n                                onChange={this.onSearchTextChange}\r\n                            />\r\n                            <Flex gap=\"gap.small\">\r\n                                <Button content={this.localize(\"manageCategories\")} onClick={this.onManageCategoriesClick} />\r\n                                <Button\r\n                                    className={this.props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-medium\" : \"\"}\r\n                                    icon={<AddIcon />}\r\n                                    primary\r\n                                    content={<Text className={this.props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-small\" : \"\"} content={this.localize(\"createEvent\")} />}\r\n                                    onClick={this.onCreateEventsClick}\r\n                                />\r\n                            </Flex>\r\n                        </Flex>\r\n                    </Flex.Item>\r\n                </Flex>\r\n                {\r\n                    this.state.isLoading\r\n                        ? <Loader className=\"loader\" />\r\n                        : <div key={this.state.infiniteScrollKey} className=\"manage-events-scroll-area\">\r\n                            <InfiniteScroll\r\n                                pageStart={0}\r\n                                loadMore={this.getEvents}\r\n                                hasMore={this.state.loadMoreEvents}\r\n                                initialLoad={false}\r\n                                loader={<div><Loader /></div>}\r\n                                useWindow={false}\r\n                            >\r\n                                {this.renderEvents()}\r\n                            </InfiniteScroll>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /** Renders component */\r\n    render() {\r\n        return (\r\n            <Fabric dir={this.props.dir}>\r\n                <div className=\"container-div\">\r\n                    { this.state.isMobileView ? this.renderMobileView() : this.renderDesktopView()}\r\n                    <ToastNotification dir={this.props.dir} notification={this.state.notification} />\r\n                </div>\r\n            </Fabric>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(ManageEvents));\r\n","// <copyright file=\"dark-customizations.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport {\r\n    createTheme,\r\n    ICustomizations,\r\n    IPalette,\r\n    ITheme,\r\n    IPersonaCoinStyleProps,\r\n    IPersonaCoinStyles,\r\n} from 'office-ui-fabric-react';\r\nimport { DatePickerStyles } from './date-picker-styles';\r\nimport { PeoplePickerItemStyles } from './people-picker-styles';\r\nimport { addVariants } from '@uifabric/variants';\r\n\r\nconst DarkDefaultPalette: Partial<IPalette> = {\r\n    themeDarker: '#82c7ff',\r\n    themeDark: '#6cb8f6',\r\n    themeDarkAlt: '#3aa0f3',\r\n    themePrimary: '#2899f5',\r\n    themeSecondary: '#0078d4',\r\n    themeTertiary: '#235a85',\r\n    themeLight: '#004c87',\r\n    themeLighter: '#043862',\r\n    themeLighterAlt: '#092c47',\r\n    black: '#ffffff',\r\n    neutralDark: '#faf9f8',\r\n    neutralPrimary: '#f3f2f1',\r\n    neutralPrimaryAlt: '#c8c6c4',\r\n    neutralSecondary: '#a19f9d',\r\n    neutralSecondaryAlt: '#979693',\r\n    neutralTertiary: '#797775',\r\n    neutralTertiaryAlt: '#484644',\r\n    neutralQuaternary: '#3b3a39',\r\n    neutralQuaternaryAlt: '#323130',\r\n    neutralLight: '#292827',\r\n    neutralLighter: '#252423',\r\n    neutralLighterAlt: '#201f1e',\r\n    white: '#1b1a19',\r\n    redDark: '#F1707B',\r\n};\r\n\r\nexport const DarkTheme: ITheme = createTheme({\r\n    palette: DarkDefaultPalette,\r\n    semanticColors: {\r\n        buttonText: DarkDefaultPalette.black,\r\n        buttonTextPressed: DarkDefaultPalette.neutralDark,\r\n        buttonTextHovered: DarkDefaultPalette.neutralPrimary,\r\n        disabledBackground: DarkDefaultPalette.neutralQuaternaryAlt,\r\n        inputBackgroundChecked: DarkDefaultPalette.themePrimary,\r\n        menuBackground: DarkDefaultPalette.neutralLighter,\r\n        menuItemBackgroundHovered: DarkDefaultPalette.neutralQuaternaryAlt,\r\n        menuItemBackgroundPressed: DarkDefaultPalette.neutralQuaternary,\r\n        menuDivider: DarkDefaultPalette.neutralTertiaryAlt,\r\n        menuIcon: DarkDefaultPalette.themeDarkAlt,\r\n        menuHeader: DarkDefaultPalette.black,\r\n        menuItemText: DarkDefaultPalette.neutralPrimary,\r\n        menuItemTextHovered: DarkDefaultPalette.neutralDark,\r\n    },\r\n    isInverted: true,\r\n});\r\n\r\nexport const PersonaCoinStyles = (props: IPersonaCoinStyleProps): Partial<IPersonaCoinStyles> => {\r\n    return {\r\n        initials: {\r\n            color: props.showUnknownPersonaCoin ? DarkTheme.palette.redDark : DarkTheme.palette.black,\r\n        },\r\n    };\r\n};\r\n\r\nexport const DarkCustomizations: ICustomizations = {\r\n    settings: {\r\n        theme: DarkTheme,\r\n    },\r\n    scopedSettings: {\r\n        Card: {\r\n            styles: {\r\n                root: {\r\n                    background: DarkTheme.palette.neutralLighter,\r\n                },\r\n            },\r\n        },\r\n        DatePicker: {\r\n            styles: DatePickerStyles,\r\n        },\r\n        DetailsList: {\r\n            styles: {\r\n                headerWrapper: {\r\n                    selectors: {\r\n                        '.ms-DetailsHeader': {\r\n                            borderColor: DarkTheme.palette.neutralQuaternary,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        ActionButton: {\r\n            styles: {\r\n                root: {\r\n                    backgroundColor: DarkTheme.palette.white,\r\n                },\r\n                rootDisabled: {\r\n                    backgroundColor: DarkTheme.palette.neutralLighter,\r\n                },\r\n                rootHovered: {\r\n                    backgroundColor: DarkTheme.palette.neutralLight,\r\n                },\r\n                rootPressed: {\r\n                    backgroundColor: DarkTheme.palette.neutralQuaternaryAlt,\r\n                },\r\n            },\r\n        },\r\n        DetailsRow: {\r\n            styles: {\r\n                root: {\r\n                    selectors: {\r\n                        ':hover': {\r\n                            background: DarkTheme.palette.neutralLighter,\r\n                        },\r\n                    },\r\n                    borderColor: DarkTheme.palette.neutralQuaternaryAlt,\r\n                },\r\n            },\r\n        },\r\n        Modal: {\r\n            styles: {\r\n                main: {\r\n                    backgroundColor: DarkTheme.palette.neutralLighter,\r\n                },\r\n            },\r\n        },\r\n        Overlay: {\r\n            styles: {\r\n                root: {\r\n                    background: DarkTheme.palette.blackTranslucent40,\r\n                },\r\n            },\r\n        },\r\n        VerticalDivider: {\r\n            styles: {\r\n                divider: {\r\n                    backgroundColor: DarkTheme.palette.neutralQuaternaryAlt,\r\n                },\r\n                wrapper: {\r\n                    Backgroundcolor: DarkTheme.palette.green,\r\n                },\r\n            },\r\n        },\r\n        DocumentCard: {\r\n            styles: {\r\n                root: {\r\n                    border: `1px solid ${DarkTheme.palette.neutralQuaternaryAlt}`,\r\n                    selectors: {\r\n                        '.ms-DocumentCardPreview': {\r\n                            borderRight: `1px solid ${DarkTheme.palette.neutralQuaternaryAlt}`,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        DocumentCardPreview: {\r\n            styles: {\r\n                root: {\r\n                    borderBottom: `1px solid ${DarkTheme.palette.neutralQuaternaryAlt}`,\r\n                    borderRight: `1px solid ${DarkTheme.palette.neutralQuaternaryAlt}`,\r\n                },\r\n            },\r\n        },\r\n        Panel: {\r\n            styles: {\r\n                main: {\r\n                    backgroundColor: DarkTheme.palette.neutralLighter,\r\n                },\r\n                closeButton: {\r\n                    color: DarkTheme.palette.neutralSecondary,\r\n                    selectors: {\r\n                        ':hover': {\r\n                            color: DarkTheme.palette.neutralPrimary,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        PeoplePickerItem: {\r\n            styles: PeoplePickerItemStyles,\r\n        },\r\n        PersonaCoin: {\r\n            styles: PersonaCoinStyles,\r\n        },\r\n        Separator: {\r\n            styles: {\r\n                root: {\r\n                    selectors: {\r\n                        ':before': {\r\n                            backgroundColor: DarkTheme.palette.neutralQuaternaryAlt,\r\n                        },\r\n                        ':after': {\r\n                            backgroundColor: DarkTheme.palette.neutralQuaternaryAlt,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        SpinButton: {\r\n            styles: {\r\n                inputTextSelected: {\r\n                    color: DarkTheme.palette.black,\r\n                    background: DarkTheme.palette.themePrimary,\r\n                },\r\n            },\r\n        },\r\n    },\r\n};\r\n\r\naddVariants(DarkCustomizations.settings.theme);\r\n","// <copyright file=\"date-picker-styles.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport { IDatePickerStyleProps, IDatePickerStyles } from 'office-ui-fabric-react';\r\nimport { DarkTheme } from './dark-customizations';\r\n\r\nexport const DatePickerStyles = (props: IDatePickerStyleProps): Partial<IDatePickerStyles> => {\r\n    const { disabled } = props;\r\n\r\n    const TextHoverStyle = () => {\r\n        return {\r\n            color: DarkTheme.palette.neutralPrimary,\r\n            backgroundColor: DarkTheme.palette.neutralQuaternary,\r\n        };\r\n    };\r\n    const TodayAndSelectedDayStyle = () => {\r\n        return {\r\n            '.ms-DatePicker-day-button.ms-DatePicker-day--today': {\r\n                backgroundColor: DarkTheme.palette.themePrimary,\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n            '.ms-DatePicker-day-button.ms-DatePicker-day--today:active': {\r\n                backgroundColor: DarkTheme.palette.themePrimary,\r\n            },\r\n            '.ms-DatePicker-day-button.ms-DatePicker-day--today:hover': {\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n            '.ms-DatePicker-day--highlighted': {\r\n                backgroundColor: DarkTheme.palette.themeSecondary,\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n            '.ms-DatePicker-day--highlighted > .ms-DatePicker-day-button': {\r\n                backgroundColor: DarkTheme.palette.themePrimary,\r\n            },\r\n            '.ms-DatePicker-day--highlighted > .ms-DatePicker-day--today': {\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n        };\r\n    };\r\n    const HoverStyles = () => {\r\n        return {\r\n            '.ms-DatePicker-day--highlighted:hover': {\r\n                backgroundColor: DarkTheme.semanticColors.listItemBackgroundChecked,\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n            '.ms-DatePicker-day--highlighted > .ms-DatePicker-day-button:hover': {\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n            '.ms-DatePicker-day--infocus:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-currentDecade:hover': { color: DarkTheme.palette.neutralPrimary },\r\n            '.ms-DatePicker-day--outfocus:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-monthAndYear:hover': { color: DarkTheme.palette.neutralPrimary },\r\n            '.ms-DatePicker-weekday:hover': { color: DarkTheme.palette.neutralPrimary },\r\n            '.ms-DatePicker-monthOption:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-header > .ms-DatePicker-currentYear:hover': { color: DarkTheme.palette.neutralPrimary },\r\n            '.ms-DatePicker-prevMonth:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-nextMonth:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-prevYear:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-nextYear:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-goToday:hover': {\r\n                color: DarkTheme.palette.neutralPrimary,\r\n                backgroundColor: DarkTheme.palette.themeSecondary,\r\n            },\r\n            '.ms-DatePicker-yearOption:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-prevDecade:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n            '.ms-DatePicker-nextDecade:hover': {\r\n                ...TextHoverStyle(),\r\n            },\r\n        };\r\n    };\r\n    return {\r\n        callout: {\r\n            backgroundColor: DarkTheme.semanticColors.bodyBackground,\r\n            color: DarkTheme.palette.neutralPrimary,\r\n            selectors: {\r\n                '.ms-DatePicker-day--infocus': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-currentDecade': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-day--outfocus': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-monthAndYear': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-weekday': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-monthOption': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-currentYear': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-prevMonth': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-nextMonth': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-prevYear': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-nextYear': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-prevDecade': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-nextDecade': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-goToday': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-goToday[disabled]': { display: 'none' },\r\n                '.ms-DatePicker-yearOption': { color: DarkTheme.palette.neutralPrimary },\r\n                '.ms-DatePicker-yearOption--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-monthOption--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-day--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-nextDecade--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-prevDecade--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-prevYear--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-nextYear--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-prevMonth--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                '.ms-DatePicker-nextMonth--disabled': { color: DarkTheme.palette.neutralSecondary },\r\n                ...TodayAndSelectedDayStyle(),\r\n                ...HoverStyles(),\r\n            },\r\n        },\r\n        icon: [\r\n            {\r\n                color: DarkTheme.palette.neutralPrimary,\r\n            },\r\n            disabled && {\r\n                color: DarkTheme.semanticColors.disabledBodyText,\r\n            },\r\n        ],\r\n        root: [\r\n            disabled && {\r\n                color: DarkTheme.semanticColors.disabledBodyText,\r\n            },\r\n        ],\r\n    };\r\n};\r\n","// <copyright file=\"people-picker-styles.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport { IPeoplePickerItemSelectedStyleProps, IPeoplePickerItemSelectedStyles } from 'office-ui-fabric-react';\r\nimport { DarkTheme } from './dark-customizations';\r\n\r\nexport const PeoplePickerItemStyles = (\r\n    props: IPeoplePickerItemSelectedStyleProps,\r\n): Partial<IPeoplePickerItemSelectedStyles> => {\r\n    const { selected } = props;\r\n\r\n    return {\r\n        root: [\r\n            {\r\n                background: DarkTheme.palette.neutralQuaternaryAlt,\r\n                selectors: {\r\n                    ':hover': {\r\n                        background: DarkTheme.palette.neutralQuaternary,\r\n                    },\r\n                },\r\n            },\r\n            selected && {\r\n                backgroundColor: DarkTheme.palette.themeSecondary,\r\n                selectors: {\r\n                    ':hover': {\r\n                        background: DarkTheme.palette.themeSecondary,\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        removeButton: [\r\n            {\r\n                background: DarkTheme.palette.neutralQuaternaryAlt,\r\n                color: DarkTheme.palette.neutralDark,\r\n                selectors: {\r\n                    ':hover': {\r\n                        background: DarkTheme.palette.neutralQuaternary,\r\n                        color: DarkTheme.palette.black,\r\n                    },\r\n                },\r\n            },\r\n            selected && {\r\n                background: DarkTheme.palette.themeSecondary,\r\n                selectors: {\r\n                    ':hover': {\r\n                        background: DarkTheme.palette.themeDark,\r\n                    },\r\n                    ':active': {\r\n                        color: DarkTheme.palette.black,\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        subComponentStyles: {\r\n            persona: {\r\n                primaryText: [\r\n                    {\r\n                        color: DarkTheme.palette.neutralPrimary,\r\n                    },\r\n                    selected && {\r\n                        color: DarkTheme.palette.black,\r\n                        selectors: {\r\n                            ':hover': {\r\n                                color: DarkTheme.palette.black,\r\n                            },\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        },\r\n    };\r\n};\r\n","// <copyright file=\"default-customizations.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport { createTheme, ICustomizations } from 'office-ui-fabric-react';\r\nimport { addVariants } from '@uifabric/variants';\r\n\r\nexport const DefaultCustomizations: ICustomizations = {\r\n    settings: {\r\n        theme: createTheme({}),\r\n    },\r\n    scopedSettings: {},\r\n};\r\n\r\naddVariants(DefaultCustomizations.settings.theme);\r\n","// <copyright file=\"date-picker.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport moment from \"moment\";\r\nimport { Flex } from '@fluentui/react-northstar';\r\nimport { useState } from \"react\";\r\nimport { DatePicker } from 'office-ui-fabric-react/lib/DatePicker';\r\nimport { Fabric, Customizer } from 'office-ui-fabric-react/lib';\r\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons';\r\nimport { DarkCustomizations } from \"../../../helpers/dark-customizations\";\r\nimport { DefaultCustomizations } from \"../../../helpers/default-customizations\";\r\nimport Constants from \"../../../constants/resources\";\r\nimport \"./date-picker.css\";\r\n\r\ninitializeIcons();\r\n\r\ninterface IDateePickerProps {\r\n    selectedDate: Date,\r\n    onDateSelect: (startDate: Date) => void,\r\n    theme: string,\r\n    screenWidth: number,\r\n    minDate: Date,\r\n    disableSelectionForPastDate: boolean\r\n}\r\n\r\nconst StartDate: React.FC<IDateePickerProps> = props => {\r\n    let bgcolor = \"\";\r\n    let theme = props.theme;\r\n    let datePickerTheme;\r\n\r\n    if (theme === Constants.dark) {\r\n        bgcolor = \"dark-datepicker\";\r\n        datePickerTheme = DarkCustomizations\r\n    }\r\n    else if (theme === Constants.contrast) {\r\n        bgcolor = \"dark-datepicker\";\r\n        datePickerTheme = DarkCustomizations\r\n    }\r\n    else {\r\n        bgcolor = \"default-datepicker\";\r\n        datePickerTheme = DefaultCustomizations\r\n    }\r\n\r\n    const [selectedDate, setDate] = useState<Date | null | undefined>(props.selectedDate);\r\n    const [minDate, setMinDate] = useState<Date | null | undefined>(props.minDate);\r\n\r\n    React.useEffect(() => {\r\n        setDate(props.selectedDate);\r\n    }, [props.selectedDate]);\r\n\r\n    React.useEffect(() => {\r\n        setMinDate(props.minDate);\r\n    }, [props.minDate]);\r\n\r\n    /**\r\n       * Handle change event for cycle start date picker.\r\n       * @param date | cycle start date.\r\n       */\r\n    const onSelectStartDate = (date: Date | null | undefined): void => {\r\n        let startCycle = moment(date)\r\n            .set('hour', moment().hour())\r\n            .set('minute', moment().minute())\r\n            .set('second', moment().second());\r\n        props.onDateSelect(startCycle.toDate()!);\r\n        setDate(startCycle.toDate());\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {\r\n                <Flex gap=\"gap.small\">\r\n                    <Fabric className=\"full-width\" dir=\"ltr\">\r\n                        <Customizer {...datePickerTheme}>\r\n                            <DatePicker\r\n                                className={bgcolor}\r\n                                label={''}\r\n                                showMonthPickerAsOverlay={true}\r\n                                minDate={minDate!}\r\n                                isMonthPickerVisible={true}\r\n                                value={selectedDate!}\r\n                                onSelectDate={onSelectStartDate}\r\n                                disabled={props.disableSelectionForPastDate}\r\n                            />\r\n                        </Customizer>\r\n                    </Fabric>\r\n                </Flex>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default StartDate;\r\n","// <copyright file=\"timepicker.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport React, { useState } from 'react';\r\nimport { Input, Popup, Flex, Dropdown, Text } from '@fluentui/react-northstar';\r\nimport { Icon } from '@fluentui/react/lib/Icon';\r\nimport { LanguageDirection } from '../../../models/language-direction';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport \"./timepicker.css\";\r\n\r\ninterface ITimePickerProps {\r\n    onPickerClose: (hours: number, minutes: number) => void,\r\n    hours?: number,\r\n    minutes?: number,\r\n    minHours?: number,\r\n    minMinutes?: number,\r\n    isDisabled: boolean,\r\n    dir: LanguageDirection\r\n}\r\n\r\nexport const TimePicker: React.FunctionComponent<ITimePickerProps> = props => {\r\n    const localize = useTranslation().t;\r\n    const [open, setOpen] = useState(false);\r\n    const [text, setText] = React.useState(props.hours!.toString().padStart(2, '0') + \":\" + props.minutes!.toString().padStart(2, '0'));\r\n    const [hours, setHour] = React.useState(props.hours!.toString().padStart(2, '0'));\r\n    const [minutes, setMinute] = React.useState(props.minutes!.toString().padStart(2, '0'));\r\n    const [minHours, setMinHour] = React.useState(props.minHours!);\r\n    const [minMinutes, setMinMinute] = React.useState(props.minMinutes!);\r\n\r\n    const hoursItems: Array<string> = [];\r\n    const minutesItems: Array<string> = [];\r\n\r\n    React.useEffect(() => {\r\n        setHour(props.hours!.toString().padStart(2, '0'));\r\n        setText(props.hours!.toString().padStart(2, '0') + \":\" + props.minutes!.toString().padStart(2, '0'));\r\n    }, [props.hours]);\r\n    React.useEffect(() => {\r\n        setMinute (props.minutes!.toString().padStart(2, '0'));\r\n        setText(props.hours!.toString().padStart(2, '0') + \":\" + props.minutes!.toString().padStart(2, '0'));\r\n    }, [props.minutes]);\r\n    React.useEffect(() => {\r\n        setMinHour(props.minHours!);\r\n    }, [props.minHours]);\r\n    React.useEffect(() => {\r\n        setMinMinute(props.minMinutes!);\r\n    }, [props.minMinutes]);\r\n\r\n    for (var i = minHours ? minHours : 0 ; i < 24; i++) {\r\n        hoursItems.push(i.toString().padStart(2, '0'));\r\n    }\r\n    for (var i = 0; i < 60; i++) {\r\n        minutesItems.push(i.toString().padStart(2, '0'));\r\n    }\r\n\r\n    const onHourChange = {\r\n        onAdd: item => {\r\n            if (item) {\r\n                setHour(item);\r\n            }\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    const onMinuteChange = {\r\n        onAdd: item => {\r\n            if (item) {\r\n                setMinute(item);\r\n            }\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    const onOpenChange = (e, { open }: any) => {\r\n        setOpen(open)\r\n        if (!open) {\r\n            setText(hours + \":\" + minutes);\r\n            props.onPickerClose(parseInt(hours), parseInt(minutes));\r\n        }\r\n    }\r\n\r\n    const popupContent = (\r\n        <div className=\"timepicker-popup-style\">\r\n            <Flex gap=\"gap.small\">\r\n                <Flex.Item size=\"size.half\">\r\n                    <Text size={props.dir === LanguageDirection.Rtl ? \"medium\" : \"small\"} content={localize(\"hourPlaceholder\")} />\r\n                </Flex.Item>\r\n                <Flex.Item size=\"size.half\" className={props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-large\" : \"\"}>\r\n                    <Text size={props.dir === LanguageDirection.Rtl ? \"medium\" : \"small\"} content={localize(\"minutePlaceholder\")} />\r\n                </Flex.Item>\r\n            </Flex>\r\n            <Flex gap=\"gap.small\" styles={{marginTop:\"0.5rem\"}}>\r\n                <Flex.Item>\r\n                    <Dropdown\r\n                        className=\"timepicker-dropdown\"\r\n                        items={hoursItems}\r\n                        value={hours}\r\n                        placeholder={localize(\"hourPlaceholder\")}\r\n                        getA11ySelectionMessage={onHourChange}\r\n                    />\r\n                </Flex.Item>\r\n                <Flex.Item>\r\n                    <Dropdown\r\n                        className={props.dir === LanguageDirection.Rtl ? \"timepicker-dropdown rtl-right-margin-small\" : \"timepicker-dropdown\"}\r\n                        value={minutes}\r\n                        items={minutesItems}\r\n                        placeholder={localize(\"minutePlaceholder\")}\r\n                        getA11ySelectionMessage={onMinuteChange}\r\n                    />\r\n                </Flex.Item>\r\n            </Flex>\r\n        </div>\r\n    )\r\n    return (\r\n        <Popup\r\n            open={open}\r\n            trapFocus\r\n            onOpenChange={onOpenChange}\r\n            trigger={<Input\r\n                className={props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}\r\n                disabled={props.isDisabled} fluid value={text} icon={<Icon iconName=\"Clock\" />}\r\n                iconPosition={props.dir === LanguageDirection.Rtl ? \"start\" : \"end\"}\r\n            />}\r\n            content={popupContent}\r\n        />\r\n    )\r\n}\r\n\r\nTimePicker.defaultProps = {\r\n    hours: 0,\r\n    minutes: 0\r\n};","// <copyright file=\"color-picker.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport React from 'react';\r\nimport { SwatchColorPicker } from '@fluentui/react/lib';\r\nimport Resources from '../../../constants/resources';\r\nimport \"./color-picker.css\";\r\n\r\ninterface IColorPickerProps {\r\n    onColorChange: (id?: string, color?: string) => void,\r\n    selectedColor?: string,\r\n}\r\n\r\nexport const ColorPicker: React.FunctionComponent<IColorPickerProps> = props => {\r\n    const [selectedId, setSelectedId] = React.useState<string | undefined>();\r\n    const [divKey, setDivKey] = React.useState<number>(1);\r\n\r\n    React.useEffect(() => {\r\n        var selectedIdFound = Resources.colorCells.find(x => x.color === props.selectedColor);\r\n        setSelectedId(selectedIdFound?.id);\r\n        setDivKey(divKey! + 1);\r\n    }, [props.selectedColor]);\r\n\r\n    return (\r\n        <div className=\"color-picker\" key={divKey}>\r\n            <SwatchColorPicker columnCount={5} cellShape={'circle'} colorCells={Resources.colorCells} selectedId={selectedId} onColorChanged={props.onColorChange }/>\r\n        </div>\r\n    );\r\n}","// <copyright file=\"create-event-step1.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport { Button, Dropdown, ExclamationCircleIcon, FilesUploadIcon, Flex, Input, Text, TextArea, Image as FluentImage } from '@fluentui/react-northstar';\r\nimport moment from \"moment-timezone\";\r\nimport { TFunction } from \"i18next\";\r\nimport * as React from \"react\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { uploadEventImage, searchEventAsync } from \"../../api/create-event-api\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\nimport Resources, { IConstantDropdownItem } from \"../../constants/resources\";\r\nimport { saveEventAsDraftAsync } from \"../../helpers/event-helper\";\r\nimport { getLocalizedEventTypes } from \"../../helpers/localized-constants\";\r\nimport { EventType } from \"../../models/event-type\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { ISelectedDropdownItem } from \"../../models/ISelectedDropdownItem\";\r\nimport StartDate from \"../common/date-picker/datepicker\";\r\nimport { TimePicker } from \"../common/time-picker/timepicker\";\r\nimport { ICreateEventState } from \"./create-event-wrapper\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { ColorPicker } from \"../common/color-picker/color-picker\";\r\nimport { LanguageDirection } from '../../models/language-direction';\r\n\r\ninterface ICreateEventsStep1Props extends WithTranslation, IWithContext {\r\n    navigateToPage: (nextPage: number, stepEventState: ICreateEventState) => void;\r\n    eventPageState: ICreateEventState;\r\n}\r\n\r\ninterface ICreateEventsStep1State {\r\n    theme: string,\r\n    screenWidth: number,\r\n    projectStartDate: number,\r\n    isPhotoValid: boolean,\r\n    isColorValid: boolean,\r\n    isPhotoDimentionsValid: boolean,\r\n    isNameValid: boolean,\r\n    isEventNameExisting:boolean,\r\n    isMeetingLinkValid: boolean,\r\n    isDescriptionValid: boolean,\r\n    isVenueValid: boolean,\r\n    isEventTypeValid: boolean,\r\n    isEventCategoryValid: boolean,\r\n    isMaxNoofParticipantsValid: boolean,\r\n    isTimeValid: boolean,\r\n    eventDetails: IEvent,\r\n    eventTypes: Array<IConstantDropdownItem>,\r\n    categories: Array<IConstantDropdownItem>,\r\n    selectedEventType: ISelectedDropdownItem,\r\n    selectedCategory: ISelectedDropdownItem,\r\n    imageUploadLoader: boolean,\r\n    isLoading: boolean,\r\n    isValidatingStep1: boolean,\r\n    inputKey: number\r\n}\r\n\r\n/** This component adds a new event category */\r\nclass CreateEventStep1 extends React.Component<ICreateEventsStep1Props, ICreateEventsStep1State> {\r\n    readonly localize: TFunction;\r\n    // Create a reference to the hidden file input element\r\n    inputReference: any;\r\n    teamId: string;\r\n    timeZone: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        let eventTypes = getLocalizedEventTypes(this.localize);\r\n        window.addEventListener(\"resize\", this.update);\r\n        this.inputReference = React.createRef();\r\n        let date = new Date();\r\n        this.teamId = \"\";\r\n        this.timeZone = moment.tz.guess();\r\n\r\n        this.state = {\r\n            imageUploadLoader: false,\r\n            inputKey: 1,\r\n            isLoading: false,\r\n            categories: this.props.eventPageState.categories.length > 0 ? this.props.eventPageState.categories : new Array<IConstantDropdownItem>(),\r\n            theme: \"\",\r\n            eventTypes: eventTypes,\r\n            screenWidth: window.innerWidth,\r\n            projectStartDate: date.setDate(date.getDate() + 1),\r\n            isPhotoValid: true,\r\n            isColorValid: true,\r\n            isEventNameExisting: false,\r\n            isPhotoDimentionsValid: true,\r\n            isNameValid: true,\r\n            isDescriptionValid: true,\r\n            isTimeValid: true,\r\n            isVenueValid: true,\r\n            isMeetingLinkValid: true,\r\n            isEventTypeValid: true,\r\n            isEventCategoryValid: true,\r\n            isMaxNoofParticipantsValid: true,\r\n            isValidatingStep1: false,\r\n            selectedEventType: this.props.eventPageState.eventDetails.type === undefined ? {\r\n                key: EventType.Teams.toString(), header: eventTypes.find((event) => event.id === EventType.Teams)!.name!\r\n            } : {\r\n                    key: eventTypes.find((event) => event.id === this.props.eventPageState.eventDetails.type)!.id.toString(), header: eventTypes.find((event) => event.id === this.props.eventPageState.eventDetails.type)!.name!\r\n                },\r\n            selectedCategory: this.props.eventPageState.selectedCategory!,\r\n            eventDetails: { ...this.props.eventPageState.eventDetails }\r\n        }\r\n    }\r\n\r\n    UNSAFE_componentWillReceiveProps(nextProps: ICreateEventsStep1Props) {\r\n        if (nextProps.eventPageState.categories !== this.props.eventPageState.categories) {\r\n            this.setState({ categories: nextProps.eventPageState.categories });\r\n        }\r\n\r\n        if (nextProps.eventPageState.eventDetails !== this.props.eventPageState.eventDetails) {\r\n            this.setState({ eventDetails: { ...nextProps.eventPageState.eventDetails } });\r\n        }\r\n\r\n        if (nextProps.eventPageState.selectedCategory !== this.props.eventPageState.selectedCategory) {\r\n            this.setState({ selectedCategory: nextProps.eventPageState.selectedCategory! });\r\n        }\r\n\r\n        if (nextProps.teamsContext && nextProps.teamsContext !== this.props.teamsContext) {\r\n            this.setState({ theme: nextProps.teamsContext.theme! });\r\n            this.teamId = nextProps.teamsContext.teamId!;\r\n        }\r\n    }\r\n\r\n    /** Update the screen width for screen resize */\r\n    update = () => {\r\n        this.setState({\r\n            screenWidth: window.innerWidth\r\n        });\r\n    };\r\n\r\n    /**\r\n    * Function for applying validation on the fields for save as draft functionality\r\n    */\r\n    checkIfSaveAsDraftAllowed = () => {\r\n        let eventValidationStatus = { isPhotoValid: true, isColorValid: true, isNameValid: true, isDescriptionValid: true, isEventTypeValid: true, isEventCategoryValid: true, isVenueValid: true, isMaxNoofPartipantsValid: true, isMeetingLinkValid: true };\r\n\r\n        if (this.state.eventDetails.name == \"\" || this.state.eventDetails.name.length > Resources.eventNameMaxLength) {\r\n            eventValidationStatus.isNameValid = false;\r\n        }\r\n\r\n        this.setState({\r\n            isPhotoValid: eventValidationStatus.isPhotoValid,\r\n            isColorValid: eventValidationStatus.isColorValid,\r\n            isNameValid: eventValidationStatus.isNameValid,\r\n            isDescriptionValid: eventValidationStatus.isDescriptionValid,\r\n            isEventTypeValid: eventValidationStatus.isEventTypeValid,\r\n            isEventCategoryValid: eventValidationStatus.isEventCategoryValid,\r\n            isVenueValid: eventValidationStatus.isVenueValid,\r\n            isMaxNoofParticipantsValid: eventValidationStatus.isMaxNoofPartipantsValid,\r\n            isMeetingLinkValid: eventValidationStatus.isMeetingLinkValid\r\n        });\r\n\r\n        if (eventValidationStatus.isPhotoValid && eventValidationStatus.isColorValid && eventValidationStatus.isNameValid &&\r\n            eventValidationStatus.isDescriptionValid && eventValidationStatus.isEventTypeValid &&\r\n            eventValidationStatus.isEventCategoryValid && eventValidationStatus.isVenueValid &&\r\n            eventValidationStatus.isMaxNoofPartipantsValid && eventValidationStatus.isMeetingLinkValid &&\r\n            !this.state.isEventNameExisting) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Function for applying validation on the fields before moving onto next step in event creation\r\n    */\r\n    checkIfNextAllowed = async () => {\r\n        let eventValidationStatus = { isTimeValid: true, isPhotoValid: true, isColorValid: true, isNameValid: true, isDescriptionValid: true, isEventTypeValid: true, isEventCategoryValid: true, isVenueValid: true, isMaxNoofPartipantsValid: true, isMeetingLinkValid: true };\r\n\r\n        if (!this.state.eventDetails.photo && !this.state.eventDetails.selectedColor) {\r\n            eventValidationStatus.isPhotoValid = false;\r\n            eventValidationStatus.isColorValid = false;\r\n        }\r\n\r\n        if (this.state.eventDetails.name.trim() == \"\" || this.state.eventDetails.name.length > Resources.eventNameMaxLength) {\r\n            eventValidationStatus.isNameValid = false;\r\n        }\r\n\r\n        let isEventNameAlreadyExists: boolean = false;\r\n\r\n        if (eventValidationStatus.isNameValid) {\r\n            // Checking whether event name already exists-\r\n            // - creating a new event\r\n            // - updating a event after name changed\r\n            if (!this.props.eventPageState.isEdit || (this.props.eventPageState.eventDetails.name !== this.state.eventDetails.name.trim())) {\r\n                isEventNameAlreadyExists = await this.checkEventName();\r\n            }\r\n        }\r\n\r\n        if (this.state.eventDetails.description.trim() == \"\" || this.state.eventDetails.description.length > Resources.eventDescriptionMaxLength) {\r\n            eventValidationStatus.isDescriptionValid = false;\r\n        }\r\n        if (!this.state.eventDetails.type) {\r\n            eventValidationStatus.isEventTypeValid = false;\r\n        }\r\n        if (!this.state.eventDetails.categoryId) {\r\n            eventValidationStatus.isEventCategoryValid = false;\r\n        }\r\n        if (this.state.eventDetails.type === EventType.InPerson && this.state.eventDetails.venue == \"\") {\r\n            eventValidationStatus.isVenueValid = false;\r\n        }\r\n        if (!this.state.eventDetails.maximumNumberOfParticipants) {\r\n            eventValidationStatus.isMaxNoofPartipantsValid = false;\r\n        }\r\n        if (this.state.eventDetails.type === EventType.LiveEvent && (this.state.eventDetails.meetingLink == \"\" || !this.state.eventDetails.meetingLink.match(Resources.validUrlRegExp))) {\r\n            eventValidationStatus.isMeetingLinkValid = false;\r\n        }\r\n\r\n        if (this.checkEventAlreadyStarted()) {\r\n            if ((!this.state.eventDetails!.startTime || !this.state.eventDetails!.endTime) || (this.state.eventDetails!.startTime! >= this.state.eventDetails!.endTime!)) {\r\n                eventValidationStatus.isTimeValid = false;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            isPhotoValid: eventValidationStatus.isPhotoValid,\r\n            isColorValid: eventValidationStatus.isColorValid,\r\n            isNameValid: eventValidationStatus.isNameValid,\r\n            isDescriptionValid: eventValidationStatus.isDescriptionValid,\r\n            isEventTypeValid: eventValidationStatus.isEventTypeValid,\r\n            isEventCategoryValid: eventValidationStatus.isEventCategoryValid,\r\n            isVenueValid: eventValidationStatus.isVenueValid,\r\n            isMaxNoofParticipantsValid: eventValidationStatus.isMaxNoofPartipantsValid,\r\n            isMeetingLinkValid: eventValidationStatus.isMeetingLinkValid,\r\n            isTimeValid: eventValidationStatus.isTimeValid,\r\n            isEventNameExisting: isEventNameAlreadyExists,\r\n            isValidatingStep1: false\r\n        });\r\n\r\n        if (eventValidationStatus.isPhotoValid && eventValidationStatus.isColorValid && eventValidationStatus.isNameValid &&\r\n            eventValidationStatus.isDescriptionValid && eventValidationStatus.isEventTypeValid &&\r\n            eventValidationStatus.isEventCategoryValid && eventValidationStatus.isVenueValid &&\r\n            eventValidationStatus.isMaxNoofPartipantsValid && eventValidationStatus.isMeetingLinkValid &&\r\n            eventValidationStatus.isTimeValid && !this.state.isEventNameExisting) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /** Check whether event start date is less than current date while editing an event */\r\n    checkEventAlreadyStarted = () => {\r\n        return !(this.props.eventPageState.isEdit && moment.utc(this.state.eventDetails.startDate).local().toDate() < new Date());\r\n    }\r\n\r\n    /**\r\n    * Event handler for moving onto next event-step\r\n    */\r\n    nextBtnClick = async () => {\r\n        this.setState({ isValidatingStep1: true });\r\n\r\n        var isSubmitAllowed = await this.checkIfNextAllowed();\r\n        if (isSubmitAllowed) {\r\n            let modifiedState = { ...this.props.eventPageState };\r\n            modifiedState.eventDetails = this.state.eventDetails;\r\n            modifiedState.selectedCategory = this.state.selectedCategory;\r\n            modifiedState.selectedEvent = this.state.selectedEventType;\r\n            modifiedState.categories = this.state.categories;\r\n\r\n            this.props.navigateToPage(2, modifiedState);\r\n        }\r\n    };\r\n\r\n    /**\r\n    * Event handler on selecting start date\r\n    */\r\n    setStartDate = (date: Date) => {\r\n        let eventDetails = this.state.eventDetails;\r\n        eventDetails.startDate = date;\r\n        eventDetails.endDate = date;\r\n        this.setState({ eventDetails: eventDetails });\r\n    }\r\n\r\n    /**\r\n    * Event handler on selecting end date\r\n    */\r\n    setEndDate = (date: Date) => {\r\n        let eventDetails = this.state.eventDetails;\r\n        eventDetails.endDate = date;\r\n        this.setState({ eventDetails: eventDetails });\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid name\r\n    */\r\n    getNameError = () => {\r\n        if (!this.state.isNameValid) {\r\n            return (<Text data-testid=\"event_name_req_error\" content={this.localize(\"required\")} error />);\r\n        }\r\n        else if (this.state.eventDetails.name.length > Resources.eventNameMaxLength) {\r\n            return (<Text data-testid=\"event_name_max_error\" content={this.localize(\"eventNameMaxCharError\")} error />);\r\n        }\r\n        else if (this.state.isEventNameExisting) {\r\n            return (<Text content={this.localize(\"eventNameAlreadyExists\")} error />);\r\n        }\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n    * Event handler on fecthing the validation message for valid event team's meeting link\r\n    */\r\n    getMeetingLinkError = () => {\r\n        if (!this.state.isMeetingLinkValid) {\r\n            return (<Text data-testid=\"event_link_req_error\" content={this.localize(\"validUrlErrorMessage\")} error />);\r\n        }\r\n\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid description\r\n    */\r\n    getDescriptionError = () => {\r\n        if (!this.state.isDescriptionValid) {\r\n            return (<Text data-testid=\"event_desc_req_error\" content={this.localize(\"required\")} error />);\r\n        }\r\n        if (this.state.eventDetails.description.length > Resources.eventDescriptionMaxLength) {\r\n            return (<Text data-testid=\"event_desc_max_error\" content={this.localize(\"eventDescriptionMaxCharError\")} error />);\r\n        }\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid venue\r\n    */\r\n    getVenueError = () => {\r\n        if (!this.state.isVenueValid) {\r\n            return (<Text data-testid=\"event_venue_req_error\" content={this.localize(\"required\")} error size=\"medium\" />);\r\n        }\r\n        if (this.state.eventDetails.venue.length > Resources.eventVenueMaxLength) {\r\n            return (<Text data-testid=\"event_venue_max_error\" content={this.localize(\"eventVenueMaxCharError\")} error />);\r\n        }\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid event type\r\n    */\r\n    getEventTypeError = () => {\r\n        if (!this.state.isEventTypeValid) {\r\n            return (<Text data-testid=\"event_type_error\" content={this.localize(\"required\")} error />);\r\n        }\r\n        else {\r\n            return (<Text content={\"\"} error size=\"medium\" />);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid event category\r\n    */\r\n    getEventCategoryError = () => {\r\n        if (!this.state.isEventCategoryValid) {\r\n            return (<Text data-testid=\"event_category_error\" content={this.localize(\"required\")} error />);\r\n        }\r\n        else {\r\n            return (<Text content={\"\"} error size=\"medium\" />);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid image\r\n    */\r\n    getPhotoError = () => {\r\n        if (!this.state.isPhotoValid) {\r\n            return (<Text data-testid=\"event_photo_error\" content={this.localize(\"required\")} error />);\r\n        }\r\n        else if (!this.state.isPhotoDimentionsValid) {\r\n            return (<Text content={this.localize(\"invalidImageDimensions\")} error />);\r\n        }\r\n        else {\r\n            return (<Text content={\"\"} error size=\"medium\" />);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler on fetching the validation message for valid mnaximum no of participants\r\n    */\r\n    getMaximumNoofParticipantsError = () => {\r\n        if (!this.state.isMaxNoofParticipantsValid) {\r\n            return (<Text data-testid=\"event_max_req_error\" content={this.localize(\"required\")} error />);\r\n        }\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n    * Event handler on name change\r\n    */\r\n    onEventNameChange = (eventName: string) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, name: eventName },\r\n            isNameValid: true,\r\n            isEventNameExisting: false\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler on description change\r\n    */\r\n    onEventDescriptionChange = (eventDescription: string) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, description: eventDescription },\r\n            isDescriptionValid: true\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler on venue change\r\n    */\r\n    onEventVenueChange = (eventVenue: string) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, venue: eventVenue },\r\n            isVenueValid: true\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler on live event url change\r\n    */\r\n    onLiveEventUrlChange = (eventUrl: string) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, meetingLink: eventUrl },\r\n            isMeetingLinkValid: true\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler on maximum number of participants change\r\n    */\r\n    onMaxNoOfParticipantsChange = (eventMaxNoofParticipants: string) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, maximumNumberOfParticipants: parseInt(eventMaxNoofParticipants) },\r\n            isMaxNoofParticipantsValid: true\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler on start time change\r\n    */\r\n    onStartTimeChange = (hours: number, min: number) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, startTime: new Date(new Date().setHours(hours, min)), endTime: this.state.eventDetails.endTime === undefined ? new Date(new Date().setHours(hours, min + 15)) : this.state.eventDetails.endTime }\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler on end time change\r\n    */\r\n    onEndTimeChange = (hours: number, min: number) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, endTime: new Date(new Date().setHours(hours, min)) }\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Function calling a click event on a hidden file input\r\n    */\r\n    handleUploadClick = (event: any) => {\r\n        this.inputReference.current.click();\r\n    };\r\n\r\n    /**\r\n     * The event handler called when the selected color gets changed\r\n     * @param id The color Id\r\n     * @param color The color code\r\n     */\r\n    onColorChange = (id?: string | undefined, color?: string | undefined) => {\r\n        this.setState((prevState: ICreateEventsStep1State) => ({\r\n            eventDetails: { ...prevState.eventDetails, selectedColor: color, photo: \"\" }, inputKey: this.state.inputKey + 1, isPhotoDimentionsValid: true, isPhotoValid: true\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Function called for uploading image on azure\r\n    */\r\n    uploadImage = async (formData: FormData) => {\r\n        this.setState({ imageUploadLoader: true });\r\n        let response = await uploadEventImage(formData, this.teamId);\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data) {\r\n            this.setState((prevState: ICreateEventsStep1State) => ({\r\n                eventDetails: { ...prevState.eventDetails, photo: response.data, selectedColor: \"\" },\r\n                imageUploadLoader: false\r\n            }));\r\n        }\r\n        else {\r\n            this.setState({ imageUploadLoader: false });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event Handler for image change\r\n    */\r\n    handleChange = (event: any) => {\r\n        const fileUploaded = event.target.files[0];\r\n        if (fileUploaded) {\r\n            let isValid = true;\r\n            let img = new Image\r\n            img.src = window.URL.createObjectURL(fileUploaded)\r\n            img.onload = () => {\r\n                if (img.width < 850 || img.height < 290 || img.width > 900 || img.height > 310) {\r\n                    isValid = false;\r\n                } else {\r\n                    const formData = new FormData();\r\n                    formData.append(\r\n                        \"fileInfo\",\r\n                        fileUploaded,\r\n                        fileUploaded.name\r\n                    );\r\n                    this.uploadImage(formData);\r\n                }\r\n\r\n                this.setState({ isPhotoDimentionsValid: isValid });\r\n            }\r\n        }\r\n    };\r\n\r\n    /** Validate whether the event name already exists */\r\n    checkEventName = async () => {\r\n        let response = await searchEventAsync(this.state.eventDetails.name);\r\n        if (response && response.status === ResponseStatus.OK && response.data) {\r\n            let isEventAlreadyExists = response.data.some((event: IEvent) => event.name.toLowerCase() === this.state.eventDetails.name.trim().toLowerCase());\r\n\r\n            return isEventAlreadyExists;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler for saving event as a draft\r\n    */\r\n    saveEventAsDraft = async () => {\r\n        let result = this.checkIfSaveAsDraftAllowed();\r\n        if (result) {\r\n            this.setState({ isLoading: true });\r\n            let modifiedState = { ...this.props.eventPageState };\r\n            modifiedState.eventDetails = this.state.eventDetails;\r\n            modifiedState.selectedCategory = this.state.selectedCategory;\r\n            modifiedState.selectedEvent = this.state.selectedEventType;\r\n            modifiedState.categories = this.state.categories;\r\n\r\n            let result = await saveEventAsDraftAsync(modifiedState, this.teamId);\r\n            if (result) {\r\n                this.props.microsoftTeams.tasks.submitTask({ isSuccess: true, isDraft: true });\r\n            }\r\n            else {\r\n                this.setState({ isLoading: false });\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Renders a component */\r\n    render() {\r\n        const onEventTypeChange = {\r\n            onAdd: (item: any) => {\r\n                this.setState((prevState: ICreateEventsStep1State) => ({\r\n                    eventDetails: { ...prevState.eventDetails, type: item.key },\r\n                    isEventTypeValid: true,\r\n                    selectedEventType: item\r\n                }));\r\n                return \"\";\r\n            }\r\n        }\r\n        const onEventCategoryChange = (item: any) => {\r\n            this.setState((prevState: ICreateEventsStep1State) => ({\r\n                eventDetails: { ...prevState.eventDetails, categoryId: item.key },\r\n                isEventCategoryValid: true,\r\n                selectedCategory: item\r\n            }));\r\n        }\r\n\r\n        const categoriesList = new Array<ISelectedDropdownItem>();\r\n        for (var i = 0; i < this.state.categories.length; i++) {\r\n            categoriesList.push({ key: this.state.categories[i].id.toString(), header: this.state.categories[i].name })\r\n        }\r\n\r\n        let minDate = new Date();\r\n        minDate.setDate(minDate.getDate() + 1);\r\n\r\n        return (\r\n            <>\r\n                <div className=\"page-content\">\r\n                    <Flex gap=\"gap.smaller\">\r\n                        <Text size=\"large\" content={this.localize(\"eventDetailsStep1\")} />\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"margin-top\" vAlign=\"center\">\r\n                        <Text className=\"form-label margin-right\" content={this.localize(\"eventPhotoStep1\")} /><ExclamationCircleIcon title={this.localize(\"imageInfoIcon\")} size=\"small\" />\r\n                        <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                            {this.getPhotoError()}\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    {this.state.eventDetails.photo && <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\" vAlign=\"end\">\r\n                        <FluentImage className=\"event-image-color\" fluid src={this.state.eventDetails.photo} />\r\n                    </Flex>}\r\n                    {this.state.eventDetails.selectedColor && <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\" vAlign=\"end\">\r\n                        <div className=\"event-image-color\" style={{ backgroundColor: this.state.eventDetails.selectedColor }}>\r\n                            <Flex className=\"event-image-color\" hAlign=\"center\" vAlign=\"center\">\r\n                                <Text className=\"event-color-text\" size=\"large\" weight=\"semibold\" content={this.state.eventDetails.name} />\r\n                            </Flex>\r\n                        </div>\r\n                    </Flex>}\r\n                    <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\" vAlign=\"center\" >\r\n                        <Flex.Item>\r\n                            <>\r\n                                <Button disabled={this.state.imageUploadLoader} loading={this.state.imageUploadLoader} onClick={this.handleUploadClick} size=\"medium\" icon={<FilesUploadIcon className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}/>} content={this.state.eventDetails.photo && this.state.eventDetails.photo.length ? this.localize(\"changePhotoStep1\") : this.localize(\"uploadPhotoStep1\")} iconPosition=\"before\" />\r\n                                <input\r\n                                    type=\"file\"\r\n                                    ref={this.inputReference}\r\n                                    onChange={this.handleChange}\r\n                                    style={{ display: 'none' }}\r\n                                    key={this.state.inputKey}\r\n                                />\r\n                                <Text className={this.props.dir === LanguageDirection.Rtl ? \"form-label rtl-left-margin-small\" : \"form-label\"} content={this.localize(\"orLabelForImageOrColor\")} />\r\n                            </>\r\n                        </Flex.Item>\r\n                        <Flex.Item>\r\n                            <div>\r\n                                <ColorPicker onColorChange={this.onColorChange} selectedColor={this.state.eventDetails.selectedColor} />\r\n                            </div>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Flex className=\"margin-top\" gap=\"gap.smaller\">\r\n                        <Text className=\"form-label\" content={this.localize(\"eventNameStep1\")} />\r\n                        <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                            {this.getNameError()}\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                        <Input data-testid=\"event_name_input\" maxLength={Resources.eventNameMaxLength} fluid placeholder={this.localize(\"eventNamePlaceholderStep1\")} value={this.state.eventDetails.name} onChange={(event: any) => this.onEventNameChange(event.target.value)} />\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Flex>\r\n                                <Text className=\"form-label\" content={this.localize(\"eventTypeStep1\")} />\r\n                                <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                                    {this.getEventTypeError()}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Flex>\r\n                                <Text className=\"form-label\" content={this.localize(\"category\")} />\r\n                                <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                                    {this.getEventCategoryError()}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </Flex.Item>\r\n\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Dropdown\r\n                                className={this.props.dir === LanguageDirection.Rtl ? \"dropdown-flex-half rtl-left-margin-small\" : \"dropdown-flex-half\"}\r\n                                fluid\r\n                                items={this.state.eventTypes.map((value: IConstantDropdownItem) => { return { key: value.id, header: value.name } })}\r\n                                value={this.state.selectedEventType}\r\n                                placeholder={this.localize(\"selectEventTypePlaceholder\")}\r\n                                getA11ySelectionMessage={onEventTypeChange}\r\n                                data-testid=\"event_type_dropdown\"\r\n                            />\r\n                        </Flex.Item>\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Dropdown\r\n                                className=\"dropdown-flex-half\"\r\n                                fluid\r\n                                onChange={(event, data) => { onEventCategoryChange(data.value) }}\r\n                                value={this.state.selectedCategory}\r\n                                items={categoriesList}\r\n                                placeholder={this.localize(\"selectCategoryPlaceholder\")}\r\n                                data-testid=\"event_category_dropdown\"\r\n                            />\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    {\r\n                        this.state.eventDetails.type === EventType.LiveEvent &&\r\n                        <>\r\n                            <Flex className=\"margin-top\" gap=\"gap.smaller\">\r\n                                <Text className=\"form-label\" content={this.localize(\"liveEventUrlStep1\")} />\r\n                                <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                                    {this.getMeetingLinkError()}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                            <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                                <Input fluid value={this.state.eventDetails.meetingLink} placeholder={this.localize(\"liveEventUrlPlaceholder\")}\r\n                                    onChange={(event: any) => this.onLiveEventUrlChange(event.target.value)} data-testid=\"event_link_input\" />\r\n                            </Flex>\r\n                        </>\r\n                    }\r\n                    {\r\n                        this.state.eventDetails.type === EventType.InPerson && <>\r\n                            <Flex className=\"margin-top\" gap=\"gap.smaller\">\r\n                                <Text className=\"form-label\" content={this.localize(\"venue\")} />\r\n                                <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                                    {this.getVenueError()}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                            <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                                <Input\r\n                                    maxLength={Resources.eventVenueMaxLength}\r\n                                    value={this.state.eventDetails.venue}\r\n                                    onChange={(event: any) => this.onEventVenueChange(event.target.value)}\r\n                                    fluid\r\n                                    placeholder={this.localize(\"venuePlaceholder\")}\r\n                                    data-testid=\"event_venue_input\"\r\n                                />\r\n                            </Flex>\r\n                        </>\r\n                    }\r\n                    <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                        <Text className=\"form-label\" content={this.localize(\"eventDescriptionStep1\")} />\r\n                        <Flex.Item push grow={this.props.dir === LanguageDirection.Rtl}>\r\n                            {this.getDescriptionError()}\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                        <TextArea\r\n                            maxLength={Resources.eventDescriptionMaxLength}\r\n                            fluid\r\n                            placeholder={this.localize(\"eventDescriptionPlaceholder\")}\r\n                            value={this.state.eventDetails.description}\r\n                            onChange={(event: any) => this.onEventDescriptionChange(event.target.value)}\r\n                            data-testid=\"event_description_input\"\r\n                        />\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                        <Text title={this.timeZone} truncated className=\"form-label\" content={`${this.localize(\"yourTimeZone\")}: ${this.timeZone}`} />\r\n                    </Flex>\r\n                    {\r\n                        this.state.screenWidth >= 600 &&\r\n                        <>\r\n                            <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                                <Flex.Item size=\"size.half\">\r\n                                    <div>\r\n                                        <Text className=\"form-label\" align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={`${this.localize(\"startDateStep1\")}`} />\r\n                                        <Flex className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}>\r\n                                            <StartDate\r\n                                                screenWidth={this.state.screenWidth}\r\n                                                theme={this.state.theme}\r\n                                                selectedDate={this.state.eventDetails.startDate}\r\n                                                minDate={minDate}\r\n                                                onDateSelect={this.setStartDate}\r\n                                                disableSelectionForPastDate={!this.checkEventAlreadyStarted()}\r\n                                            />\r\n                                        </Flex>\r\n                                    </div>\r\n                                </Flex.Item>\r\n                                <Flex.Item size=\"size.half\">\r\n                                    <div>\r\n                                        <Text className=\"form-label\" align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={`${this.localize(\"endDateStep1\")}`} />\r\n                                        <StartDate\r\n                                            screenWidth={this.state.screenWidth}\r\n                                            theme={this.state.theme}\r\n                                            minDate={this.state.eventDetails.endDate}\r\n                                            selectedDate={this.state.eventDetails.endDate}\r\n                                            onDateSelect={this.setEndDate}\r\n                                            disableSelectionForPastDate={!this.checkEventAlreadyStarted()}\r\n                                        />\r\n                                    </div>\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </>\r\n                    }\r\n                    {\r\n                        this.state.screenWidth < 600 &&\r\n                        <React.Fragment>\r\n                            <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                                <Text className=\"form-label\" content={this.localize(\"startDateStep1\")} />\r\n                            </Flex>\r\n                            <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                                <StartDate\r\n                                    screenWidth={this.state.screenWidth}\r\n                                    theme={this.state.theme}\r\n                                    selectedDate={this.state.eventDetails.startDate}\r\n                                    minDate={minDate}\r\n                                    onDateSelect={this.setStartDate}\r\n                                    disableSelectionForPastDate={!this.checkEventAlreadyStarted()}\r\n                                />\r\n                            </Flex>\r\n                            <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                                <Text className=\"form-label\" content={this.localize(\"endDateStep1\")} />\r\n                            </Flex>\r\n                            <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                                <StartDate\r\n                                    screenWidth={this.state.screenWidth}\r\n                                    theme={this.state.theme}\r\n                                    minDate={this.state.eventDetails.startDate}\r\n                                    selectedDate={this.state.eventDetails.endDate}\r\n                                    onDateSelect={this.setEndDate}\r\n                                    disableSelectionForPastDate={!this.checkEventAlreadyStarted()}\r\n                                />\r\n                            </Flex>\r\n                        </React.Fragment>\r\n                    }\r\n\r\n                    <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Flex gap=\"gap.smaller\">\r\n                                <Flex.Item size=\"size.half\">\r\n                                    <Text className=\"form-label\" align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.localize(\"startTimeStep1\")} />\r\n                                </Flex.Item>\r\n                                <Flex.Item size=\"size.half\">\r\n                                    <Text className=\"form-label\" align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.localize(\"endTimeStep1\")} />\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Flex>\r\n                                <Text className=\"form-label\" align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.localize(\"maxParticipantsStep1\")} />\r\n                                <Flex.Item push={this.props.dir === LanguageDirection.Ltr} grow={this.props.dir === LanguageDirection.Rtl}>\r\n                                    {this.getMaximumNoofParticipantsError()}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                        <Flex.Item size=\"size.half\" className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}>\r\n                            <Flex gap=\"gap.smaller\">\r\n                                <Flex.Item size=\"size.half\">\r\n                                    <TimePicker\r\n                                        hours={this.state.eventDetails.startTime?.getHours()}\r\n                                        minutes={this.state.eventDetails.startTime?.getMinutes()}\r\n                                        isDisabled={!this.checkEventAlreadyStarted()}\r\n                                        onPickerClose={this.onStartTimeChange}\r\n                                        dir={this.props.dir}\r\n                                    />\r\n                                </Flex.Item>\r\n                                <Flex.Item size=\"size.half\">\r\n                                    <TimePicker\r\n                                        hours={this.state.eventDetails.endTime?.getHours()}\r\n                                        minutes={this.state.eventDetails.endTime?.getMinutes()}\r\n                                        onPickerClose={this.onEndTimeChange}\r\n                                        minHours={this.state.eventDetails.startTime?.getHours()!}\r\n                                        minMinutes={undefined}\r\n                                        isDisabled={!this.checkEventAlreadyStarted()}\r\n                                        dir={this.props.dir}\r\n                                    />\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                        <Flex.Item size=\"size.half\" className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}>\r\n                            <Input type=\"number\" min={1} fluid value={this.state.eventDetails.maximumNumberOfParticipants.toString()} onChange={(event: any) => this.onMaxNoOfParticipantsChange(event.target.value)} data-testid=\"event_maxParticipants_input\" />\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                </div>\r\n                {this.props.dir === LanguageDirection.Ltr && <Flex gap=\"gap.smaller\" className=\"button-footer\" vAlign=\"center\">\r\n                    {!this.state.isTimeValid && <Text error content={this.localize(\"startAndEndTimeError\")} />}\r\n                    <Flex.Item push>\r\n                        <Text weight=\"bold\" content={this.localize(\"step1Of3\")} />\r\n                    </Flex.Item>\r\n                    {(!this.props.eventPageState.isEdit || (this.props.eventPageState.isEdit && this.props.eventPageState.isDraft)) && <Button disabled={this.state.isLoading || this.state.isValidatingStep1} loading={this.state.isLoading} onClick={this.saveEventAsDraft} content={this.localize(\"saveAsDraft\")} secondary data-testid=\"event_save_button\" />}\r\n                    <Button data-testid=\"event_next_button\" content={this.localize(\"nextButton\")} loading={this.state.isValidatingStep1} disabled={this.state.isLoading || this.state.isValidatingStep1} primary onClick={this.nextBtnClick} />\r\n                </Flex>}\r\n\r\n                {this.props.dir === LanguageDirection.Rtl && <Flex gap=\"gap.smaller\" className=\"button-footer\" vAlign=\"center\">\r\n                    <Flex.Item push>\r\n                        <Text error content={!this.state.isTimeValid ? this.localize(\"startAndEndTimeError\") : \"\"} />\r\n                    </Flex.Item>\r\n                    <Text className=\"rtl-left-margin-small\" weight=\"bold\" content={this.localize(\"step1Of3\")} />\r\n                    {(!this.props.eventPageState.isEdit || (this.props.eventPageState.isEdit && this.props.eventPageState.isDraft)) && <Button className=\"rtl-left-margin-small\" disabled={this.state.isLoading || this.state.isValidatingStep1} loading={this.state.isLoading} onClick={this.saveEventAsDraft} content={this.localize(\"saveAsDraft\")} secondary data-testid=\"event_save_button\" />}\r\n                    <Button data-testid=\"event_next_button\" content={this.localize(\"nextButton\")} loading={this.state.isValidatingStep1} disabled={this.state.isLoading || this.state.isValidatingStep1} primary onClick={this.nextBtnClick} />\r\n                </Flex>}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(CreateEventStep1));","// <copyright file=\"dropdown-search.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Dropdown } from '@fluentui/react-northstar'\r\nimport { searchUsersAndGroups } from \"../../../api/user-group-api\";\r\n\r\ninterface IDropdownProps {\r\n    onItemSelect: (selectedItem: IDropdownItem) => void,\r\n    loadingMessage: string,\r\n    placeholder: string,\r\n    noResultMessage: string\r\n}\r\n\r\nexport interface IDropdownItem {\r\n    header: string,\r\n    content: string,\r\n    id: string,\r\n    email: string,\r\n    isGroup: boolean\r\n}\r\n\r\ninterface IUserOrGroupSearchResult {\r\n    displayName: string,\r\n    id: string,\r\n    email: string,\r\n    isGroup: boolean\r\n}\r\n\r\nconst DropdownSearch: React.FunctionComponent<IDropdownProps> = props => {\r\n    let timeout: number | null = null; // to handle API call on user input\r\n    let initialReults = new Array<IDropdownItem>();\r\n\r\n    const [searchResult, setSearchResult] = React.useState(new Array<IDropdownItem>());\r\n    const [loading, setLoading] = React.useState(true);\r\n    const [isOpen, setOpen] = React.useState(false);\r\n    const [key, setKey] = React.useState(0);\r\n    const [selectedValue, setselectedValue] = React.useState(undefined);\r\n\r\n    const searchUsingAPI = async (searchQuery: string) => {\r\n        if (initialReults.length && !searchQuery.length) {\r\n            setSearchResult(initialReults);\r\n            return;\r\n        }\r\n\r\n        let array = new Array<IDropdownItem>();\r\n        const response = await searchUsersAndGroups(searchQuery);\r\n        if (response.status === 200 && response.data) {\r\n            const results: Array<IUserOrGroupSearchResult> = response.data;\r\n            for (let i = 0; i < results.length; i++) {\r\n                if (results[i].displayName && results[i].email) {\r\n                    array.push({ header: results[i].displayName, content: results[i].email, id: results[i].id, email: results[i].email, isGroup: results[i].isGroup });\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!initialReults.length) {\r\n            initialReults = [...array];\r\n        }\r\n\r\n        setSearchResult(array);\r\n        setLoading(false);\r\n    }\r\n\r\n    const initiateSearch = (searchQuery: string) => {\r\n        if (timeout) {\r\n            window.clearTimeout(timeout);\r\n        }\r\n        if (!loading) {\r\n            setLoading(true);\r\n        }\r\n\r\n        timeout = window.setTimeout(async () => { await searchUsingAPI(searchQuery) }, 750);\r\n    }\r\n\r\n    const onTypeSelection = {\r\n        onAdd: (item: any) => {\r\n            props.onItemSelect(item);\r\n            setKey(key + 1);\r\n            return \"\";\r\n        },\r\n    };\r\n\r\n    return (\r\n        <Dropdown\r\n            search\r\n            styles={{ width: \"100%\" }}\r\n            fluid\r\n            key={key}\r\n            loading={loading}\r\n            loadingMessage={props.loadingMessage}\r\n            items={searchResult}\r\n            value={selectedValue}\r\n            onChange={(e, { value }) => {\r\n                setselectedValue(undefined);\r\n            }}\r\n            onSearchQueryChange={(e, { searchQuery }) => {\r\n                initiateSearch(searchQuery!);\r\n            }}\r\n            onOpenChange={(e, { open, value }) => {\r\n                if (open) {\r\n                    setLoading(true);\r\n                    searchUsingAPI(\"\");\r\n                }\r\n                else {\r\n                    setSearchResult(new Array<IDropdownItem>())\r\n                }\r\n                setOpen(open!);\r\n            }}\r\n            open={isOpen}\r\n            getA11ySelectionMessage={onTypeSelection}\r\n            placeholder={props.placeholder}\r\n            noResultsMessage={props.noResultMessage}\r\n            data-testid=\"audience_dropdown_search\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default DropdownSearch;","// <copyright file=\"create-event-step2.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport DropdownSearch, { IDropdownItem } from \"../common/user-search-dropdown/dropdown-search\";\r\nimport { Text, Flex, Button, Dropdown, Checkbox, Table } from '@fluentui/react-northstar'\r\nimport { TrashCanIcon, QuestionCircleIcon, InfoIcon, ArrowLeftIcon, ArrowRightIcon } from '@fluentui/react-icons-northstar';\r\nimport { TFunction } from \"i18next\";\r\nimport { getLocalizedAudienceTypes } from \"../../helpers/localized-constants\";\r\nimport { IConstantDropdownItem } from \"../../constants/resources\";\r\nimport { ISelectedUserGroup } from \"../../models/ISelectedUserGroup\";\r\nimport { ICreateEventState } from \"./create-event-wrapper\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { ISelectedDropdownItem } from \"../../models/ISelectedDropdownItem\";\r\nimport { EventAudience } from \"../../models/event-audience\";\r\nimport { saveEventAsDraftAsync } from \"../../helpers/event-helper\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\ninterface ICreateEventsStep2Props extends WithTranslation {\r\n    navigateToPage: (nextPage: number, stepEventState: ICreateEventState) => void;\r\n    eventPageState: ICreateEventState;\r\n    dir: LanguageDirection;\r\n}\r\n\r\ninterface ICreateEventsStep2State {\r\n    selectedUsersAndGroups: Array<ISelectedUserGroup>,\r\n    eventDetails: IEvent,\r\n    selectedAudienceType: ISelectedDropdownItem,\r\n    audienceTypes: Array<IConstantDropdownItem>,\r\n    isLoading: boolean\r\n}\r\n\r\n/** This component adds a new event category */\r\nclass CreateEventStep2 extends React.Component<ICreateEventsStep2Props, ICreateEventsStep2State> {\r\n    readonly localize: TFunction;\r\n    teamId: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.teamId = \"\";\r\n        this.localize = this.props.t;\r\n        let audienceTypes = getLocalizedAudienceTypes(this.localize);\r\n        this.state = {\r\n            isLoading: false,\r\n            selectedAudienceType: { key: this.props.eventPageState.eventDetails.audience?.toString()!, header: audienceTypes.find((audience) => audience.id === this.props.eventPageState.eventDetails.audience!)?.name! },\r\n            selectedUsersAndGroups: this.props.eventPageState.selectedUserGroups.length > 0 ? this.props.eventPageState.selectedUserGroups : new Array<ISelectedUserGroup>(),\r\n            eventDetails: this.props.eventPageState.eventDetails,\r\n            audienceTypes: audienceTypes\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.getContext((context: microsoftTeams.Context) => {\r\n            this.teamId = context.teamId!;\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Event handler for moving onto next event-step\r\n    */\r\n    nextBtnClick = () => {\r\n        let modifiedState = { ...this.props.eventPageState };\r\n        modifiedState.selectedUserGroups = this.state.selectedUsersAndGroups;\r\n        modifiedState.selectedAudience = this.state.selectedAudienceType;\r\n        modifiedState.eventDetails = this.state.eventDetails;\r\n        modifiedState.eventDetails.selectedUserOrGroupListJSON = JSON.stringify(this.state.selectedUsersAndGroups);\r\n        this.props.navigateToPage(3, modifiedState);\r\n    };\r\n\r\n    /**\r\n    *  Event handler for moving onto previous event-step\r\n    */\r\n    backBtnClick = () => {\r\n        let modifiedState = { ...this.props.eventPageState };\r\n        modifiedState.selectedUserGroups = this.state.selectedUsersAndGroups;\r\n        modifiedState.selectedAudience = this.state.selectedAudienceType;\r\n        modifiedState.eventDetails = this.state.eventDetails;\r\n        modifiedState.eventDetails.selectedUserOrGroupListJSON = JSON.stringify(this.state.selectedUsersAndGroups);\r\n        this.props.navigateToPage(1, modifiedState);\r\n    };\r\n\r\n    /**\r\n    * Updating member list for mandatory option change event\r\n    * @param memberIndex array index of a specific member in member list\r\n    */\r\n    onToggleChange = (memberIndex: number) => {\r\n        let members = this.state.selectedUsersAndGroups;\r\n        members[memberIndex].isMandatory = !members[memberIndex].isMandatory;\r\n\r\n        this.setState({ selectedUsersAndGroups: members });\r\n    }\r\n\r\n    /**\r\n    * Removing a member from selected member list for an event\r\n    * @param memberIndex array index of a specific member in member list\r\n    */\r\n    deleteItem = (memberIndex: number) => {\r\n        let members = this.state.selectedUsersAndGroups;\r\n        members.splice(memberIndex, 1);\r\n\r\n        this.setState({ selectedUsersAndGroups: members });\r\n    }\r\n\r\n    /**\r\n    * Fetched members through api call are rendered in a component \r\n    */\r\n    renderMembers = () => {\r\n        if (this.state.selectedUsersAndGroups && this.state.selectedUsersAndGroups.length > 0) {\r\n\r\n            let rows = this.state.selectedUsersAndGroups.map((member, index) => {\r\n                return {\r\n                    \"key\": index,\r\n                    \"items\": [\r\n                        {\r\n                            content: <>\r\n                                <Text weight=\"bold\" content={member.displayName} /><br />\r\n                                <Text size=\"small\" content={member.email} />\r\n                            </>,\r\n                            title: member.displayName,\r\n                            truncateContent: true\r\n                        },\r\n                        {\r\n                            content: <>\r\n                                    <Text content={this.localize(\"mandatoryToggleStep2\")}/>\r\n                                    <Checkbox \r\n                                        className={this.props.dir === LanguageDirection.Rtl ? \"rtl-toggle\" : \"\"}\r\n                                        onChange={() => this.onToggleChange(index)}\r\n                                        checked={member.isMandatory}\r\n                                        toggle\r\n                                    />\r\n                                </>,\r\n                            className: \"mandatory-toggle-column\"\r\n                        },\r\n                        {\r\n                            content: <TrashCanIcon className=\"icon-hover\" onClick={() => this.deleteItem(index)} />,\r\n                            className: \"delete-button-column\"\r\n                        }\r\n                    ]\r\n                }\r\n            });\r\n\r\n            return (\r\n                <Table className=\"selected-user-group-table\" rows={rows} />\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <Flex gap=\"gap.small\">\r\n                    <Flex.Item>\r\n                        <div\r\n                            style={{\r\n                                position: \"relative\",\r\n                            }}\r\n                        >\r\n                            <QuestionCircleIcon outline color=\"green\" />\r\n                        </div>\r\n                    </Flex.Item>\r\n                    <Flex.Item grow={this.props.dir === LanguageDirection.Ltr}>\r\n                        <Flex column gap=\"gap.small\" vAlign=\"stretch\" className={this.props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-medium rtl-direction\" : \"\"}>\r\n                            <div>\r\n                                <Text weight=\"bold\" content={this.localize(\"noUserSelectedHeaderStep2\")} /><br />\r\n                                <Text size=\"small\" content={this.localize(\"noUserSelectedContentStep2\")}\r\n                                />\r\n                            </div>\r\n                        </Flex>\r\n                    </Flex.Item>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler for selecting audience type\r\n    */\r\n    onAudienceTypeSelection = {\r\n        onAdd: (item: any) => {\r\n            this.setState({ selectedAudienceType: item });\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler for selecting users/group as an event audience\r\n    * @param selectedItem selected value of an user/group\r\n    */\r\n    onUserOrGroupSelection = async (selectedItem: IDropdownItem) => {\r\n        let selectedUserOrGroup: ISelectedUserGroup = {\r\n            displayName: selectedItem.header,\r\n            email: selectedItem.content,\r\n            id: selectedItem.id,\r\n            isGroup: selectedItem.isGroup,\r\n            isMandatory: true\r\n        };\r\n\r\n        let existingUsers = this.state.selectedUsersAndGroups;\r\n        let isAlreadyExist = existingUsers.find((userOrGroup) => userOrGroup.id === selectedUserOrGroup.id);\r\n        if (!isAlreadyExist) {\r\n            existingUsers.push(selectedUserOrGroup);\r\n            this.setState({ selectedUsersAndGroups: existingUsers });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event Handler for audience type dropdown\r\n    * @param item selected audience type\r\n    */\r\n    onAudienceChange = (item: any) => {\r\n        this.setState((prevState: ICreateEventsStep2State) => ({\r\n            eventDetails: { ...prevState.eventDetails, audience: item.key },\r\n            selectedAudienceType: item\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler for auto-registering the mandatory users for an event\r\n    */\r\n    onAutoRegisterToggleChange = () => {\r\n        this.setState((prevState: ICreateEventsStep2State) => ({\r\n            eventDetails: { ...prevState.eventDetails, isAutoRegister: !this.state.eventDetails.isAutoRegister }\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * Event handler for saving event as a draft\r\n    */\r\n    saveEventAsDraft = async () => {\r\n        this.setState({ isLoading: true });\r\n        let modifiedState = { ...this.props.eventPageState };\r\n        modifiedState.selectedUserGroups = this.state.selectedUsersAndGroups;\r\n        modifiedState.selectedAudience = this.state.selectedAudienceType;\r\n        modifiedState.eventDetails = this.state.eventDetails;\r\n        modifiedState.eventDetails.selectedUserOrGroupListJSON = JSON.stringify(this.state.selectedUsersAndGroups);\r\n\r\n        let result = await saveEventAsDraftAsync(modifiedState, this.teamId);\r\n        if (result) {\r\n            microsoftTeams.tasks.submitTask({ isSuccess: true, isDraft: true });\r\n        }\r\n        else {\r\n            this.setState({ isLoading: false });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler for selecting mandatory all option\r\n    */\r\n    onMandatoryAllClocked = () => {\r\n        let selectedUserGroup = [...this.state.selectedUsersAndGroups];\r\n        for (var i = 0; i < selectedUserGroup.length; i++) {\r\n            selectedUserGroup[i].isMandatory = true;\r\n        }\r\n\r\n        this.setState({ selectedUsersAndGroups: selectedUserGroup });\r\n    }\r\n\r\n    /** Renders a component */\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\">\r\n                    <Flex gap=\"gap.smaller\">\r\n                        <Text size=\"large\" content={this.localize(\"audienceDetailsStep2\")} />\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Flex gap=\"gap.smaller\" vAlign=\"center\">\r\n                                <Text className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small form-label\" : \"form-label\"} content={this.localize(\"audienceTypeStep2\")} />\r\n                                <InfoIcon outline title={this.localize(\"audienceTypeInfoIconTitle\")} />\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                        <Flex.Item size=\"size.half\">\r\n                            <Dropdown\r\n                                fluid\r\n                                value={this.state.selectedAudienceType}\r\n                                items={this.state.audienceTypes.map((value: IConstantDropdownItem) => { return { key: value.id, header: value.name } })}\r\n                                onChange={(event, data) => { this.onAudienceChange(data.value) }}\r\n                                data-testid=\"event_audience_dropdown\"\r\n                            />\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    {this.state.eventDetails.audience === EventAudience.Private && <>\r\n                        <Flex gap=\"gap.smaller\" className=\"margin-top\">\r\n                            <DropdownSearch\r\n                                loadingMessage={this.localize(\"dropdownSearchLoadingMessage\")}\r\n                                noResultMessage={this.localize(\"noResultFoundDropdownMessage\")}\r\n                                placeholder={this.localize(\"startTypingDropdownSearch\")}\r\n                                onItemSelect={this.onUserOrGroupSelection}\r\n                            />\r\n                        </Flex>\r\n                        <Flex gap=\"gap.smaller\" className=\"input-label-margin-between\">\r\n                            <Checkbox onChange={() => this.onAutoRegisterToggleChange()} checked={this.state.eventDetails.isAutoRegister} label={this.localize(\"autoRegisterCheckboxLabelStep2\")} data-testid=\"auto_toggle\" />\r\n                            <Flex.Item push={this.props.dir === LanguageDirection.Ltr} grow={this.props.dir === LanguageDirection.Rtl}>\r\n                                <Button\r\n                                    onClick={this.onMandatoryAllClocked}\r\n                                    primary\r\n                                    text\r\n                                    content={this.localize(\"mandatoryAllButtonStep2\")}\r\n                                    disabled={this.state.selectedUsersAndGroups.filter((userOrGroup) => userOrGroup.isMandatory === false).length === 0}\r\n                                    data-testid=\"audience_mandatory_button\"\r\n                                    className={this.props.dir === LanguageDirection.Rtl ? \"left-push\" : \"\" }\r\n                                />\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        {this.renderMembers()}\r\n                    </>}\r\n                </div>\r\n                {this.props.dir === LanguageDirection.Ltr && <Flex gap=\"gap.smaller\" className=\"button-footer\" vAlign=\"center\">\r\n                    <Button icon={<ArrowLeftIcon />} text content={this.localize(\"back\")} onClick={this.backBtnClick} data-testid=\"back_button\" />\r\n                    <Flex.Item push>\r\n                        <Text weight=\"bold\" content={this.localize(\"step2Of3\")} />\r\n                    </Flex.Item>\r\n                    {(!this.props.eventPageState.isEdit || (this.props.eventPageState.isEdit && this.props.eventPageState.isDraft)) && <Button disabled={this.state.isLoading} loading={this.state.isLoading} onClick={this.saveEventAsDraft} content={this.localize(\"saveAsDraft\")} secondary data-testid=\"save_draft_button\" />}\r\n                    <Button content={this.localize(\"nextButton\")} disabled={this.state.isLoading || (this.state.eventDetails.audience === EventAudience.Private && this.state.selectedUsersAndGroups.length === 0)} primary onClick={this.nextBtnClick} data-testid=\"next_button\" />\r\n                </Flex>}\r\n\r\n                {this.props.dir === LanguageDirection.Rtl && <Flex gap=\"gap.smaller\" className=\"button-footer\" vAlign=\"center\">\r\n                    <Flex.Item push>\r\n                        <Button icon={<ArrowRightIcon />} text content={<Text content={this.localize(\"back\")} className={this.props.dir === LanguageDirection.Rtl ? \"rtl-right-margin-small\" : \"\" }/>} onClick={this.backBtnClick} data-testid=\"back_button\" />\r\n                    </Flex.Item>\r\n                    <Text className=\"rtl-left-margin-small\" weight=\"bold\" content={this.localize(\"step2Of3\")} />\r\n                    {(!this.props.eventPageState.isEdit || (this.props.eventPageState.isEdit && this.props.eventPageState.isDraft)) && <Button className=\"rtl-right-margin-small\" disabled={this.state.isLoading} loading={this.state.isLoading} onClick={this.saveEventAsDraft} content={this.localize(\"saveAsDraft\")} secondary data-testid=\"save_draft_button\" />}\r\n                    <Button content={this.localize(\"nextButton\")} disabled={this.state.isLoading || (this.state.eventDetails.audience === EventAudience.Private && this.state.selectedUsersAndGroups.length === 0)} primary onClick={this.nextBtnClick} data-testid=\"next_button\" />\r\n                </Flex>}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default withTranslation()(CreateEventStep2);","// <copyright file=\"create-event-step3.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { Text, Flex, Image, Button, ArrowLeftIcon, ArrowRightIcon, Layout, Divider } from '@fluentui/react-northstar'\r\nimport { TFunction } from \"i18next\";\r\nimport { Icon } from 'office-ui-fabric-react';\r\nimport { ICreateEventState } from \"./create-event-wrapper\";\r\nimport { EventType } from \"../../models/event-type\";\r\nimport moment from 'moment';\r\nimport { EventAudience } from \"../../models/event-audience\";\r\nimport { createEvent, saveEventAsDraftAsync, validateSelectedUsers, updateEventDetails } from \"../../helpers/event-helper\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport AudienceArtifact from \"../../components/common/event-artifacts/audience\";\r\nimport TeamsMeetingArtifact from \"../../components/common/event-artifacts/teams-meeting\";\r\nimport LiveEventArtifact from \"../../components/common/event-artifacts/live-event\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\ninterface ICreateEventsStep3Props extends WithTranslation, IWithContext {\r\n    navigateToPage: (nextPage: number, stepEventState: ICreateEventState) => void;\r\n    eventPageState: ICreateEventState;\r\n}\r\n\r\ninterface ICreateEventsStep3State {\r\n    isCreateLoading: boolean,\r\n    isDraftLoading: boolean,\r\n    registeredAttendeesCount: number\r\n}\r\n\r\n/** This component adds a new event category */\r\nclass CreateEventStep3 extends React.Component<ICreateEventsStep3Props, ICreateEventsStep3State> {\r\n    readonly localize: TFunction;\r\n    teamId: string;\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.teamId = \"\";\r\n        this.state = {\r\n            isCreateLoading: false,\r\n            registeredAttendeesCount: 0,\r\n            isDraftLoading: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.getContext((context: microsoftTeams.Context) => {\r\n            this.teamId = context.teamId!;\r\n        });\r\n\r\n        if (this.props.eventPageState.eventDetails.audience === EventAudience.Private && this.props.eventPageState.eventDetails.isAutoRegister) {\r\n            this.getRegisteredAttendeesCount();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Sets the attendees count attending the event in state\r\n    */\r\n    getRegisteredAttendeesCount = async () => {\r\n        let result = await validateSelectedUsers([...this.props.eventPageState.selectedUserGroups]);\r\n        this.setState({ registeredAttendeesCount: result.mandatoryUsers.length });\r\n    }\r\n\r\n    /**\r\n    * Event handler for moving onto previous step\r\n    */\r\n    backBtnClick = () => {\r\n        this.props.navigateToPage(2, this.props.eventPageState);\r\n    };\r\n\r\n    /** Renders artifacts */\r\n    getArtifacts = () => {\r\n        let artifactElements: Array<JSX.Element> = [];\r\n\r\n        switch (this.props.eventPageState.eventDetails?.type) {\r\n            case EventType.Teams:\r\n                artifactElements.push(<TeamsMeetingArtifact />);\r\n                break;\r\n\r\n            case EventType.LiveEvent:\r\n                artifactElements.push(<LiveEventArtifact />);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        switch (this.props.eventPageState.eventDetails?.audience) {\r\n            case EventAudience.Private:\r\n                artifactElements.push(<AudienceArtifact audienceType={EventAudience.Private} />);\r\n                break;\r\n\r\n            case EventAudience.Public:\r\n                artifactElements.push(<AudienceArtifact audienceType={EventAudience.Public} />);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <Flex gap=\"gap.small\" vAlign=\"center\">\r\n                {artifactElements}\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Format and renders event day and time as per local time\r\n     * @param startDate The start date of an event\r\n     * @param startTime The start time of an event\r\n     * @param endTime The end time of an event\r\n     */\r\n    getEventDayAndTime = (startDate: Date, startTime: Date, endTime: Date) => {\r\n        let eventDay = moment.utc(startDate).local().format(\"ddd\");\r\n        let eventStartTime = moment.utc(startTime).local().format(\"HH:mm\");\r\n        let eventEndTime = moment.utc(endTime).local().format(\"HH:mm\");\r\n\r\n        return `${eventDay}, ${eventStartTime} - ${eventEndTime}`;\r\n    }\r\n\r\n    /**\r\n     * Renders event venue if event type is In-Person\r\n     * @param eventType The event type\r\n     * @param venue The event venue\r\n     */\r\n    renderEventVenue = (eventType: number, venue: string) => {\r\n        if (eventType === EventType.InPerson) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Divider vertical styles={{ height: \"1.13rem\", marginRight: \".8rem\" }} />\r\n                    <Text className=\"event-venue\" content={venue} weight=\"semibold\" size=\"small\" />\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event handler for saving event as a draft\r\n    */\r\n    saveEventAsDraft = async () => {\r\n        this.setState({ isDraftLoading: true });\r\n        let result = await saveEventAsDraftAsync({ ...this.props.eventPageState }, this.teamId);\r\n        if (result) {\r\n            microsoftTeams.tasks.submitTask({ isSuccess: true, isDraft: true });\r\n        }\r\n        else {\r\n            this.setState({ isDraftLoading: false });\r\n            microsoftTeams.tasks.submitTask({ isSuccess: false, isDraft: true });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Event Handler for creating an event\r\n    */\r\n    createEvent = async () => {\r\n        this.setState({ isCreateLoading: true });\r\n        let result = await createEvent(this.props.eventPageState, this.teamId);\r\n        if (result) {\r\n            microsoftTeams.tasks.submitTask({ isSuccess: true, isCreateEvent: true });\r\n        }\r\n        else {\r\n            this.setState({ isCreateLoading: false });\r\n            microsoftTeams.tasks.submitTask({ isSuccess: false, isCreateEvent: true });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Updating an already created event and fetching its saved details\r\n    */\r\n    updateEvent = async () => {\r\n        this.setState({ isCreateLoading: true });\r\n        let result = await updateEventDetails(this.props.eventPageState, this.teamId);\r\n        if (result) {\r\n            microsoftTeams.tasks.submitTask({ isSuccess: true });\r\n        }\r\n        else {\r\n            this.setState({ isCreateLoading: false });\r\n            microsoftTeams.tasks.submitTask({ isSuccess: false });\r\n        }\r\n    }\r\n\r\n    /** Renders the attendee URL for live event */\r\n    renderAttendeeURL = () => {\r\n        if (this.props.eventPageState.eventDetails.type === EventType.LiveEvent) {\r\n            return (\r\n                <Flex design={{ marginTop: \"2.67rem\" }} vAlign=\"center\" hAlign=\"start\" column>\r\n                    <Text content={this.localize(\"liveEventUrlStep1\")} weight=\"semibold\" />\r\n                    <a href={this.props.eventPageState.eventDetails.meetingLink} target=\"_blank\" rel=\"noopener noreferrer\">{this.props.eventPageState.eventDetails.meetingLink}</a>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders a component */\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"page-content create-event-step3\">\r\n                    <Flex gap=\"gap.smaller\">\r\n                        <Text size=\"large\" content={this.localize(\"eventPreviewStep3\")} />\r\n                    </Flex>\r\n                    <Flex className=\"margin-top\" space=\"between\" vAlign=\"center\">\r\n                        <Text className=\"category label-color\" content={this.props.eventPageState.selectedCategory?.header!} weight=\"bold\" />\r\n                        <Flex.Item push={this.props.dir === LanguageDirection.Ltr}>\r\n                            {this.getArtifacts()}\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    {this.props.eventPageState.eventDetails.photo && <Image className=\"event-image\" fluid src={this.props.eventPageState.eventDetails.photo} />}\r\n                    {this.props.eventPageState.eventDetails.selectedColor && <div className=\"event-image\" style={{ backgroundColor: this.props.eventPageState.eventDetails.selectedColor }}>\r\n                        <Flex className=\"event-image-color\" hAlign=\"center\" vAlign=\"center\">\r\n                            <Text className=\"event-color-text\" size=\"large\" weight=\"semibold\" content={this.props.eventPageState.eventDetails.name} />\r\n                        </Flex>\r\n                    </div>}\r\n                    <div style={{ marginTop: \"1.33rem\" }}>\r\n                        <Text align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.props.eventPageState.eventDetails.name} weight=\"bold\" size=\"medium\" />\r\n                    </div>\r\n                    <Flex vAlign=\"center\" hAlign=\"start\">\r\n                        <Layout\r\n                            className=\"event-date-and-time\"\r\n                            start={<Icon iconName=\"Clock\" />}\r\n                            main={<Text content={this.getEventDayAndTime(this.props.eventPageState.eventDetails.startDate, this.props.eventPageState.eventDetails.startTime!, this.props.eventPageState.eventDetails.endTime!)} weight=\"semibold\" size=\"small\" />}\r\n                            gap=\".4rem\"\r\n                        />\r\n                        {this.renderEventVenue(this.props.eventPageState.eventDetails.type, this.props.eventPageState.eventDetails.venue)}\r\n                    </Flex>\r\n                    <Flex vAlign=\"center\" hAlign=\"start\" design={{ marginTop: \"2.67rem\" }}>\r\n                        <Text align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.props.eventPageState.eventDetails.description} />\r\n                    </Flex>\r\n                    {this.renderAttendeeURL()}\r\n                    <Flex gap={this.props.dir === LanguageDirection.Rtl ? undefined : \"gap.large\"} design={{ marginTop: \"2.67rem\" }}>\r\n                        <Flex column className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}>\r\n                            <Text align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.localize(\"totalNoOfParticipants\")} weight=\"semibold\" />\r\n                            <Text align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.props.eventPageState.eventDetails.maximumNumberOfParticipants} />\r\n                        </Flex>\r\n                        <Flex column>\r\n                            <Text align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.localize(\"registeredParticipants\")} weight=\"semibold\" />\r\n                            <Text align={this.props.dir === LanguageDirection.Rtl ? \"end\" : \"start\"} content={this.state.registeredAttendeesCount} />\r\n                        </Flex>\r\n                    </Flex>\r\n                </div>\r\n                {this.props.dir === LanguageDirection.Ltr && <Flex gap=\"gap.smaller\" className=\"button-footer\" vAlign=\"center\">\r\n                    <Button disabled={this.state.isCreateLoading} icon={<ArrowLeftIcon />} text content={this.localize(\"back\")} onClick={this.backBtnClick} />\r\n                    <Flex.Item push>\r\n                        <Text weight=\"bold\" content={this.localize(\"step3of3\")} />\r\n                    </Flex.Item>\r\n                    {\r\n                        (this.props.eventPageState.isDraft || !this.props.eventPageState.isEdit) && <>\r\n                            <Button disabled={this.state.isCreateLoading || this.state.isDraftLoading} loading={this.state.isDraftLoading} onClick={this.saveEventAsDraft} content={this.localize(\"saveAsDraft\")} secondary data-testid=\"save_button\" />\r\n                            <Button disabled={this.state.isCreateLoading || this.state.isDraftLoading} loading={this.state.isCreateLoading} content={this.localize(\"createEvent\")} primary onClick={this.createEvent} data-testid=\"create_event_button\" />\r\n                        </>\r\n                    }\r\n                    {\r\n                        !this.props.eventPageState.isDraft && this.props.eventPageState.isEdit && <>\r\n                            <Button disabled={this.state.isCreateLoading} loading={this.state.isCreateLoading} content={this.localize(\"updateEventButton\")} primary onClick={this.updateEvent} data-testid=\"update_button\" />\r\n                        </>\r\n                    }\r\n                </Flex>}\r\n\r\n                {this.props.dir === LanguageDirection.Rtl && <Flex gap=\"gap.smaller\" className=\"button-footer\" vAlign=\"center\">\r\n                    <Flex.Item push>\r\n                        <Button\r\n                            disabled={this.state.isCreateLoading}\r\n                            icon={<ArrowRightIcon />}\r\n                            text\r\n                            content={<Text content={this.localize(\"back\")} className=\"rtl-right-margin-small\" />}\r\n                            onClick={this.backBtnClick}\r\n                        />\r\n                    </Flex.Item>\r\n                    \r\n                    <Text className=\"rtl-left-margin-small\" weight=\"bold\" content={this.localize(\"step3of3\")} />\r\n                    {\r\n                        (this.props.eventPageState.isDraft || !this.props.eventPageState.isEdit) && <>\r\n                            <Button className=\"rtl-left-margin-small\" disabled={this.state.isCreateLoading || this.state.isDraftLoading} loading={this.state.isDraftLoading} onClick={this.saveEventAsDraft} content={this.localize(\"saveAsDraft\")} secondary data-testid=\"save_button\" />\r\n                            <Button disabled={this.state.isCreateLoading || this.state.isDraftLoading} loading={this.state.isCreateLoading} content={this.localize(\"createEvent\")} primary onClick={this.createEvent} data-testid=\"create_event_button\" />\r\n                        </>\r\n                    }\r\n                    {\r\n                        !this.props.eventPageState.isDraft && this.props.eventPageState.isEdit && <>\r\n                            <Button className=\"rtl-left-margin-small\" disabled={this.state.isCreateLoading} loading={this.state.isCreateLoading} content={this.localize(\"updateEventButton\")} primary onClick={this.updateEvent} data-testid=\"update_button\" />\r\n                        </>\r\n                    }\r\n                </Flex>}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(CreateEventStep3));","// <copyright file=\"event-details.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text, Label, Image, EyeSlashIcon, Divider, EyeIcon, Avatar, Layout, Loader } from \"@fluentui/react-northstar\";\r\nimport { Icon } from 'office-ui-fabric-react';\r\nimport { IEvent } from \"../../../models/IEvent\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { EventAudience } from \"../../../models/event-audience\";\r\nimport { EventType } from \"../../../models/event-type\";\r\nimport { getUserProfiles } from \"../../../api/user-group-api\"\r\nimport { ResponseStatus } from \"../../../constants/constants\";\r\nimport moment from \"moment\";\r\n\r\nimport \"../../manage-events/manage-events.css\";\r\n\r\ninterface IEventDetailsProps {\r\n    eventDetails: IEvent\r\n}\r\n\r\n/** Renders component to close event registrations or cancel an event */\r\nconst EventDetails: React.FunctionComponent<IEventDetailsProps> = props => {\r\n    const localize = useTranslation().t;\r\n\r\n    let [eventDetails, setEventDetails] = React.useState(props.eventDetails);\r\n    let [isLoading, setLoading] = React.useState(false);\r\n    let [errorGettingEventDetails, setEventDetailsError] = React.useState(false);\r\n    let [createdByName, setCreatedByName] = React.useState(\"\");\r\n\r\n    React.useEffect(() => {\r\n        getUserProfile(props.eventDetails.createdBy);\r\n    }, [props.eventDetails]);\r\n\r\n    React.useEffect(() => { getUserProfile(props.eventDetails.createdBy); }, []);\r\n\r\n    /**\r\n     * Get event creator information\r\n     * @param userId The user ID of which information to get\r\n     */\r\n    const getUserProfile = async (userId: string) => {\r\n        let user: Array<string> = [userId];\r\n        let response = await getUserProfiles(user);\r\n\r\n        if (response.status === ResponseStatus.OK && response.data) {\r\n            let userInfo = response.data[0];\r\n            setCreatedByName(userInfo.displayName);\r\n        }\r\n    }\r\n\r\n    /** Renders event audience */\r\n    const getEventAudience = () => {\r\n        if (eventDetails.audience === EventAudience.Private) {\r\n            return <Label className=\"category-type-label\" circular icon={<EyeSlashIcon />} iconPosition=\"start\" content={localize(\"private\")} />;\r\n        }\r\n        else {\r\n            return <Label className=\"category-type-label\" circular icon={<EyeIcon />} iconPosition=\"start\" content={localize(\"public\")} />;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Format and renders event day and time as per local time\r\n     * @param startDate The start date of an event\r\n     * @param startTime The start time of an event\r\n     * @param endTime The end time of an event\r\n     */\r\n    const getEventDayAndTime = (startDate: Date, startTime: Date, endTime: Date) => {\r\n        let eventDay = moment.utc(startDate).local().format(\"ddd\");\r\n        let eventStartTime = moment.utc(startTime).local().format(\"HH:mm\");\r\n        let eventEndTime = moment.utc(endTime).local().format(\"HH:mm\");\r\n\r\n        return `${eventDay}, ${eventStartTime} - ${eventEndTime}`;\r\n    }\r\n\r\n    /** Renders the event creator information */\r\n    const renderEventCreatorInfo = () => {\r\n        let name = createdByName && createdByName.length ? createdByName : localize(\"unknownUserName\");\r\n        return (\r\n            <Flex vAlign=\"center\" hAlign=\"start\" gap=\"gap.smaller\" design={{ marginTop: \"2.67rem\" }}>\r\n                <Avatar\r\n                    size=\"small\"\r\n                    name={name}\r\n                />\r\n                <Layout\r\n                    start={<Text content={localize(\"createdBy\")} size=\"small\" />}\r\n                    main={<Text content={name} size=\"small\" weight=\"semibold\" />}\r\n                    gap=\".4rem\"\r\n                />\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Renders event venue if event type is In-Person\r\n     * @param eventType The event type\r\n     * @param venue The event venue\r\n     */\r\n    const renderEventVenue = (eventType: number, venue: string) => {\r\n        if (eventType === EventType.InPerson) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Divider vertical styles={{ height: \"1.13rem\", marginRight: \".8rem\" }} />\r\n                    <Text className=\"event-venue\" content={venue} weight=\"semibold\" size=\"small\" />\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders component */\r\n    const renderEventDetails = () => {\r\n        if (isLoading) {\r\n            return (\r\n                <Loader className=\"task-module-loader\" />\r\n            );\r\n        }\r\n\r\n        if (errorGettingEventDetails) {\r\n            return <Text error content={localize(\"dataResponseFailedStatus\")} weight=\"semibold\" />\r\n        }\r\n\r\n        return (\r\n            <div className=\"close-cancel-event-container\">\r\n                <div className=\"close-cancel-event\">\r\n                    <Flex space=\"between\" vAlign=\"center\">\r\n                        <Text className=\"category label-color\" content={eventDetails.categoryName} weight=\"bold\" />\r\n                        <Flex.Item push>\r\n                            {getEventAudience()}\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Image className=\"event-image\" fluid src={eventDetails.photo} />\r\n                    <div style={{ marginTop: \"1.33rem\" }}>\r\n                        <Text content={eventDetails.name} weight=\"bold\" size=\"medium\" />\r\n                    </div>\r\n                    <Flex vAlign=\"center\" hAlign=\"start\">\r\n                        <Layout\r\n                            className=\"event-date-and-time\"\r\n                            start={<Icon iconName=\"Clock\" />}\r\n                            main={<Text content={getEventDayAndTime(eventDetails.startDate, eventDetails.startTime!, eventDetails.endTime!)} weight=\"semibold\" size=\"small\" />}\r\n                            gap=\".4rem\"\r\n                        />\r\n                        {renderEventVenue(eventDetails.type, eventDetails.venue)}\r\n                    </Flex>\r\n                    <Flex vAlign=\"center\" hAlign=\"start\" design={{ marginTop: \"2.67rem\" }}>\r\n                        <Text content={eventDetails.description} />\r\n                    </Flex>\r\n                    <Flex gap=\"gap.large\" design={{ marginTop: \"2.67rem\" }}>\r\n                        <Flex column>\r\n                            <Text content={localize(\"totalNoOfParticipants\")} weight=\"semibold\" />\r\n                            <Text content={eventDetails.maximumNumberOfParticipants} />\r\n                        </Flex>\r\n                        <Flex column>\r\n                            <Text content={localize(\"registeredParticipants\")} weight=\"semibold\" />\r\n                            <Text content={eventDetails.registeredAttendeesCount} />\r\n                        </Flex>\r\n                    </Flex>\r\n                    {renderEventCreatorInfo()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return renderEventDetails();\r\n}\r\n\r\nexport default EventDetails;","// <copyright file=\"create-event-wrapper.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport moment from \"moment\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { Flex, Provider, Loader, Text } from '@fluentui/react-northstar'\r\nimport { TFunction } from \"i18next\";\r\nimport CreateEventStep1 from \"../create-event/create-event-step1\";\r\nimport CreateEventStep2 from \"../create-event/create-event-step2\";\r\nimport CreateEventStep3 from \"../create-event/create-event-step3\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { ISelectedUserGroup } from \"../../models/ISelectedUserGroup\";\r\nimport { ISelectedDropdownItem } from \"../../models/ISelectedDropdownItem\";\r\nimport { EventType } from \"../../models/event-type\";\r\nimport { EventAudience } from \"../../models/event-audience\";\r\nimport { IConstantDropdownItem } from \"../../constants/resources\";\r\nimport { getEventAsync } from \"../../api/common-api\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\nimport { EventStatus } from \"../../models/event-status\";\r\nimport EventDetails from \"../common/event-details/event-details\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { getEventCategoriesAsync } from \"../../api/create-event-api\";\r\nimport { Fabric } from \"@fluentui/react\";\r\n\r\nimport \"./create-event.css\";\r\n\r\ninterface ICreateEventProps extends WithTranslation, IWithContext {\r\n}\r\n\r\nexport interface ICreateEventState {\r\n    currentEventStep: number,\r\n    eventDetails: IEvent,\r\n    selectedCategory: ISelectedDropdownItem | undefined,\r\n    selectedEvent: ISelectedDropdownItem | undefined,\r\n    selectedAudience: ISelectedDropdownItem | undefined,\r\n    selectedUserGroups: Array<ISelectedUserGroup>,\r\n    categories: Array<IConstantDropdownItem>,\r\n    isEdit: boolean,\r\n    isDraft: boolean,\r\n    isLoading: boolean,\r\n    displayReadonly: boolean\r\n}\r\n\r\nclass CreateEventWrapper extends React.Component<ICreateEventProps, ICreateEventState> {\r\n    readonly localize: TFunction;\r\n    minDate = new Date();\r\n    params: { eventId?: string | undefined, isDraft?: boolean | undefined } = { eventId: undefined, isDraft: false };\r\n    teamId: string;\r\n\r\n    /** Constructor which initializes state */\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.minDate.setDate(this.minDate.getDate() + 1);\r\n        this.teamId = \"\";\r\n        let search = window.location.search;\r\n        let params = new URLSearchParams(search);\r\n        this.params.eventId = params.get(\"eventId\")!;\r\n        this.params.isDraft = params.get(\"isDraft\")! === \"true\" ? true : false;\r\n\r\n        this.state = {\r\n            currentEventStep: 1,\r\n            categories: new Array<IConstantDropdownItem>(),\r\n            displayReadonly: false,\r\n            eventDetails: {\r\n                categoryId: \"\",\r\n                categoryName: \"\",\r\n                createdBy: \"\",\r\n                createdOn: new Date(),\r\n                description: \"\",\r\n                endDate: this.minDate,\r\n                eventId: \"\",\r\n                graphEventId: \"\",\r\n                isAutoRegister: false,\r\n                isRegistrationClosed: false,\r\n                maximumNumberOfParticipants: 0,\r\n                meetingLink: \"\",\r\n                name: \"\",\r\n                numberOfOccurrences: 1,\r\n                photo: \"\",\r\n                registeredAttendeesCount: 0,\r\n                startDate: this.minDate,\r\n                status: 0,\r\n                teamId: \"\",\r\n                type: EventType.Teams,\r\n                venue: \"\",\r\n                audience: EventAudience.Public,\r\n                endTime: undefined,\r\n                startTime: undefined,\r\n                mandatoryAttendees: \"\",\r\n                optionalAttendees: \"\",\r\n                registeredAttendees: \"\",\r\n                selectedUserOrGroupListJSON: \"\",\r\n                autoRegisteredAttendees: \"\",\r\n            },\r\n            selectedCategory: undefined,\r\n            selectedEvent: undefined,\r\n            selectedAudience: undefined,\r\n            selectedUserGroups: new Array<ISelectedUserGroup>(),\r\n            isEdit: false,\r\n            isDraft: false,\r\n            isLoading: true\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAllCategories();\r\n    }\r\n\r\n    /** Gets teams context from HOC as props */\r\n    componentWillReceiveProps(nextProps: ICreateEventProps) {\r\n        if (nextProps.teamsContext && nextProps.teamsContext !== this.props.teamsContext) {\r\n            this.teamId = nextProps.teamsContext.teamId!;\r\n\r\n            if (this.params.eventId) {\r\n                this.getEventDetailsToUpdate();\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Updating Event Details required */\r\n    getEventDetailsToUpdate = async () => {\r\n        var response = await getEventAsync(this.params.eventId!, this.teamId);\r\n        if (response.status === ResponseStatus.OK) {\r\n            let eventDetails = response.data as IEvent;\r\n            let selectedUsersOrGroups = Array<ISelectedUserGroup>();\r\n\r\n            if (eventDetails.selectedUserOrGroupListJSON) {\r\n                selectedUsersOrGroups = JSON.parse(eventDetails.selectedUserOrGroupListJSON);\r\n            }\r\n            eventDetails.startDate = moment.utc(eventDetails.startDate).local().toDate();\r\n            eventDetails.endDate = moment.utc(eventDetails.endDate).local().toDate();\r\n            eventDetails.startTime = moment.utc(eventDetails.startTime).local().toDate();\r\n            eventDetails.endTime = moment.utc(eventDetails.endTime).local().toDate();\r\n\r\n            if (eventDetails.status === EventStatus.Cancelled || eventDetails.endDate < new Date()) {\r\n                this.setState({ isLoading: false, displayReadonly: true, eventDetails: eventDetails }, this.getAllCategories);\r\n            } else {\r\n                this.setState({ isLoading: false, eventDetails: eventDetails, selectedUserGroups: selectedUsersOrGroups, isEdit: true, isDraft: this.params.isDraft! }, this.getAllCategories);\r\n            }\r\n\r\n        }\r\n        else {\r\n            this.setState({\r\n                isLoading: false\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Event Handler for fetching the category list and rendering it */\r\n    getAllCategories = async () => {\r\n        let response = await getEventCategoriesAsync();\r\n\r\n        if (response.status === ResponseStatus.OK) {\r\n            let categories: any = response.data.map((category: any) => {\r\n                return { name: category.name, id: category.categoryId };\r\n            });\r\n\r\n            let selectedCategory: ISelectedDropdownItem;\r\n            if (this.state.eventDetails.categoryId) {\r\n                let category = categories.find((category: any) => category.id === this.state.eventDetails.categoryId);\r\n                selectedCategory = { header: category.name, key: category.id };\r\n\r\n                this.setState({ categories: categories, selectedCategory: selectedCategory, isLoading: false });\r\n            }\r\n            else {\r\n                this.setState({ categories: categories, isLoading: false });\r\n            }\r\n        }\r\n        else {\r\n            this.setState({ isLoading: false });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Set state of an event on navigating to next step\r\n    * @param currentStep shows the event step which is currently active\r\n    * @param stepEventState current state of the event\r\n    */\r\n    setEventStep = (currentStep: number, stepEventState: ICreateEventState) => {\r\n        this.setState({ currentEventStep: currentStep, eventDetails: stepEventState.eventDetails, selectedAudience: stepEventState.selectedAudience, selectedCategory: stepEventState.selectedCategory, selectedEvent: stepEventState.selectedEvent, selectedUserGroups: stepEventState.selectedUserGroups, categories: stepEventState.categories });\r\n    }\r\n\r\n    /** Renders component based on Add, Edit or Delete */\r\n    renderOperation = () => {\r\n        switch (this.state.currentEventStep) {\r\n            case 1:\r\n                return <CreateEventStep1 eventPageState={{ ...this.state }} navigateToPage={this.setEventStep} />\r\n            case 2:\r\n                return <CreateEventStep2 eventPageState={{ ...this.state }} navigateToPage={this.setEventStep} dir={this.props.dir}/>\r\n            case 3:\r\n                return <CreateEventStep3 eventPageState={{ ...this.state }} navigateToPage={this.setEventStep} />\r\n            default:\r\n                return <CreateEventStep1 eventPageState={{ ...this.state }} navigateToPage={this.setEventStep} />\r\n        }\r\n    }\r\n\r\n    /** Renders the component */\r\n    render() {\r\n        if (!this.state.isLoading && !this.state.categories?.length) {\r\n            return (\r\n                <Provider>\r\n                    <Flex>\r\n                        <div className=\"task-module-container event-task-module\">\r\n                            <Text error content={this.localize(\"categoriesNotAvailableError\")} weight=\"semibold\" />\r\n                        </div>\r\n                    </Flex>\r\n                </Provider>\r\n            );\r\n        }\r\n\r\n        if (this.state.displayReadonly) {\r\n            return <EventDetails eventDetails={this.state.eventDetails} />\r\n        }\r\n        else {\r\n            return (\r\n                <Fabric dir={this.props.dir}>\r\n                    <Provider>\r\n                        <Flex>\r\n                            <div className=\"task-module-container\">\r\n                                {!this.state.isLoading && !this.state.displayReadonly && this.renderOperation()}\r\n                                {this.state.isLoading && <Loader className=\"loader\" />}\r\n                            </div>\r\n                        </Flex>\r\n                    </Provider>\r\n                </Fabric>\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(CreateEventWrapper));","// <copyright file=\"manage-categories-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport { ICategory } from \"../models/ICategory\";\r\nimport Constants from \"../constants/constants\";\r\nimport { getAPIRequestConfigParams } from \"../helpers/api-helper\";\r\n\r\n/**\r\n * Gets event categories\r\n * @param teamId The LnD team Id\r\n */\r\nexport const getCategoriesAsync = async (teamId: string) => {\r\n    let url = `${Constants.apiBaseURL}/category`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.get(url, config);\r\n}\r\n\r\n/**\r\n * Gets event categories\r\n * @param teamId The LnD team Id\r\n */\r\nexport const getEventCategoriesAsync = async () => {\r\n    let url = `${Constants.apiBaseURL}/category/get-categories-for-event`;\r\n    return await axios.get(url);\r\n}\r\n\r\n/**\r\n* Creates a new category\r\n* @param teamId The LnD team Id\r\n* @param category The category details that needs to be created\r\n*/\r\nexport const createCategoryAsync = async (teamId: string, category: ICategory) => {\r\n    let url = `${Constants.apiBaseURL}/category`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.post(url, category, config);\r\n}\r\n\r\n/**\r\n* Updates category details\r\n* @param teamId The LnD team Id\r\n* @param category The category details that needs to be updated\r\n*/\r\nexport const updateCategoryAsync = async (teamId: string, category: ICategory) => {\r\n    let url = `${Constants.apiBaseURL}/category`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId });\r\n\r\n    return await axios.patch(url, category, config);\r\n}\r\n\r\n/**\r\n* Deletes categories\r\n* @param teamId The LnD team Id\r\n* @param categoryIds The comma separated category IDs that needs to be deleted\r\n*/\r\nexport const deleteCategoriesAsync = async (teamId: string, categoryIds: string) => {\r\n    let url = `${Constants.apiBaseURL}/category`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({ teamId: teamId, categoryIds: categoryIds });\r\n\r\n    return await axios.delete(url, config);\r\n}","// <copyright file=\"list-categories.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Table, Flex, Input, Text, Button, Checkbox, Loader } from \"@fluentui/react-northstar\";\r\nimport { SearchIcon, AddIcon, EditIcon, TrashCanIcon, QuestionCircleIcon, PresenceAvailableIcon } from '@fluentui/react-icons-northstar';\r\nimport { CategoryOperations, ResponseStatus } from \"../../constants/constants\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { getCategoriesAsync } from \"../../api/manage-categories-api\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\ninterface IListCategoriesProps extends WithTranslation, IWithContext {\r\n    statusMessage: string,\r\n    onActionPerformed: (categoryOperation: CategoryOperations, operationData?: Array<ICategory>) => void\r\n}\r\n\r\ninterface IListCategoriesState {\r\n    isEditEnabled: boolean\r\n    isDeleteEnabled: boolean,\r\n    isAllCategoriesSelected: boolean,\r\n    categories: Array<ICategory>,\r\n    searchedCategories: Array<ICategory>,\r\n    statusMessage: string,\r\n    isLoading: boolean,\r\n    showStatusIcon: boolean\r\n}\r\n\r\n/** This component lists all event categories */\r\nclass ListCategories extends React.Component<IListCategoriesProps, IListCategoriesState> {\r\n    readonly localize: TFunction;\r\n    searchText: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n\r\n        this.searchText = \"\";\r\n\r\n        this.state = {\r\n            isEditEnabled: false,\r\n            isDeleteEnabled: false,\r\n            isAllCategoriesSelected: false,\r\n            categories: [],\r\n            searchedCategories: [],\r\n            statusMessage: this.props.statusMessage,\r\n            isLoading: false,\r\n            showStatusIcon: this.props.statusMessage !== \"\" && this.props.statusMessage.length > 0\r\n        }\r\n    }\r\n\r\n    /** Gets called when component get mounted */\r\n    componentDidMount() {\r\n        this.setState({ isLoading: true });\r\n    }\r\n\r\n    /**\r\n     * Gets teams context from HOC as props\r\n     */\r\n    componentWillReceiveProps(nextProps: IListCategoriesProps) {\r\n        if (this.props.teamsContext !== nextProps.teamsContext) {\r\n            if (nextProps.teamsContext) {\r\n                this.getCategoriesAsync(nextProps.teamsContext.teamId!);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all event categories\r\n     */\r\n    getCategoriesAsync = async (teamId: string) => {\r\n        let response = await getCategoriesAsync(teamId);\r\n\r\n        if (response && response.status === ResponseStatus.OK) {\r\n            let categories: Array<ICategory> = [];\r\n\r\n            response.data?.forEach((category: ICategory) => {\r\n                categories.push(category);\r\n            });\r\n\r\n            this.setState({categories, isLoading: false });\r\n        }\r\n        else {\r\n            this.setState({ isLoading: false, statusMessage: this.localize(\"dataResponseFailedStatus\") });\r\n        }\r\n    }\r\n\r\n    /** Manages 'Edit' and 'Delete' button's enability and manages select all categories checked state */\r\n    manageControlsEnabilityAndSelection() {\r\n        let selectedCategoriesCount = this.state.categories.filter((category: ICategory) => { return category.isSelected })?.length;\r\n        let statusMessage = \"\";\r\n\r\n        let isAllCategoriesSelected = selectedCategoriesCount === this.state.categories.length;\r\n\r\n        if (selectedCategoriesCount === 1) {\r\n            statusMessage = this.localize(\"listCategoriesSelectedStatus\",\r\n                { \"selectedCategoriesCount\": selectedCategoriesCount, \"totalCategoriesCount\": this.state.categories.length });\r\n            this.setState({ isEditEnabled: true, isDeleteEnabled: true, isAllCategoriesSelected, statusMessage, showStatusIcon: false });\r\n        }\r\n        else if (selectedCategoriesCount > 1) {\r\n            statusMessage = this.localize(\"listCategoriesSelectedStatus\",\r\n                { \"selectedCategoriesCount\": selectedCategoriesCount, \"totalCategoriesCount\": this.state.categories.length });\r\n            this.setState({ isEditEnabled: false, isDeleteEnabled: true, isAllCategoriesSelected, statusMessage, showStatusIcon: false });\r\n        }\r\n        else {\r\n            this.setState({ isEditEnabled: false, isDeleteEnabled: false, isAllCategoriesSelected, statusMessage, showStatusIcon: false });\r\n        }\r\n    }\r\n\r\n    getLastCategoryUpdateDateAndTime = (): any => {\r\n        if (this.state.categories?.length > 0) {\r\n            let categories = [...this.state.categories];\r\n\r\n            categories.sort((category1, category2) => {\r\n                if (category1.updatedOn && category2.updatedOn) {\r\n                    return 1;\r\n                }\r\n                else if (!category1.updatedOn && category2.updatedOn) {\r\n                    return 1;\r\n                }\r\n                else if (category1.updatedOn && !category2.updatedOn) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            });\r\n\r\n            this.localize(\"lastUpdatedOnStatus\", { \"lastUpdatedOnStatus\": categories[categories.length - 1].updatedOn?.toUTCString });\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Searches categories based on search text and display search results\r\n     * @param seachText The seach text entered in seach box\r\n     */\r\n    searchCategories = (searchText: string) => {\r\n        let categories: Array<ICategory> = this.state.categories ?? [];\r\n\r\n        if (categories.length > 0 && searchText && searchText.trim() !== \"\") {\r\n            this.searchText = searchText.trim();\r\n\r\n            let searchedCategories = categories.filter((category) => {\r\n                return category.name.toLowerCase().indexOf(this.searchText.toLowerCase()) > -1 ||\r\n                    category.description.toLowerCase().indexOf(this.searchText.toLowerCase()) > -1;\r\n            });\r\n\r\n            this.setState({ searchedCategories });\r\n        }\r\n        else {\r\n            this.searchText = \"\";\r\n            this.setState({ categories, searchedCategories: [] });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler for Add, Edit and Delete category\r\n     * @param categoryOperation The category operation performed\r\n     */\r\n    onActionPerformed = (categoryOperation: CategoryOperations) => {\r\n        if (categoryOperation === CategoryOperations.Edit || categoryOperation === CategoryOperations.Delete) {\r\n            let categoryOperationData = this.state.categories.filter((category: ICategory) => category.isSelected);\r\n            this.props.onActionPerformed(categoryOperation, categoryOperationData);\r\n        }\r\n        else {\r\n            this.props.onActionPerformed(categoryOperation);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when any category checked state changed\r\n     * @param category The selected category details\r\n     */\r\n    onCategoryCheckedChange = (category: ICategory) => {\r\n        category.isSelected = !category.isSelected;\r\n        this.manageControlsEnabilityAndSelection();\r\n    }\r\n\r\n    /** The event handler called when select all categories checked state changed */\r\n    onSelectAllCategoriesCheckedChange = () => {\r\n        if (this.state.categories && this.state.categories.length > 0) {\r\n            var categories = [...this.state.categories];\r\n\r\n            for (let i = 0; i < categories.length; i++) {\r\n                categories[i].isSelected = !this.state.isAllCategoriesSelected;\r\n            }\r\n\r\n            this.setState({ categories }, () => {\r\n                this.manageControlsEnabilityAndSelection();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when seaching categories\r\n     * @param event The input event object\r\n     */\r\n    onSearchTextChanged = (event: any) => {\r\n        this.searchCategories(event.target.value);\r\n    }\r\n\r\n    /** Renders success icon if an category operation executed successfully */\r\n    renderCategoryOperationStatusIcon = () => {\r\n        if (this.state.showStatusIcon) {\r\n            return <PresenceAvailableIcon className=\"success-icon\" />;\r\n        }\r\n    }\r\n\r\n    /** Renders footer */\r\n    renderFooter = () => {\r\n        if (this.state.statusMessage && this.state.statusMessage !== \"\") {\r\n            return (\r\n                <React.Fragment>\r\n                    <Flex gap=\"gap.small\" vAlign=\"center\" hAlign=\"center\">\r\n                        {this.renderCategoryOperationStatusIcon()}\r\n                        <Flex.Item grow>\r\n                            <Text data-testid=\"statusmessage\" content={this.state.statusMessage} weight=\"semibold\" />\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <Flex.Item push>\r\n                        <Text timestamp content={this.getLastCategoryUpdateDateAndTime()} weight=\"semibold\" />\r\n                    </Flex.Item>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Render categories */\r\n    renderCategories = () => {\r\n        if (this.state.isLoading) {\r\n            return (\r\n                <Flex className=\"task-module-loader\" hAlign=\"center\" vAlign=\"center\" fill>\r\n                    <Loader />\r\n                </Flex>\r\n            );\r\n        }\r\n\r\n        let categories = this.searchText !== \"\" ? this.state.searchedCategories : this.state.categories;\r\n\r\n        if (categories?.length > 0) {\r\n            const categoriesTableHeaderItems = {\r\n                key: \"header\",\r\n                items: [\r\n                    { key: \"select-all-categories\", className: \"category-select-all-column\", content: <Checkbox data-testid=\"list-categories_selectAllCheckbox\" key=\"categoriesTableHeader\" checked={this.state.isAllCategoriesSelected} onChange={this.onSelectAllCategoriesCheckedChange} /> },\r\n                    { key: \"category-name\", className: \"category-name-column\", content: this.localize(\"categoryName\") },\r\n                    { key: \"category-description\", content: this.localize(\"description\") }\r\n                ]\r\n            };\r\n\r\n            let rows = categories.map((category: ICategory, index: number) => {\r\n                return {\r\n                    \"key\": index,\r\n                    \"items\": [\r\n                        {\r\n                            className: \"category-select-all-column\",\r\n                            content: <Checkbox data-testid={\"list-categories_categoryCheckbox\" + index.toString()} key={index} checked={category.isSelected} onChange={() => this.onCategoryCheckedChange(category)} />\r\n                        },\r\n                        {\r\n                            className: \"category-name-column\",\r\n                            content: <Text content={category.name} weight=\"bold\" />,\r\n                            title: category.name,\r\n                            truncateContent: true\r\n                        },\r\n                        {\r\n                            content: category.description,\r\n                            title: category.description,\r\n                            truncateContent: true\r\n                        }\r\n                    ]}\r\n            });\r\n\r\n            return (\r\n                <Table data-testid=\"table\" className=\"manage-categories-content categories-table manage-categories-content-background\"\r\n                    header={categoriesTableHeaderItems}\r\n                    rows={rows}\r\n                />\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <Flex className=\"manage-categories-content\" gap=\"gap.small\">\r\n                    <Flex.Item>\r\n                        <div\r\n                            style={{\r\n                                position: \"relative\",\r\n                            }}\r\n                        >\r\n                            <QuestionCircleIcon outline color=\"green\" />\r\n                        </div>\r\n                    </Flex.Item>\r\n                    <Flex.Item grow={this.props.dir === LanguageDirection.Ltr}>\r\n                        <Flex column gap=\"gap.small\" vAlign=\"stretch\">\r\n                            <div className={this.props.dir === LanguageDirection.Rtl ? \"rtl-direction rtl-right-margin-small\" : \"\"}>\r\n                                <Text weight=\"bold\" content={this.localize(\"categoriesNotAvailableHeader\")} /><br />\r\n                                <Text content={\r\n                                    this.searchText !== \"\" ?\r\n                                    this.localize(\"categoriesNotFoundForSearchedTextDescription\", { searchedText: this.searchText }) :\r\n                                    this.localize(\"categoriesNotAvailableHeaderDescription\")}\r\n                                />\r\n                            </div>\r\n                        </Flex>\r\n                    </Flex.Item>\r\n                </Flex>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Render search input based on culture direction. */\r\n    renderSearchInput = () => {\r\n            if (this.props.dir === LanguageDirection.Rtl)\r\n            {\r\n                return <div>\r\n                    <Input\r\n                        icon={<SearchIcon />}\r\n                        iconPosition={\"start\"}\r\n                        data-testid=\"searchbar\"\r\n                        placeholder={this.localize(\"searchPlaceholder\")}\r\n                        onChange={this.onSearchTextChanged}\r\n                    />\r\n                </div>\r\n            }\r\n            else if(this.props.dir === LanguageDirection.Ltr)\r\n            {\r\n                return <Input\r\n                    icon={<SearchIcon />}\r\n                    iconPosition={\"end\"}\r\n                    data-testid=\"searchbar\"\r\n                    placeholder={this.localize(\"searchPlaceholder\")}\r\n                    onChange={this.onSearchTextChanged}\r\n                />\r\n            }\r\n    }\r\n\r\n    /** Renders the component */\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"commandbar-wrapper\">\r\n                    <Flex className=\"commandbar-wrapper-container\">\r\n                        <Button text data-testid=\"addbutton\" className=\"list-categories-menu-button\" icon={<AddIcon className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}/>} content={this.localize(\"add\")} onClick={() => this.onActionPerformed(CategoryOperations.Add)} />\r\n                        <Button text data-testid=\"editbutton\" className=\"list-categories-menu-button\" icon={<EditIcon className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}/>} disabled={!this.state.isEditEnabled} content={this.localize(\"edit\")} onClick={() => this.onActionPerformed(CategoryOperations.Edit)} />\r\n                        <Button text data-testid=\"deletebutton\" icon={<TrashCanIcon className={this.props.dir === LanguageDirection.Rtl ? \"rtl-left-margin-small\" : \"\"}/>} disabled={!this.state.isDeleteEnabled} content={this.localize(\"delete\")} onClick={() => this.onActionPerformed(CategoryOperations.Delete)} />\r\n                        <Flex.Item push={this.props.dir === LanguageDirection.Ltr} grow={this.props.dir === LanguageDirection.Rtl} className=\"search-input-container\">\r\n                            {this.renderSearchInput()}\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                </div>\r\n                { this.renderCategories() }\r\n                <Flex className=\"manage-categories-footer\" space=\"between\">\r\n                    { this.renderFooter() }\r\n                </Flex>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(ListCategories));","// <copyright file=\"manage-categories-operation-footer.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Button, Flex, Text, ChevronStartIcon, ChevronEndIcon } from \"@fluentui/react-northstar\";\r\nimport { LanguageDirection } from \"../../models/language-direction\";\r\n\r\ninterface IManageCategoriesOperationFooter {\r\n    backButtonContent: string,\r\n    submitButtonContent: string,\r\n    isSubmitButtonDisabled: boolean,\r\n    isOperationInProgress: boolean,\r\n    errorMessage: string,\r\n    onBackClicked: () => void,\r\n    onSubmit: () => void,\r\n    dir: LanguageDirection\r\n}\r\n\r\n/**\r\n * The function component which renders footers for Add, Edit and Delete category operation\r\n * @param props The props of type IManageCategoriesOperationFooter\r\n */\r\nexport const ManageCategoriesOperationFooter: React.FunctionComponent<IManageCategoriesOperationFooter> = props => {\r\n    /** Renders error if data operation fails */\r\n    const renderError = () => {\r\n        if (props.errorMessage && props.errorMessage !== \"\") {\r\n            return (\r\n                <Flex.Item push>\r\n                    <Text error content={props.errorMessage} weight=\"semibold\" />\r\n                </Flex.Item>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Flex className=\"manage-categories-footer\" space=\"between\">\r\n            <Button data-testid=\"backbutton\" className=\"back-button\" text icon={props.dir === LanguageDirection.Rtl ? <ChevronEndIcon /> : <ChevronStartIcon />} content={props.backButtonContent} onClick={props.onBackClicked} />\r\n            <Flex gap=\"gap.medium\" vAlign=\"center\" hAlign=\"center\">\r\n                {renderError()}\r\n                <Flex.Item push>\r\n                    <Button\r\n                        primary\r\n                        content={props.submitButtonContent}\r\n                        disabled={props.isSubmitButtonDisabled}\r\n                        loading={props.isOperationInProgress}\r\n                        onClick={props.onSubmit}\r\n                        data-testid=\"manage-categories-operation-footer_button\"\r\n                    />\r\n                </Flex.Item>\r\n            </Flex>\r\n        </Flex>\r\n    );\r\n}","// <copyright file=\"add-update-category.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Input, Text, TextArea } from \"@fluentui/react-northstar\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport Constants, { ResponseStatus } from \"../../constants/constants\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\nimport { TFunction } from \"i18next\";\r\nimport { ManageCategoriesOperationFooter } from \"./manage-categories-operation-footer\";\r\nimport { createCategoryAsync, updateCategoryAsync, getEventCategoriesAsync } from \"../../api/manage-categories-api\";\r\n\r\ninterface IAddCategoryProps extends WithTranslation, IWithContext {\r\n    category?: ICategory\r\n    onBackClicked: () => void,\r\n    onCategoryAddedOrUpdated: (message: string) => void\r\n}\r\n\r\ninterface IAddCategoryState {\r\n    category: ICategory,\r\n    isCreatingOrUpdating: boolean,\r\n    errorMessage: string,\r\n    isCategoryAlreadyExists: boolean\r\n}\r\n\r\n/** This component adds a new event category */\r\nclass AddUpdateCategory extends React.Component<IAddCategoryProps, IAddCategoryState> {\r\n    readonly localize: TFunction;\r\n    teamId: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.teamId = \"\";\r\n\r\n        let categoryDetails: ICategory;\r\n\r\n        if (this.props.category) {\r\n            categoryDetails = { ...this.props.category };\r\n        }\r\n        else {\r\n            categoryDetails = {\r\n                categoryId: \"\",\r\n                name: \"\",\r\n                description: \"\",\r\n                isSelected: false,\r\n                isInUse: false,\r\n            };\r\n        }\r\n\r\n        this.state = {\r\n            category: categoryDetails,\r\n            isCreatingOrUpdating: false,\r\n            errorMessage: \"\",\r\n            isCategoryAlreadyExists: false\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets teams context from HOC as props\r\n     */\r\n    componentWillReceiveProps(nextProps: IAddCategoryProps) {\r\n        if (this.props.teamsContext !== nextProps.teamsContext) {\r\n            if (nextProps.teamsContext) {\r\n                this.teamId = nextProps.teamsContext.teamId!;\r\n\r\n                if (this.props.category) {\r\n                    this.setState({ category: { ...this.props.category } });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** The HTTP POST call to add a new category in storage */\r\n    createOrUpdateCategoryAsync = async () => {\r\n        this.setState({ isCreatingOrUpdating: true, errorMessage: \"\" });\r\n\r\n        let isCategoryAlreadyExists: boolean = false;\r\n\r\n        // Checking whether category name already exists-\r\n        // - creating a new category\r\n        // - updating a category after category name changed\r\n        if (!this.props.category || (this.props.category.name !== this.state.category.name.trim())) {\r\n            isCategoryAlreadyExists = await this.checkCategoryExists();\r\n\r\n            if (isCategoryAlreadyExists) {\r\n                this.setState({ isCategoryAlreadyExists: true, isCreatingOrUpdating: false });\r\n                return;\r\n            }\r\n        }\r\n\r\n        let response;\r\n\r\n        if (this.props.category) {\r\n            response = await updateCategoryAsync(this.teamId, this.state.category);\r\n\r\n            if (response.status == ResponseStatus.OK) {\r\n                if (response.data == true) {\r\n                    this.props.onCategoryAddedOrUpdated(this.localize(\"categoryUpdateSuccess\"));\r\n                }\r\n                else {\r\n                    this.setState({ isCreatingOrUpdating: false, errorMessage: this.localize(\"failedToUpdateCategory\") });\r\n                }\r\n            }\r\n            else {\r\n                this.setState({ isCreatingOrUpdating: false, errorMessage: this.localize(\"dataResponseFailedStatus\") });\r\n            }\r\n        }\r\n        else {\r\n            response = await createCategoryAsync(this.teamId, this.state.category);\r\n\r\n            if (response.status == ResponseStatus.OK && response.data === true) {\r\n                this.setState({ isCreatingOrUpdating: false, errorMessage: \"\" });\r\n                this.props.onCategoryAddedOrUpdated(this.localize(\"categoryAddedSuccess\"));\r\n            }\r\n            else {\r\n                this.setState({ isCreatingOrUpdating: false, errorMessage: this.localize(\"dataResponseFailedStatus\") });\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Checks whether a category with the same name already exists */\r\n    checkCategoryExists = async () => {\r\n        if (this.state.category.name?.length) {\r\n            let result = await getEventCategoriesAsync();\r\n\r\n            if (result && result.status === ResponseStatus.OK && result.data) {\r\n                let categories: Array<ICategory> = result.data;\r\n\r\n                if (!categories || categories.length === 0) {\r\n                    return false;\r\n                }\r\n\r\n                let isCategoryAlreadyExists: boolean = categories.some((category: ICategory) => category.name.toLowerCase() === this.state.category.name.trim().toLowerCase());\r\n\r\n                return isCategoryAlreadyExists;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The event handler called when category name changes\r\n     * @param event The input event object\r\n     */\r\n    onNameChanged = (event: any) => {\r\n        let category = this.state.category;\r\n        category.name = event.target.value;\r\n\r\n        this.setState({ category, isCategoryAlreadyExists: false });\r\n    }\r\n\r\n    /**\r\n     * The event handler called when category description changes\r\n     * @param event The input event object\r\n     */\r\n    onDescriptionChanged = (event: any) => {\r\n        let category = this.state.category;\r\n        category.description = event.target.value;\r\n\r\n        this.setState({ category });\r\n    }\r\n\r\n    /** Renders the error message related to category name */\r\n    renderCategoryNameError = () => {\r\n        if (this.state.isCategoryAlreadyExists) {\r\n            return (\r\n                <Flex.Item push>\r\n                    <Text error content={this.localize(\"categoryAlreadyExistsError\")} weight=\"semibold\" />\r\n                </Flex.Item>\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders a component */\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Flex column gap=\"gap.medium\" data-testid=\"addorupdateform\">\r\n                    <Flex column gap=\"gap.smaller\" >\r\n                        <Flex space=\"between\">\r\n                            <Text content={`${this.localize(\"categoryName\")}*`} weight=\"semibold\" />\r\n                            {this.renderCategoryNameError()}\r\n                        </Flex>\r\n                        <Input\r\n                            fluid\r\n                            required={true}\r\n                            placeholder={this.localize(\"enterNamePlaceholder\")}\r\n                            value={this.state.category.name}\r\n                            maxLength={Constants.categoryNameMaxLength}\r\n                            onChange={this.onNameChanged}\r\n                            data-testid=\"categoryname\"\r\n                        />\r\n                    </Flex>\r\n                    <Flex column gap=\"gap.smaller\">\r\n                        <Text content={`${this.localize(\"description\")}*`} weight=\"semibold\" />\r\n                        <TextArea\r\n                            className=\"add-update-category-description\"\r\n                            fluid\r\n                            placeholder={this.localize(\"categoryDescriptionPlaceholder\", { \"categoryDescriptionMaxLength\": Constants.categoryDescriptionMaxLength })}\r\n                            maxLength={Constants.categoryDescriptionMaxLength}\r\n                            value={this.state.category.description}\r\n                            onChange={this.onDescriptionChanged}\r\n                            data-testid=\"categorydescription\"\r\n                        />\r\n                    </Flex>\r\n                    <ManageCategoriesOperationFooter\r\n                        dir={this.props.dir}\r\n                        backButtonContent={this.localize(\"back\")}\r\n                        submitButtonContent={this.props.category ? this.localize(\"save\") : this.localize(\"addCategory\")}\r\n                        isSubmitButtonDisabled={this.state.category.name.trim() === \"\" || this.state.category.description.trim() === \"\" || this.state.isCreatingOrUpdating || this.state.isCategoryAlreadyExists}\r\n                        isOperationInProgress={this.state.isCreatingOrUpdating}\r\n                        errorMessage={this.state.errorMessage}\r\n                        onBackClicked={this.props.onBackClicked}\r\n                        onSubmit={this.createOrUpdateCategoryAsync}\r\n                    />\r\n                </Flex>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(AddUpdateCategory));","// <copyright file=\"delete-category.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Table, Text, ExclamationCircleIcon } from \"@fluentui/react-northstar\";\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { ManageCategoriesOperationFooter } from \"./manage-categories-operation-footer\";\r\nimport { deleteCategoriesAsync } from \"../../api/manage-categories-api\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\n\r\ninterface IDeleteCategoryProps extends WithTranslation, IWithContext {\r\n    categories: Array<ICategory>,\r\n    onBackClicked: () => void,\r\n    onCategoryDeleted: (message: string) => void\r\n}\r\n\r\ninterface IDeleteCategoryState {\r\n    isDeleting: boolean,\r\n    errorMessage: string\r\n}\r\n\r\n/** This component manages the Delete category operations */\r\nclass DeleteCategory extends React.Component<IDeleteCategoryProps, IDeleteCategoryState> {\r\n    readonly localize: TFunction = this.props.t;\r\n    teamId: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.teamId = \"\";\r\n\r\n        this.state = {\r\n            isDeleting: false,\r\n            errorMessage: \"\"\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets teams context from HOC as props\r\n     */\r\n    componentWillReceiveProps(nextProps: IDeleteCategoryProps) {\r\n        if (this.props.teamsContext !== nextProps.teamsContext) {\r\n            if (nextProps.teamsContext) {\r\n                this.teamId = nextProps.teamsContext.teamId!;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** The HTTP DELETE call to delete selected category/ies */\r\n    deleteCategoryAsync = async () => {\r\n        this.setState({ isDeleting: true, errorMessage: \"\" });\r\n\r\n        let categoryIdsToDelete = this.props.categories.map((category) => {\r\n            return category.categoryId;\r\n        });\r\n\r\n        let response = await deleteCategoriesAsync(this.teamId, categoryIdsToDelete.join(\",\"));\r\n\r\n        if (response.status === ResponseStatus.OK) {\r\n            if (response.data === true) {\r\n                this.props.onCategoryDeleted(this.localize(\"categoryDeleteSuccess\"));\r\n            }\r\n            else {\r\n                this.setState({ isDeleting: false, errorMessage: this.localize(\"failedToDeleteCategory\") });\r\n            }\r\n        }\r\n        else {\r\n            this.setState({ isDeleting: false, errorMessage: this.localize(\"dataResponseFailedStatus\") });\r\n        }\r\n    }\r\n\r\n    /** Renders the categories that needs to be deleted */\r\n    renderCategories = () => {\r\n        if (this.props.categories && this.props.categories.length > 0) {\r\n            const categoriesTableHeaderItems = {\r\n                key: \"header\",\r\n                items: [\r\n                    { key: \"category-name\", className: \"category-name-column\", content: this.localize(\"categoryName\") },\r\n                    { key: \"category-description\", content: this.localize(\"description\") }\r\n                ]\r\n            };\r\n\r\n            let rows = this.props.categories.map((category: ICategory, index: number) => {\r\n                return {\r\n                    \"key\": index,\r\n                    \"items\": [\r\n                        {\r\n                            className: \"category-select-all-column\",\r\n                            content: category.isInUse ? <ExclamationCircleIcon title={this.localize(\"categoryInUse\")} style={{ paddingLeft: \".42rem\" }} /> : \"\"\r\n                        },\r\n                        {\r\n                            className: \"category-name-column\",\r\n                            content: <Text content={category.name} weight=\"bold\" />,\r\n                            title: category.name,\r\n                            truncateContent: true\r\n                        },\r\n                        {\r\n                            content: category.description,\r\n                            title: category.description,\r\n                            truncateContent: true\r\n                        }\r\n                    ]}\r\n            });\r\n\r\n            return (\r\n                <Table\r\n                    className=\"manage-categories-content categories-table manage-categories-content-background\"\r\n                    header={categoriesTableHeaderItems}\r\n                    rows={rows}\r\n                    data-testid=\"deletecategorytable\"\r\n                />\r\n            );\r\n        }\r\n    }\r\n\r\n    /** Renders component */\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Text content={this.localize(\"deleteCategoryConfirmation\")} weight=\"semibold\" />\r\n                {this.renderCategories()}\r\n                <ManageCategoriesOperationFooter\r\n                    dir={this.props.dir}\r\n                    backButtonContent={this.localize(\"back\")}\r\n                    submitButtonContent={this.localize(\"delete\")}\r\n                    isSubmitButtonDisabled={this.state.isDeleting}\r\n                    isOperationInProgress={this.state.isDeleting}\r\n                    errorMessage={this.state.errorMessage}\r\n                    onBackClicked={this.props.onBackClicked}\r\n                    onSubmit={this.deleteCategoryAsync}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(DeleteCategory));","// <copyright file=\"manage-categories.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Provider } from '@fluentui/react-northstar';\r\nimport { Fabric } from '@fluentui/react';\r\nimport ListCategories from \"./list-categories\";\r\nimport { CategoryOperations } from \"../../constants/constants\";\r\nimport AddUpdateCategory from './add-update-category';\r\nimport DeleteCategory from './delete-category';\r\nimport { ICategory } from \"../../models/ICategory\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\n\r\nimport \"./manage-categories.css\";\r\n\r\ninterface IManageCategoriesProps extends WithTranslation, IWithContext {\r\n}\r\n\r\ninterface IManageCategoriesState {\r\n    operation: CategoryOperations,\r\n    operationData: Array<ICategory>,\r\n    operationStatusMessage: string\r\n}\r\n\r\n/** The class which manages manage-categories dialog content */\r\nclass ManageCategories extends React.Component<IManageCategoriesProps, IManageCategoriesState > {\r\n    readonly localize: TFunction;\r\n\r\n    /** Constructor which initializes state */\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n\r\n        this.state = {\r\n            operation: CategoryOperations.Unknown,\r\n            operationData: [],\r\n            operationStatusMessage: \"\"\r\n        };\r\n    }\r\n\r\n    /** Sets operation whether it is Add, Edit or Delete. If 'Back' button pressed from any component,\r\n    in that case the operation will be unknown.*/\r\n    setCategoryOperation = (\r\n        operationStatusMessage: string = \"\",\r\n        categoryOperation: CategoryOperations = CategoryOperations.Unknown,\r\n        operationData: Array<ICategory> = []) => {\r\n        this.setState({ operation: categoryOperation, operationData, operationStatusMessage });\r\n    }\r\n\r\n    /** The event handler called when clicked on 'Back' from any category operation */\r\n    onBackClicked = () => {\r\n        this.setCategoryOperation();\r\n    }\r\n\r\n    /**\r\n     * The event handler called when a category operation successfully executed\r\n     * @param message The success message\r\n     */\r\n    onOperationSuccessful = (message: string) => {\r\n        this.setCategoryOperation(message);\r\n    }\r\n\r\n    /**\r\n     * An event handler gets called when clicked on Add, Edit and Delete category\r\n     * @param categoryOperation The category operation performed\r\n     * @param operationData The data that needs to be populated in selected category operation\r\n     */\r\n    onCategoryActionPerformed = (categoryOperation: CategoryOperations, operationData?: Array<ICategory>) => {\r\n        this.setCategoryOperation(\"\", categoryOperation, operationData);\r\n    }\r\n\r\n    /** Renders component based on Add, Edit or Delete */\r\n    renderOperation = () => {\r\n        switch (this.state.operation) {\r\n            case CategoryOperations.Add:\r\n                return <AddUpdateCategory\r\n                    onBackClicked={this.onBackClicked}\r\n                    onCategoryAddedOrUpdated={this.onOperationSuccessful} />;\r\n\r\n            case CategoryOperations.Edit:\r\n                return <AddUpdateCategory\r\n                    category={this.state.operationData?.[0]}\r\n                    onBackClicked={this.onBackClicked}\r\n                    onCategoryAddedOrUpdated={this.onOperationSuccessful} />;\r\n\r\n            case CategoryOperations.Delete:\r\n                return <DeleteCategory\r\n                    categories={this.state.operationData}\r\n                    onBackClicked={this.onBackClicked}\r\n                    onCategoryDeleted={this.onOperationSuccessful} />\r\n\r\n            default:\r\n                return <ListCategories statusMessage={this.state.operationStatusMessage} onActionPerformed={this.onCategoryActionPerformed} />;\r\n        }\r\n    }\r\n\r\n    /** Renders the component */\r\n    render() {\r\n        return (\r\n            <Fabric dir={this.props.dir}>\r\n                <Provider>\r\n                    <Flex>\r\n                        <div className=\"task-module-container\">\r\n                            {this.renderOperation()}\r\n                        </div>\r\n                    </Flex>\r\n                </Provider>\r\n            </Fabric>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(ManageCategories));","// <copyright file=\"close-cancel-event.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport moment from \"moment\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IEvent } from \"../../models/IEvent\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\nimport { EventOperationType } from \"../../models/event-operation-type\";\r\nimport { EventStatus } from \"../../models/event-status\";\r\nimport { getEventAsync } from \"../../api/manage-events-api\";\r\nimport { getUserProfiles } from \"../../api/user-group-api\"\r\nimport { closeEventRegistrationsAsync, cancelEventAsync } from \"../../api/manage-events-api\";\r\nimport EventDetails from \"../event-operation-task-module/event-details\";\r\nimport withContext, { IWithContext } from \"../../providers/context-provider\";\r\n\r\ninterface ICloseCancelEventState {\r\n    isLoading: boolean,\r\n    isOperationInProgress: boolean,\r\n    eventDetails: IEvent | undefined,\r\n    eventCreatedBy: string,\r\n    isErrorGettingEventDetails: boolean,\r\n    isFailedToCloseOrCancelEvent: boolean,\r\n    eventOperationType: EventOperationType\r\n}\r\n\r\ninterface ICloseCancelEventProps extends IWithContext, WithTranslation {\r\n}\r\n\r\nclass CloseCancelEvent extends React.Component<ICloseCancelEventProps, ICloseCancelEventState> {\r\n    readonly localize: TFunction;\r\n    isMobileView: boolean;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.localize = this.props.t;\r\n        this.isMobileView = false;\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            isOperationInProgress: false,\r\n            eventDetails: undefined,\r\n            eventCreatedBy: \"\",\r\n            isErrorGettingEventDetails: false,\r\n            isFailedToCloseOrCancelEvent: false,\r\n            eventOperationType: EventOperationType.None\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getEventDetailsAsync();\r\n    }\r\n\r\n    /** Gets event details */\r\n    getEventDetailsAsync = async () => {\r\n        let queryParam = new URLSearchParams(window.location.search);\r\n        let operationType = queryParam.get(\"operationType\") ?? \"0\";\r\n        let eventId = queryParam.get(\"eventId\") ?? \"0\";\r\n        let teamId = queryParam.get(\"teamId\") ?? \"0\";\r\n        this.isMobileView = queryParam.get(\"isMobileView\") === \"true\" ? true : false;\r\n\r\n        let response = await getEventAsync(eventId!, teamId!);\r\n\r\n        if (response.status === ResponseStatus.OK && response.data) {\r\n            let eventDetails: IEvent = response.data;\r\n            let eventOperationType: EventOperationType = EventOperationType.None;\r\n\r\n            if (eventDetails.status === EventStatus.Active && new Date() < moment.utc(eventDetails.endDate).local().toDate()) {\r\n                if (operationType === EventOperationType.CloseRegistration.toString()) {\r\n                    if (!eventDetails.isRegistrationClosed) {\r\n                        eventOperationType = EventOperationType.CloseRegistration;\r\n                    }\r\n                }\r\n                else if (operationType === EventOperationType.CancelEvent.toString()) {\r\n                    eventOperationType = EventOperationType.CancelEvent;\r\n                }\r\n            }\r\n\r\n            this.setState({isLoading: false, eventDetails, eventOperationType }, () => {\r\n                if (this.state.eventDetails) {\r\n                    this.getUserProfileAsync(this.state.eventDetails.createdBy);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.setState({ isLoading: false, isErrorGettingEventDetails: true });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get event creator information\r\n     * @param userId The user ID of which information to get\r\n     */\r\n    getUserProfileAsync = async (userId: string) => {\r\n        let user: Array<string> = [userId];\r\n        let response = await getUserProfiles(user);\r\n\r\n        if (response.status === ResponseStatus.OK && response.data) {\r\n            let userInfo = response.data[0];\r\n            this.setState({ eventCreatedBy: userInfo.displayName });\r\n        }\r\n    }\r\n\r\n    /** Called when click on 'Close Registration' or 'Cancel' event */\r\n    onCloseOrCancelEvent = async () => {\r\n        this.setState({ isFailedToCloseOrCancelEvent: false, isOperationInProgress: true });\r\n\r\n        let response;\r\n        let teamId = this.state.eventDetails ? this.state.eventDetails.teamId : \"0\";\r\n        let eventId = this.state.eventDetails ? this.state.eventDetails.eventId : \"0\";\r\n\r\n\r\n        switch (this.state.eventOperationType) {\r\n            case EventOperationType.CloseRegistration:\r\n                response = await closeEventRegistrationsAsync(teamId, eventId);\r\n                break;\r\n\r\n            case EventOperationType.CancelEvent:\r\n                response = await cancelEventAsync(teamId, eventId);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data === true) {\r\n            this.props.microsoftTeams.tasks.submitTask({ isSuccess: true });\r\n        }\r\n        else {\r\n            this.setState({ isFailedToCloseOrCancelEvent: true, isOperationInProgress: false });\r\n        }\r\n    }\r\n\r\n    /** Renders component */\r\n    render() {\r\n        return (\r\n            <EventDetails\r\n                dir={this.props.dir}\r\n                eventDetails={this.state.eventDetails}\r\n                eventCreatedByName={this.state.eventCreatedBy}\r\n                eventOperationType={this.state.eventOperationType}\r\n                isLoadingEventDetails={this.state.isLoading}\r\n                isFailedToGetEventDetails={this.state.isErrorGettingEventDetails}\r\n                isOperationInProgress={this.state.isOperationInProgress}\r\n                isOperationFailed={this.state.isFailedToCloseOrCancelEvent}\r\n                isMobileView={this.isMobileView}\r\n                onPerformOperation={this.onCloseOrCancelEvent}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(withContext(CloseCancelEvent));","// <copyright file=\"delete-draft.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { Flex, Text, Button, Provider } from \"@fluentui/react-northstar\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { deleteDraftEventAsync } from \"../../api/manage-events-api\";\r\nimport { ResponseStatus } from \"../../constants/constants\";\r\n\r\n/** Renders component to delete draft event */\r\nconst DeleteDraftEvent: React.FunctionComponent = props => {\r\n    const localize: TFunction = useTranslation().t;\r\n    const search = window.location.search;\r\n    const params = new URLSearchParams(search);\r\n    const eventId = params.get(\"eventId\")!;\r\n    const teamId = params.get(\"teamId\")!;\r\n    let [isUpdatingStatus, setUpdatingEventStatus] = React.useState(false);\r\n    let [errorGettingEventDetails, setEventDetailsError] = React.useState(false);\r\n    let [errorUpdatingEventStatus, setUpdateStatusError] = React.useState(false);\r\n\r\n    /** Delete draft event */\r\n    const deleteDraftEvent = async () => {\r\n        setUpdateStatusError(false);\r\n        setUpdatingEventStatus(true);\r\n\r\n        let response = await deleteDraftEventAsync(teamId!, eventId!);\r\n\r\n        if (response && response.status === ResponseStatus.OK && response.data === true) {\r\n            setUpdatingEventStatus(false);\r\n            microsoftTeams.tasks.submitTask({ isSuccess: true });\r\n        }\r\n        else {\r\n            setUpdatingEventStatus(false);\r\n            setUpdateStatusError(true);\r\n        }\r\n    }\r\n\r\n    /** Renders component */\r\n    const renderEventDetails = () => {\r\n        if (errorGettingEventDetails) {\r\n            return <Text error content={localize(\"dataResponseFailedStatus\")} weight=\"semibold\" />\r\n        }\r\n\r\n        return (\r\n            <Provider>\r\n                <Flex>\r\n                    <div className=\"task-module-container close-cancel-event-container\">\r\n                        <div className=\"close-cancel-event\">\r\n                            <Text weight=\"bold\" content={localize(\"deleteConfirmationText\")} />\r\n                        </div>\r\n                        <Flex styles={{ marginRight: \"3.4rem\", marginLeft: \"3.4rem\", margintop: \"2rem\", position:\"absolute\", bottom:\"3.4rem\" }} vAlign=\"center\">\r\n                            {errorUpdatingEventStatus ? <Text error content={localize(\"dataResponseFailedStatus\")} weight=\"semibold\" /> : null}\r\n                            <Flex.Item push>\r\n                                <Button\r\n                                    primary\r\n                                    loading={isUpdatingStatus}\r\n                                    disabled={isUpdatingStatus}\r\n                                    content={localize(\"delete\")}\r\n                                    onClick={deleteDraftEvent}\r\n                                />\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    </div>\r\n                </Flex>\r\n            </Provider>\r\n        );\r\n    }\r\n\r\n    return renderEventDetails();\r\n}\r\n\r\nexport default DeleteDraftEvent;","// <copyright file=\"signin.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Text, Button } from \"@fluentui/react-northstar\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport \"../../styles/signin.css\";\r\n\r\nconst SignInPage: React.FunctionComponent<RouteComponentProps> = props => {\r\n    const localize = useTranslation().t;\r\n\r\n    function onSignIn() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.authentication.authenticate({\r\n            url: window.location.origin + \"/signin-simple-start\",\r\n            successCallback: () => {\r\n                console.log(\"Login succeeded!\");\r\n                window.location.href = \"/discover\";\r\n            },\r\n            failureCallback: (reason) => {\r\n                console.log(\"Login failed: \" + reason);\r\n                window.location.href = \"/errorpage\";\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"sign-in-content-container\">\r\n            <div>\r\n            </div>\r\n            <Text\r\n                content={localize('signInMessage')}\r\n                size=\"medium\"\r\n            />\r\n            <div className=\"space\"></div>\r\n            <Button content={localize(\"signInText\")} primary className=\"sign-in-button\" onClick={onSignIn} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignInPage;\r\n","// <copyright file=\"authentication-metadata-api.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from \"./axios-decorator\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport Constants from \"../constants/constants\";\r\nimport { getAPIRequestConfigParams } from \"../helpers/api-helper\";\r\n\r\n/**\r\n* Get authentication metadata from API\r\n* @param  {String} windowLocationOriginDomain Application base URL\r\n* @param  {String} login_hint Login hint for SSO\r\n*/\r\nexport const getAuthenticationConsentMetadata = async (windowLocationOriginDomain: string, login_hint: string): Promise<any> => {\r\n    let url = `${Constants.apiBaseURL}/authenticationMetadata/consentUrl`;\r\n    let config: AxiosRequestConfig = getAPIRequestConfigParams({\r\n        windowLocationOriginDomain: windowLocationOriginDomain,\r\n        loginhint: login_hint\r\n    });\r\n\r\n    return await axios.get(url, config, false);\r\n}","// <copyright file=\"signin-start.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { getAuthenticationConsentMetadata } from '../../api/authentication-metadata-api';\r\n\r\nconst SignInSimpleStart: React.FunctionComponent = () => {\r\n    useEffect(() => {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.getContext((context: microsoftTeams.Context) => {\r\n            const windowLocationOriginDomain = window.location.origin.replace(\"https://\", \"\");\r\n            const login_hint = context.upn ? context.upn : \"\";\r\n\r\n            getAuthenticationConsentMetadata(windowLocationOriginDomain, login_hint).then((result: any) => {\r\n                window.location.assign(result.data);\r\n            });\r\n        });\r\n    });\r\n\r\n    return (\r\n        <></>\r\n    );\r\n};\r\n\r\nexport default SignInSimpleStart;","// <copyright file=\"signin-end.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\n\r\nconst SignInSimpleEnd: React.FunctionComponent = () => {\r\n    // Parse hash parameters into key-value pairs\r\n    function getHashParameters() {\r\n        const hashParams: any = {};\r\n        window.location.hash.substr(1).split(\"&\").forEach(function (item) {\r\n            let s = item.split(\"=\"),\r\n                k = s[0],\r\n                v = s[1] && decodeURIComponent(s[1]);\r\n            hashParams[k] = v;\r\n        });\r\n        return hashParams;\r\n    }\r\n\r\n    useEffect(() => {\r\n        microsoftTeams.initialize();\r\n        const hashParams: any = getHashParameters();\r\n        if (hashParams[\"error\"]) {\r\n            // Authentication/authorization failed\r\n            microsoftTeams.authentication.notifyFailure(hashParams[\"error\"]);\r\n        } else if (hashParams[\"id_token\"]) {\r\n            // Success\r\n            microsoftTeams.authentication.notifySuccess();\r\n            window.location.href = \"/\";\r\n        } else {\r\n            // Unexpected condition: hash does not contain error or access_token parameter\r\n            microsoftTeams.authentication.notifyFailure(\"UnexpectedFailure\");\r\n        }\r\n    });\r\n\r\n    return (\r\n        <></>\r\n    );\r\n};\r\n\r\nexport default SignInSimpleEnd;","/*\r\n    <copyright file=\"router.tsx\" company=\"Microsoft\">\r\n    Copyright (c) Microsoft. All rights reserved.\r\n    </copyright>\r\n*/\r\n\r\nimport * as React from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport ErrorPage from '../components/error-page';\r\nimport \"../i18n\";\r\nimport RegisterRemoveEvent from \"../components/register-remove-event/register-remove-event\";\r\nimport DiscoverEvents from \"../components/discover-events/discover-events\";\r\nimport MyEvents from \"../components/my-events/my-events\";\r\nimport MobileFilter from \"../components/mobile-filter-bar/mobile-filter-bar\";\r\nimport ManageEvents from \"../components/manage-events/manage-events\";\r\nimport CreateEventWrapper from \"../components/create-event/create-event-wrapper\";\r\nimport ManageCategories from \"../components/manage-categories/manage-categories\";\r\nimport CloseOrCancelEvent from \"../components/manage-events/close-cancel-event\";\r\nimport DeleteDraftEvent from \"../components/manage-events/delete-draft\";\r\nimport SignInPage from \"../components/signin/signin\";\r\nimport SignInSimpleStart from \"../components/signin/signin-start\";\r\nimport SignInSimpleEnd from \"../components/signin/signin-end\";\r\n\r\nexport const AppRoute: React.FunctionComponent<{}> = () => {\r\n    return (\r\n        <React.Suspense fallback={<div className=\"container-div\"><div className=\"container-subdiv\"></div></div>}>\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    <Route exact path=\"/discover-events\" component={DiscoverEvents} />\r\n                    <Route exact path=\"/my-events\" component={MyEvents} />\r\n                    <Route exact path=\"/manage-events\" component={ManageEvents} />\r\n                    <Route exact path=\"/manage-categories\" component={ManageCategories} />\r\n                    <Route exact path=\"/close-or-cancel-event\" component={CloseOrCancelEvent} />\r\n                    <Route exact path=\"/register-remove\" component={RegisterRemoveEvent} />\r\n                    <Route exact path=\"/create-event\" component={CreateEventWrapper} />\r\n                    <Route exact path=\"/delete-draft\" component={DeleteDraftEvent} />\r\n                    <Route exact path=\"/mobile-filter\" component={MobileFilter} />\r\n                    <Route exact path=\"/signin\" component={SignInPage} />\r\n                    <Route exact path=\"/signin-simple-start\" component={SignInSimpleStart} />\r\n                    <Route exact path=\"/signin-simple-end\" component={SignInSimpleEnd} />\r\n                    <Route exact path=\"/error\" component={ErrorPage} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        </React.Suspense>\r\n    );\r\n};","// <copyright file=\"app.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\nimport * as React from \"react\";\r\nimport { AppRoute } from \"./router/router\";\r\nimport Resources from \"./constants/constants\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { Provider, ThemeInput, themes } from \"@fluentui/react-northstar\";\r\nimport { initializeIcons } from \"@uifabric/icons\";\r\nimport \"./styles/style.css\";\r\n\r\nexport interface IAppState {\r\n    theme: string;\r\n}\r\n\r\nexport default class App extends React.Component<{}, IAppState> {\r\n    theme?: string | null = null;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        let search = window.location.search;\r\n        let params = new URLSearchParams(search);\r\n        this.theme = params.get(\"theme\");\r\n        initializeIcons();\r\n\r\n        this.state = {\r\n            theme: this.theme ? this.theme : Resources.default,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.getContext((context: microsoftTeams.Context) => {\r\n            this.setState({ theme: context.theme! });\r\n        });\r\n        microsoftTeams.registerOnThemeChangeHandler((theme: string) => {\r\n            this.setState({ theme: theme! }, () => {\r\n                this.forceUpdate();\r\n            });\r\n        });\r\n    }\r\n\r\n    setThemeComponent = () => {\r\n        if (this.state.theme === Resources.dark) {\r\n            return this.getAppDOM(themes.teamsDark, \"dark-container\");;\r\n        }\r\n        else if (this.state.theme === Resources.contrast) {\r\n            return this.getAppDOM(themes.teamsHighContrast, \"high-contrast-container\");\r\n        } else {\r\n            return this.getAppDOM(themes.teams, \"default-container\");\r\n        }\r\n    }\r\n\r\n    getAppDOM = (theme: ThemeInput | undefined, className: string) => {\r\n        return (\r\n            <Provider theme={theme}>\r\n                <div className={className}>\r\n                    <div className=\"appContainer\">\r\n                        <AppRoute />\r\n                    </div>\r\n                </div>\r\n            </Provider>\r\n        );\r\n    }\r\n\r\n    /**\r\n    * Renders the component\r\n    */\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div>\r\n                {this.setThemeComponent()}\r\n            </div>\r\n        );\r\n    }\r\n}","/*\r\n    <copyright file=\"index.tsx\" company=\"Microsoft\">\r\n    Copyright (c) Microsoft. All rights reserved.\r\n    </copyright>\r\n*/\r\n\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport App from \"./app\";\r\n\r\nReactDOM.render(\r\n\t    <Router>\r\n\t\t    <App />\r\n        </Router>, document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}